# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ByodServiceInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'on_failure_policy': 'str',
        'transport_type': 'str',
        'resource_type': 'str',
        'service_id': 'str',
        'deployment_mode': 'str'
    }
    if hasattr(BaseServiceInstance, "swagger_types"):
        swagger_types.update(BaseServiceInstance.swagger_types)

    attribute_map = {
        'on_failure_policy': 'on_failure_policy',
        'transport_type': 'transport_type',
        'resource_type': 'resource_type',
        'service_id': 'service_id',
        'deployment_mode': 'deployment_mode'
    }
    if hasattr(BaseServiceInstance, "attribute_map"):
        attribute_map.update(BaseServiceInstance.attribute_map)

    def __init__(self, on_failure_policy=None, transport_type=None, resource_type=None, service_id=None, deployment_mode='ACTIVE_STANDBY', *args, **kwargs):  # noqa: E501
        """ByodServiceInstance - a model defined in Swagger"""  # noqa: E501
        self._on_failure_policy = None
        self._transport_type = None
        self._resource_type = None
        self._service_id = None
        self._deployment_mode = None
        self.discriminator = None
        if on_failure_policy is not None:
            self.on_failure_policy = on_failure_policy
        self.transport_type = transport_type
        self.resource_type = resource_type
        if service_id is not None:
            self.service_id = service_id
        self.deployment_mode = deployment_mode
        BaseServiceInstance.__init__(self, *args, **kwargs)

    @property
    def on_failure_policy(self):
        """Gets the on_failure_policy of this ByodServiceInstance.  # noqa: E501

        Failure policy of the service instance - if it has to be different from the service. By default the service instance inherits the FailurePolicy of the service it belongs to.  # noqa: E501

        :return: The on_failure_policy of this ByodServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._on_failure_policy

    @on_failure_policy.setter
    def on_failure_policy(self, on_failure_policy):
        """Sets the on_failure_policy of this ByodServiceInstance.

        Failure policy of the service instance - if it has to be different from the service. By default the service instance inherits the FailurePolicy of the service it belongs to.  # noqa: E501

        :param on_failure_policy: The on_failure_policy of this ByodServiceInstance.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALLOW", "BLOCK"]  # noqa: E501
        if on_failure_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `on_failure_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(on_failure_policy, allowed_values)
            )

        self._on_failure_policy = on_failure_policy

    @property
    def transport_type(self):
        """Gets the transport_type of this ByodServiceInstance.  # noqa: E501

        Transport to be used by this service instance for deploying the Service-VM. This field is to be set Not Applicable(NA) if the service only caters to functionality EPP(Endpoint Protection).  # noqa: E501

        :return: The transport_type of this ByodServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._transport_type

    @transport_type.setter
    def transport_type(self, transport_type):
        """Sets the transport_type of this ByodServiceInstance.

        Transport to be used by this service instance for deploying the Service-VM. This field is to be set Not Applicable(NA) if the service only caters to functionality EPP(Endpoint Protection).  # noqa: E501

        :param transport_type: The transport_type of this ByodServiceInstance.  # noqa: E501
        :type: str
        """
        if transport_type is None:
            raise ValueError("Invalid value for `transport_type`, must not be `None`")  # noqa: E501
        allowed_values = ["L2_BRIDGE", "L3_ROUTED", "NSH", "NA"]  # noqa: E501
        if transport_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transport_type` ({0}), must be one of {1}"  # noqa: E501
                .format(transport_type, allowed_values)
            )

        self._transport_type = transport_type

    @property
    def resource_type(self):
        """Gets the resource_type of this ByodServiceInstance.  # noqa: E501

        ServiceInstance is used when NSX handles the lifecyle of   appliance. Deployment and appliance related all the information is necessary. ByodServiceInstance is a custom instance to be used when NSX is not handling   the lifecycles of appliance/s. User will manage their own appliance (BYOD)   to connect with NSX. VirtualServiceInstance is a a custom instance to be used when NSX is not   handling the lifecycle of an appliance and when the user is not bringing   their own appliance.   # noqa: E501

        :return: The resource_type of this ByodServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ByodServiceInstance.

        ServiceInstance is used when NSX handles the lifecyle of   appliance. Deployment and appliance related all the information is necessary. ByodServiceInstance is a custom instance to be used when NSX is not handling   the lifecycles of appliance/s. User will manage their own appliance (BYOD)   to connect with NSX. VirtualServiceInstance is a a custom instance to be used when NSX is not   handling the lifecycle of an appliance and when the user is not bringing   their own appliance.   # noqa: E501

        :param resource_type: The resource_type of this ByodServiceInstance.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ServiceInstance", "ByodServiceInstance", "VirtualServiceInstance"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def service_id(self):
        """Gets the service_id of this ByodServiceInstance.  # noqa: E501

        The Service to which the service instance is associated.  # noqa: E501

        :return: The service_id of this ByodServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this ByodServiceInstance.

        The Service to which the service instance is associated.  # noqa: E501

        :param service_id: The service_id of this ByodServiceInstance.  # noqa: E501
        :type: str
        """

        self._service_id = service_id

    @property
    def deployment_mode(self):
        """Gets the deployment_mode of this ByodServiceInstance.  # noqa: E501

        Deployment mode specifies where the partner appliance will be deployed in HA or non-HA i.e standalone mode.  # noqa: E501

        :return: The deployment_mode of this ByodServiceInstance.  # noqa: E501
        :rtype: str
        """
        return self._deployment_mode

    @deployment_mode.setter
    def deployment_mode(self, deployment_mode):
        """Sets the deployment_mode of this ByodServiceInstance.

        Deployment mode specifies where the partner appliance will be deployed in HA or non-HA i.e standalone mode.  # noqa: E501

        :param deployment_mode: The deployment_mode of this ByodServiceInstance.  # noqa: E501
        :type: str
        """
        if deployment_mode is None:
            raise ValueError("Invalid value for `deployment_mode`, must not be `None`")  # noqa: E501
        allowed_values = ["STAND_ALONE", "ACTIVE_STANDBY"]  # noqa: E501
        if deployment_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(deployment_mode, allowed_values)
            )

        self._deployment_mode = deployment_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ByodServiceInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ByodServiceInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
