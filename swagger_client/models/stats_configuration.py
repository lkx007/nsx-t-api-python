# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class StatsConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'display_name': 'str',
        'datasources': 'list[Datasource]',
        'weight': 'int',
        'icons': 'list[Icon]',
        'shared': 'bool',
        'footer': 'Footer',
        'drilldown_id': 'str',
        'is_drilldown': 'bool',
        'legend': 'Legend',
        'navigation': 'str',
        'stat': 'StatItem',
        'sections': 'list[DonutSection]',
        'sub_type': 'str',
        'label': 'Label'
    }
    if hasattr(WidgetConfiguration, "swagger_types"):
        swagger_types.update(WidgetConfiguration.swagger_types)

    attribute_map = {
        'resource_type': 'resource_type',
        'display_name': 'display_name',
        'datasources': 'datasources',
        'weight': 'weight',
        'icons': 'icons',
        'shared': 'shared',
        'footer': 'footer',
        'drilldown_id': 'drilldown_id',
        'is_drilldown': 'is_drilldown',
        'legend': 'legend',
        'navigation': 'navigation',
        'stat': 'stat',
        'sections': 'sections',
        'sub_type': 'sub_type',
        'label': 'label'
    }
    if hasattr(WidgetConfiguration, "attribute_map"):
        attribute_map.update(WidgetConfiguration.attribute_map)

    def __init__(self, resource_type=None, display_name=None, datasources=None, weight=None, icons=None, shared=None, footer=None, drilldown_id=None, is_drilldown=False, legend=None, navigation=None, stat=None, sections=None, sub_type=None, label=None, *args, **kwargs):  # noqa: E501
        """StatsConfiguration - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._display_name = None
        self._datasources = None
        self._weight = None
        self._icons = None
        self._shared = None
        self._footer = None
        self._drilldown_id = None
        self._is_drilldown = None
        self._legend = None
        self._navigation = None
        self._stat = None
        self._sections = None
        self._sub_type = None
        self._label = None
        self.discriminator = None
        self.resource_type = resource_type
        if display_name is not None:
            self.display_name = display_name
        if datasources is not None:
            self.datasources = datasources
        if weight is not None:
            self.weight = weight
        if icons is not None:
            self.icons = icons
        if shared is not None:
            self.shared = shared
        if footer is not None:
            self.footer = footer
        if drilldown_id is not None:
            self.drilldown_id = drilldown_id
        if is_drilldown is not None:
            self.is_drilldown = is_drilldown
        if legend is not None:
            self.legend = legend
        if navigation is not None:
            self.navigation = navigation
        if stat is not None:
            self.stat = stat
        if sections is not None:
            self.sections = sections
        if sub_type is not None:
            self.sub_type = sub_type
        if label is not None:
            self.label = label
        WidgetConfiguration.__init__(self, *args, **kwargs)

    @property
    def resource_type(self):
        """Gets the resource_type of this StatsConfiguration.  # noqa: E501

        Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration and ContainerConfiguration.  # noqa: E501

        :return: The resource_type of this StatsConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this StatsConfiguration.

        Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration and ContainerConfiguration.  # noqa: E501

        :param resource_type: The resource_type of this StatsConfiguration.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501
        allowed_values = ["LabelValueConfiguration", "DonutConfiguration", "MultiWidgetConfiguration", "ContainerConfiguration", "StatsConfiguration", "GridConfiguration", "GraphConfiguration"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def display_name(self):
        """Gets the display_name of this StatsConfiguration.  # noqa: E501

        Title of the widget. If display_name is omitted, the widget will be shown without a title.  # noqa: E501

        :return: The display_name of this StatsConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this StatsConfiguration.

        Title of the widget. If display_name is omitted, the widget will be shown without a title.  # noqa: E501

        :param display_name: The display_name of this StatsConfiguration.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def datasources(self):
        """Gets the datasources of this StatsConfiguration.  # noqa: E501

        The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.  # noqa: E501

        :return: The datasources of this StatsConfiguration.  # noqa: E501
        :rtype: list[Datasource]
        """
        return self._datasources

    @datasources.setter
    def datasources(self, datasources):
        """Sets the datasources of this StatsConfiguration.

        The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.  # noqa: E501

        :param datasources: The datasources of this StatsConfiguration.  # noqa: E501
        :type: list[Datasource]
        """

        self._datasources = datasources

    @property
    def weight(self):
        """Gets the weight of this StatsConfiguration.  # noqa: E501

        Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.  # noqa: E501

        :return: The weight of this StatsConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this StatsConfiguration.

        Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.  # noqa: E501

        :param weight: The weight of this StatsConfiguration.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def icons(self):
        """Gets the icons of this StatsConfiguration.  # noqa: E501

        Icons to be applied at dashboard for widgets and UI elements.  # noqa: E501

        :return: The icons of this StatsConfiguration.  # noqa: E501
        :rtype: list[Icon]
        """
        return self._icons

    @icons.setter
    def icons(self, icons):
        """Sets the icons of this StatsConfiguration.

        Icons to be applied at dashboard for widgets and UI elements.  # noqa: E501

        :param icons: The icons of this StatsConfiguration.  # noqa: E501
        :type: list[Icon]
        """

        self._icons = icons

    @property
    def shared(self):
        """Gets the shared of this StatsConfiguration.  # noqa: E501

        Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.  # noqa: E501

        :return: The shared of this StatsConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this StatsConfiguration.

        Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.  # noqa: E501

        :param shared: The shared of this StatsConfiguration.  # noqa: E501
        :type: bool
        """

        self._shared = shared

    @property
    def footer(self):
        """Gets the footer of this StatsConfiguration.  # noqa: E501


        :return: The footer of this StatsConfiguration.  # noqa: E501
        :rtype: Footer
        """
        return self._footer

    @footer.setter
    def footer(self, footer):
        """Sets the footer of this StatsConfiguration.


        :param footer: The footer of this StatsConfiguration.  # noqa: E501
        :type: Footer
        """

        self._footer = footer

    @property
    def drilldown_id(self):
        """Gets the drilldown_id of this StatsConfiguration.  # noqa: E501

        Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.  # noqa: E501

        :return: The drilldown_id of this StatsConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._drilldown_id

    @drilldown_id.setter
    def drilldown_id(self, drilldown_id):
        """Sets the drilldown_id of this StatsConfiguration.

        Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.  # noqa: E501

        :param drilldown_id: The drilldown_id of this StatsConfiguration.  # noqa: E501
        :type: str
        """

        self._drilldown_id = drilldown_id

    @property
    def is_drilldown(self):
        """Gets the is_drilldown of this StatsConfiguration.  # noqa: E501

        Set to true if this widget should be used as a drilldown.  # noqa: E501

        :return: The is_drilldown of this StatsConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_drilldown

    @is_drilldown.setter
    def is_drilldown(self, is_drilldown):
        """Sets the is_drilldown of this StatsConfiguration.

        Set to true if this widget should be used as a drilldown.  # noqa: E501

        :param is_drilldown: The is_drilldown of this StatsConfiguration.  # noqa: E501
        :type: bool
        """

        self._is_drilldown = is_drilldown

    @property
    def legend(self):
        """Gets the legend of this StatsConfiguration.  # noqa: E501


        :return: The legend of this StatsConfiguration.  # noqa: E501
        :rtype: Legend
        """
        return self._legend

    @legend.setter
    def legend(self, legend):
        """Sets the legend of this StatsConfiguration.


        :param legend: The legend of this StatsConfiguration.  # noqa: E501
        :type: Legend
        """

        self._legend = legend

    @property
    def navigation(self):
        """Gets the navigation of this StatsConfiguration.  # noqa: E501

        Hyperlink of the specified UI page that provides details.  # noqa: E501

        :return: The navigation of this StatsConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._navigation

    @navigation.setter
    def navigation(self, navigation):
        """Sets the navigation of this StatsConfiguration.

        Hyperlink of the specified UI page that provides details.  # noqa: E501

        :param navigation: The navigation of this StatsConfiguration.  # noqa: E501
        :type: str
        """

        self._navigation = navigation

    @property
    def stat(self):
        """Gets the stat of this StatsConfiguration.  # noqa: E501


        :return: The stat of this StatsConfiguration.  # noqa: E501
        :rtype: StatItem
        """
        return self._stat

    @stat.setter
    def stat(self, stat):
        """Sets the stat of this StatsConfiguration.


        :param stat: The stat of this StatsConfiguration.  # noqa: E501
        :type: StatItem
        """

        self._stat = stat

    @property
    def sections(self):
        """Gets the sections of this StatsConfiguration.  # noqa: E501

        Sections  # noqa: E501

        :return: The sections of this StatsConfiguration.  # noqa: E501
        :rtype: list[DonutSection]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this StatsConfiguration.

        Sections  # noqa: E501

        :param sections: The sections of this StatsConfiguration.  # noqa: E501
        :type: list[DonutSection]
        """

        self._sections = sections

    @property
    def sub_type(self):
        """Gets the sub_type of this StatsConfiguration.  # noqa: E501

        A sub-type of StatsConfiguration. If sub-type is not specified the parent type is rendered. The COMPACT sub_type, conserves the space for the widget. The statistic is placed on the right side on top of the status bar and the title of the widget is placed on the left side on the top of the status bar. The COMPACT style aligns itself horizontally as per the width of the container. If multiple widgets are placed insided the container then the widgets are placed one below the other to conserve the space.  # noqa: E501

        :return: The sub_type of this StatsConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this StatsConfiguration.

        A sub-type of StatsConfiguration. If sub-type is not specified the parent type is rendered. The COMPACT sub_type, conserves the space for the widget. The statistic is placed on the right side on top of the status bar and the title of the widget is placed on the left side on the top of the status bar. The COMPACT style aligns itself horizontally as per the width of the container. If multiple widgets are placed insided the container then the widgets are placed one below the other to conserve the space.  # noqa: E501

        :param sub_type: The sub_type of this StatsConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["COMPACT"]  # noqa: E501
        if sub_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_type` ({0}), must be one of {1}"  # noqa: E501
                .format(sub_type, allowed_values)
            )

        self._sub_type = sub_type

    @property
    def label(self):
        """Gets the label of this StatsConfiguration.  # noqa: E501


        :return: The label of this StatsConfiguration.  # noqa: E501
        :rtype: Label
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this StatsConfiguration.


        :param label: The label of this StatsConfiguration.  # noqa: E501
        :type: Label
        """

        self._label = label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StatsConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StatsConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
