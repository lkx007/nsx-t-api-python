# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AppDiscoveryVmInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_self': 'SelfResourceLink',
        'links': 'list[ResourceLink]',
        'schema': 'str',
        'vm_name': 'str',
        'os_type': 'str',
        'vm_external_id': 'str',
        'os_properties': 'list[str]'
    }
    if hasattr(Resource, "swagger_types"):
        swagger_types.update(Resource.swagger_types)

    attribute_map = {
        '_self': '_self',
        'links': '_links',
        'schema': '_schema',
        'vm_name': 'vm_name',
        'os_type': 'os_type',
        'vm_external_id': 'vm_external_id',
        'os_properties': 'os_properties'
    }
    if hasattr(Resource, "attribute_map"):
        attribute_map.update(Resource.attribute_map)

    def __init__(self, _self=None, links=None, schema=None, vm_name=None, os_type=None, vm_external_id=None, os_properties=None, *args, **kwargs):  # noqa: E501
        """AppDiscoveryVmInfo - a model defined in Swagger"""  # noqa: E501
        self.__self = None
        self._links = None
        self._schema = None
        self._vm_name = None
        self._os_type = None
        self._vm_external_id = None
        self._os_properties = None
        self.discriminator = None
        if _self is not None:
            self._self = _self
        if links is not None:
            self.links = links
        if schema is not None:
            self.schema = schema
        if vm_name is not None:
            self.vm_name = vm_name
        if os_type is not None:
            self.os_type = os_type
        if vm_external_id is not None:
            self.vm_external_id = vm_external_id
        if os_properties is not None:
            self.os_properties = os_properties
        Resource.__init__(self, *args, **kwargs)

    @property
    def _self(self):
        """Gets the _self of this AppDiscoveryVmInfo.  # noqa: E501


        :return: The _self of this AppDiscoveryVmInfo.  # noqa: E501
        :rtype: SelfResourceLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this AppDiscoveryVmInfo.


        :param _self: The _self of this AppDiscoveryVmInfo.  # noqa: E501
        :type: SelfResourceLink
        """

        self.__self = _self

    @property
    def links(self):
        """Gets the links of this AppDiscoveryVmInfo.  # noqa: E501

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :return: The links of this AppDiscoveryVmInfo.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AppDiscoveryVmInfo.

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :param links: The links of this AppDiscoveryVmInfo.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    @property
    def schema(self):
        """Gets the schema of this AppDiscoveryVmInfo.  # noqa: E501

        Schema for this resource  # noqa: E501

        :return: The schema of this AppDiscoveryVmInfo.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this AppDiscoveryVmInfo.

        Schema for this resource  # noqa: E501

        :param schema: The schema of this AppDiscoveryVmInfo.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def vm_name(self):
        """Gets the vm_name of this AppDiscoveryVmInfo.  # noqa: E501

        Name of the VM  # noqa: E501

        :return: The vm_name of this AppDiscoveryVmInfo.  # noqa: E501
        :rtype: str
        """
        return self._vm_name

    @vm_name.setter
    def vm_name(self, vm_name):
        """Sets the vm_name of this AppDiscoveryVmInfo.

        Name of the VM  # noqa: E501

        :param vm_name: The vm_name of this AppDiscoveryVmInfo.  # noqa: E501
        :type: str
        """

        self._vm_name = vm_name

    @property
    def os_type(self):
        """Gets the os_type of this AppDiscoveryVmInfo.  # noqa: E501

        OS type of the VM  # noqa: E501

        :return: The os_type of this AppDiscoveryVmInfo.  # noqa: E501
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this AppDiscoveryVmInfo.

        OS type of the VM  # noqa: E501

        :param os_type: The os_type of this AppDiscoveryVmInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVALID", "WINDOWS", "LINUX"]  # noqa: E501
        if os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"  # noqa: E501
                .format(os_type, allowed_values)
            )

        self._os_type = os_type

    @property
    def vm_external_id(self):
        """Gets the vm_external_id of this AppDiscoveryVmInfo.  # noqa: E501

        External Id of the VM  # noqa: E501

        :return: The vm_external_id of this AppDiscoveryVmInfo.  # noqa: E501
        :rtype: str
        """
        return self._vm_external_id

    @vm_external_id.setter
    def vm_external_id(self, vm_external_id):
        """Sets the vm_external_id of this AppDiscoveryVmInfo.

        External Id of the VM  # noqa: E501

        :param vm_external_id: The vm_external_id of this AppDiscoveryVmInfo.  # noqa: E501
        :type: str
        """

        self._vm_external_id = vm_external_id

    @property
    def os_properties(self):
        """Gets the os_properties of this AppDiscoveryVmInfo.  # noqa: E501

        OS properties of the VM  # noqa: E501

        :return: The os_properties of this AppDiscoveryVmInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._os_properties

    @os_properties.setter
    def os_properties(self, os_properties):
        """Sets the os_properties of this AppDiscoveryVmInfo.

        OS properties of the VM  # noqa: E501

        :param os_properties: The os_properties of this AppDiscoveryVmInfo.  # noqa: E501
        :type: list[str]
        """

        self._os_properties = os_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppDiscoveryVmInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppDiscoveryVmInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
