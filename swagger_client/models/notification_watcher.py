# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class NotificationWatcher(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system_owned': 'bool',
        'display_name': 'str',
        'description': 'str',
        'tags': 'list[Tag]',
        'create_user': 'str',
        'protection': 'str',
        'create_time': 'int',
        'last_modified_time': 'int',
        'last_modified_user': 'str',
        'id': 'str',
        'resource_type': 'str',
        'send_timeout': 'int',
        'uri': 'str',
        'certificate_sha256_thumbprint': 'str',
        'method': 'str',
        'send_interval': 'int',
        'max_send_uri_count': 'int',
        'authentication_scheme': 'NotificationAuthenticationScheme',
        'server': 'str',
        'port': 'int',
        'use_https': 'bool'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'system_owned': '_system_owned',
        'display_name': 'display_name',
        'description': 'description',
        'tags': 'tags',
        'create_user': '_create_user',
        'protection': '_protection',
        'create_time': '_create_time',
        'last_modified_time': '_last_modified_time',
        'last_modified_user': '_last_modified_user',
        'id': 'id',
        'resource_type': 'resource_type',
        'send_timeout': 'send_timeout',
        'uri': 'uri',
        'certificate_sha256_thumbprint': 'certificate_sha256_thumbprint',
        'method': 'method',
        'send_interval': 'send_interval',
        'max_send_uri_count': 'max_send_uri_count',
        'authentication_scheme': 'authentication_scheme',
        'server': 'server',
        'port': 'port',
        'use_https': 'use_https'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, system_owned=None, display_name=None, description=None, tags=None, create_user=None, protection=None, create_time=None, last_modified_time=None, last_modified_user=None, id=None, resource_type=None, send_timeout=30, uri=None, certificate_sha256_thumbprint=None, method=None, send_interval=None, max_send_uri_count=5000, authentication_scheme=None, server=None, port=None, use_https=False, *args, **kwargs):  # noqa: E501
        """NotificationWatcher - a model defined in Swagger"""  # noqa: E501
        self._system_owned = None
        self._display_name = None
        self._description = None
        self._tags = None
        self._create_user = None
        self._protection = None
        self._create_time = None
        self._last_modified_time = None
        self._last_modified_user = None
        self._id = None
        self._resource_type = None
        self._send_timeout = None
        self._uri = None
        self._certificate_sha256_thumbprint = None
        self._method = None
        self._send_interval = None
        self._max_send_uri_count = None
        self._authentication_scheme = None
        self._server = None
        self._port = None
        self._use_https = None
        self.discriminator = None
        if system_owned is not None:
            self.system_owned = system_owned
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if create_user is not None:
            self.create_user = create_user
        if protection is not None:
            self.protection = protection
        if create_time is not None:
            self.create_time = create_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if last_modified_user is not None:
            self.last_modified_user = last_modified_user
        if id is not None:
            self.id = id
        if resource_type is not None:
            self.resource_type = resource_type
        if send_timeout is not None:
            self.send_timeout = send_timeout
        self.uri = uri
        if certificate_sha256_thumbprint is not None:
            self.certificate_sha256_thumbprint = certificate_sha256_thumbprint
        self.method = method
        if send_interval is not None:
            self.send_interval = send_interval
        if max_send_uri_count is not None:
            self.max_send_uri_count = max_send_uri_count
        self.authentication_scheme = authentication_scheme
        self.server = server
        if port is not None:
            self.port = port
        if use_https is not None:
            self.use_https = use_https
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def system_owned(self):
        """Gets the system_owned of this NotificationWatcher.  # noqa: E501

        Indicates system owned resource  # noqa: E501

        :return: The system_owned of this NotificationWatcher.  # noqa: E501
        :rtype: bool
        """
        return self._system_owned

    @system_owned.setter
    def system_owned(self, system_owned):
        """Sets the system_owned of this NotificationWatcher.

        Indicates system owned resource  # noqa: E501

        :param system_owned: The system_owned of this NotificationWatcher.  # noqa: E501
        :type: bool
        """

        self._system_owned = system_owned

    @property
    def display_name(self):
        """Gets the display_name of this NotificationWatcher.  # noqa: E501

        Defaults to ID if not set  # noqa: E501

        :return: The display_name of this NotificationWatcher.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this NotificationWatcher.

        Defaults to ID if not set  # noqa: E501

        :param display_name: The display_name of this NotificationWatcher.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this NotificationWatcher.  # noqa: E501

        Optional description that can be associated with this NotificationWatcher.  # noqa: E501

        :return: The description of this NotificationWatcher.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NotificationWatcher.

        Optional description that can be associated with this NotificationWatcher.  # noqa: E501

        :param description: The description of this NotificationWatcher.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this NotificationWatcher.  # noqa: E501

        Opaque identifiers meaningful to the API user  # noqa: E501

        :return: The tags of this NotificationWatcher.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this NotificationWatcher.

        Opaque identifiers meaningful to the API user  # noqa: E501

        :param tags: The tags of this NotificationWatcher.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def create_user(self):
        """Gets the create_user of this NotificationWatcher.  # noqa: E501

        ID of the user who created this resource  # noqa: E501

        :return: The create_user of this NotificationWatcher.  # noqa: E501
        :rtype: str
        """
        return self._create_user

    @create_user.setter
    def create_user(self, create_user):
        """Sets the create_user of this NotificationWatcher.

        ID of the user who created this resource  # noqa: E501

        :param create_user: The create_user of this NotificationWatcher.  # noqa: E501
        :type: str
        """

        self._create_user = create_user

    @property
    def protection(self):
        """Gets the protection of this NotificationWatcher.  # noqa: E501

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :return: The protection of this NotificationWatcher.  # noqa: E501
        :rtype: str
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this NotificationWatcher.

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :param protection: The protection of this NotificationWatcher.  # noqa: E501
        :type: str
        """

        self._protection = protection

    @property
    def create_time(self):
        """Gets the create_time of this NotificationWatcher.  # noqa: E501

        Timestamp of resource creation  # noqa: E501

        :return: The create_time of this NotificationWatcher.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this NotificationWatcher.

        Timestamp of resource creation  # noqa: E501

        :param create_time: The create_time of this NotificationWatcher.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this NotificationWatcher.  # noqa: E501

        Timestamp of last modification  # noqa: E501

        :return: The last_modified_time of this NotificationWatcher.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this NotificationWatcher.

        Timestamp of last modification  # noqa: E501

        :param last_modified_time: The last_modified_time of this NotificationWatcher.  # noqa: E501
        :type: int
        """

        self._last_modified_time = last_modified_time

    @property
    def last_modified_user(self):
        """Gets the last_modified_user of this NotificationWatcher.  # noqa: E501

        ID of the user who last modified this resource  # noqa: E501

        :return: The last_modified_user of this NotificationWatcher.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_user

    @last_modified_user.setter
    def last_modified_user(self, last_modified_user):
        """Sets the last_modified_user of this NotificationWatcher.

        ID of the user who last modified this resource  # noqa: E501

        :param last_modified_user: The last_modified_user of this NotificationWatcher.  # noqa: E501
        :type: str
        """

        self._last_modified_user = last_modified_user

    @property
    def id(self):
        """Gets the id of this NotificationWatcher.  # noqa: E501

        System generated identifier to identify a notification watcher uniquely.   # noqa: E501

        :return: The id of this NotificationWatcher.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationWatcher.

        System generated identifier to identify a notification watcher uniquely.   # noqa: E501

        :param id: The id of this NotificationWatcher.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resource_type(self):
        """Gets the resource_type of this NotificationWatcher.  # noqa: E501

        The type of this resource.  # noqa: E501

        :return: The resource_type of this NotificationWatcher.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this NotificationWatcher.

        The type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this NotificationWatcher.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def send_timeout(self):
        """Gets the send_timeout of this NotificationWatcher.  # noqa: E501

        Optional time duration (in seconds) to specify request timeout to notification watcher. If the send reaches the timeout, will try to send refresh_needed as true in the next time interval. The default value is 30 seconds.  # noqa: E501

        :return: The send_timeout of this NotificationWatcher.  # noqa: E501
        :rtype: int
        """
        return self._send_timeout

    @send_timeout.setter
    def send_timeout(self, send_timeout):
        """Sets the send_timeout of this NotificationWatcher.

        Optional time duration (in seconds) to specify request timeout to notification watcher. If the send reaches the timeout, will try to send refresh_needed as true in the next time interval. The default value is 30 seconds.  # noqa: E501

        :param send_timeout: The send_timeout of this NotificationWatcher.  # noqa: E501
        :type: int
        """

        self._send_timeout = send_timeout

    @property
    def uri(self):
        """Gets the uri of this NotificationWatcher.  # noqa: E501

        URI notification requests should be made on the specified server.  # noqa: E501

        :return: The uri of this NotificationWatcher.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this NotificationWatcher.

        URI notification requests should be made on the specified server.  # noqa: E501

        :param uri: The uri of this NotificationWatcher.  # noqa: E501
        :type: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def certificate_sha256_thumbprint(self):
        """Gets the certificate_sha256_thumbprint of this NotificationWatcher.  # noqa: E501

        Contains the hex-encoded SHA256 thumbprint of the HTTPS certificate. It must be specified if use_https is set to true.  # noqa: E501

        :return: The certificate_sha256_thumbprint of this NotificationWatcher.  # noqa: E501
        :rtype: str
        """
        return self._certificate_sha256_thumbprint

    @certificate_sha256_thumbprint.setter
    def certificate_sha256_thumbprint(self, certificate_sha256_thumbprint):
        """Sets the certificate_sha256_thumbprint of this NotificationWatcher.

        Contains the hex-encoded SHA256 thumbprint of the HTTPS certificate. It must be specified if use_https is set to true.  # noqa: E501

        :param certificate_sha256_thumbprint: The certificate_sha256_thumbprint of this NotificationWatcher.  # noqa: E501
        :type: str
        """

        self._certificate_sha256_thumbprint = certificate_sha256_thumbprint

    @property
    def method(self):
        """Gets the method of this NotificationWatcher.  # noqa: E501

        Type of method notification requests should be made on the specified server. The value must be set to POST.  # noqa: E501

        :return: The method of this NotificationWatcher.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this NotificationWatcher.

        Type of method notification requests should be made on the specified server. The value must be set to POST.  # noqa: E501

        :param method: The method of this NotificationWatcher.  # noqa: E501
        :type: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501
        allowed_values = ["POST"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def send_interval(self):
        """Gets the send_interval of this NotificationWatcher.  # noqa: E501

        Optional time interval (in seconds) for which notification URIs will be accumulated. At the end of the time interval the accumulated notification URIs will be sent to this NotificationWatcher in the form of zero (nothing accumulated) or more notification requests as soon as possible. If it is not specified, the NotificationWatcher should expected to receive notifications at any time.  # noqa: E501

        :return: The send_interval of this NotificationWatcher.  # noqa: E501
        :rtype: int
        """
        return self._send_interval

    @send_interval.setter
    def send_interval(self, send_interval):
        """Sets the send_interval of this NotificationWatcher.

        Optional time interval (in seconds) for which notification URIs will be accumulated. At the end of the time interval the accumulated notification URIs will be sent to this NotificationWatcher in the form of zero (nothing accumulated) or more notification requests as soon as possible. If it is not specified, the NotificationWatcher should expected to receive notifications at any time.  # noqa: E501

        :param send_interval: The send_interval of this NotificationWatcher.  # noqa: E501
        :type: int
        """

        self._send_interval = send_interval

    @property
    def max_send_uri_count(self):
        """Gets the max_send_uri_count of this NotificationWatcher.  # noqa: E501

        If the number of notification URIs accumulated in specified send_interval exceeds max_send_uri_count, then multiple notification requests (each with max_send_uri_count or less number of notification URIs) will be sent to this NotificationWatcher. The default value is 5000.  # noqa: E501

        :return: The max_send_uri_count of this NotificationWatcher.  # noqa: E501
        :rtype: int
        """
        return self._max_send_uri_count

    @max_send_uri_count.setter
    def max_send_uri_count(self, max_send_uri_count):
        """Sets the max_send_uri_count of this NotificationWatcher.

        If the number of notification URIs accumulated in specified send_interval exceeds max_send_uri_count, then multiple notification requests (each with max_send_uri_count or less number of notification URIs) will be sent to this NotificationWatcher. The default value is 5000.  # noqa: E501

        :param max_send_uri_count: The max_send_uri_count of this NotificationWatcher.  # noqa: E501
        :type: int
        """

        self._max_send_uri_count = max_send_uri_count

    @property
    def authentication_scheme(self):
        """Gets the authentication_scheme of this NotificationWatcher.  # noqa: E501


        :return: The authentication_scheme of this NotificationWatcher.  # noqa: E501
        :rtype: NotificationAuthenticationScheme
        """
        return self._authentication_scheme

    @authentication_scheme.setter
    def authentication_scheme(self, authentication_scheme):
        """Sets the authentication_scheme of this NotificationWatcher.


        :param authentication_scheme: The authentication_scheme of this NotificationWatcher.  # noqa: E501
        :type: NotificationAuthenticationScheme
        """
        if authentication_scheme is None:
            raise ValueError("Invalid value for `authentication_scheme`, must not be `None`")  # noqa: E501

        self._authentication_scheme = authentication_scheme

    @property
    def server(self):
        """Gets the server of this NotificationWatcher.  # noqa: E501

        IP address or fully qualified domain name of the partner/customer watcher.  # noqa: E501

        :return: The server of this NotificationWatcher.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this NotificationWatcher.

        IP address or fully qualified domain name of the partner/customer watcher.  # noqa: E501

        :param server: The server of this NotificationWatcher.  # noqa: E501
        :type: str
        """
        if server is None:
            raise ValueError("Invalid value for `server`, must not be `None`")  # noqa: E501

        self._server = server

    @property
    def port(self):
        """Gets the port of this NotificationWatcher.  # noqa: E501

        Optional integer port value to specify a non-standard HTTP or HTTPS port.  # noqa: E501

        :return: The port of this NotificationWatcher.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this NotificationWatcher.

        Optional integer port value to specify a non-standard HTTP or HTTPS port.  # noqa: E501

        :param port: The port of this NotificationWatcher.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def use_https(self):
        """Gets the use_https of this NotificationWatcher.  # noqa: E501

        Optional field, when set to true indicates REST API server should use HTTPS.  # noqa: E501

        :return: The use_https of this NotificationWatcher.  # noqa: E501
        :rtype: bool
        """
        return self._use_https

    @use_https.setter
    def use_https(self, use_https):
        """Sets the use_https of this NotificationWatcher.

        Optional field, when set to true indicates REST API server should use HTTPS.  # noqa: E501

        :param use_https: The use_https of this NotificationWatcher.  # noqa: E501
        :type: bool
        """

        self._use_https = use_https

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationWatcher, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationWatcher):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
