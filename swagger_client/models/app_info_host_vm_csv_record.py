# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AppInfoHostVmCsvRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_vms': 'str',
        'version': 'str',
        'display_name': 'str',
        'os_type': 'str',
        'id': 'str',
        'manufacturer': 'str'
    }
    if hasattr(CsvRecord, "swagger_types"):
        swagger_types.update(CsvRecord.swagger_types)

    attribute_map = {
        'host_vms': 'host_vms',
        'version': 'version',
        'display_name': 'display_name',
        'os_type': 'os_type',
        'id': 'id',
        'manufacturer': 'manufacturer'
    }
    if hasattr(CsvRecord, "attribute_map"):
        attribute_map.update(CsvRecord.attribute_map)

    def __init__(self, host_vms=None, version=None, display_name=None, os_type=None, id=None, manufacturer=None, *args, **kwargs):  # noqa: E501
        """AppInfoHostVmCsvRecord - a model defined in Swagger"""  # noqa: E501
        self._host_vms = None
        self._version = None
        self._display_name = None
        self._os_type = None
        self._id = None
        self._manufacturer = None
        self.discriminator = None
        if host_vms is not None:
            self.host_vms = host_vms
        if version is not None:
            self.version = version
        if display_name is not None:
            self.display_name = display_name
        if os_type is not None:
            self.os_type = os_type
        if id is not None:
            self.id = id
        if manufacturer is not None:
            self.manufacturer = manufacturer
        CsvRecord.__init__(self, *args, **kwargs)

    @property
    def host_vms(self):
        """Gets the host_vms of this AppInfoHostVmCsvRecord.  # noqa: E501

        vm ids that this application belongs to  # noqa: E501

        :return: The host_vms of this AppInfoHostVmCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._host_vms

    @host_vms.setter
    def host_vms(self, host_vms):
        """Sets the host_vms of this AppInfoHostVmCsvRecord.

        vm ids that this application belongs to  # noqa: E501

        :param host_vms: The host_vms of this AppInfoHostVmCsvRecord.  # noqa: E501
        :type: str
        """

        self._host_vms = host_vms

    @property
    def version(self):
        """Gets the version of this AppInfoHostVmCsvRecord.  # noqa: E501

        Version of the app  # noqa: E501

        :return: The version of this AppInfoHostVmCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AppInfoHostVmCsvRecord.

        Version of the app  # noqa: E501

        :param version: The version of this AppInfoHostVmCsvRecord.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def display_name(self):
        """Gets the display_name of this AppInfoHostVmCsvRecord.  # noqa: E501

        Name of the app  # noqa: E501

        :return: The display_name of this AppInfoHostVmCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AppInfoHostVmCsvRecord.

        Name of the app  # noqa: E501

        :param display_name: The display_name of this AppInfoHostVmCsvRecord.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def os_type(self):
        """Gets the os_type of this AppInfoHostVmCsvRecord.  # noqa: E501

        OS type of the VM  # noqa: E501

        :return: The os_type of this AppInfoHostVmCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type):
        """Sets the os_type of this AppInfoHostVmCsvRecord.

        OS type of the VM  # noqa: E501

        :param os_type: The os_type of this AppInfoHostVmCsvRecord.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVALID", "WINDOWS", "LINUX"]  # noqa: E501
        if os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `os_type` ({0}), must be one of {1}"  # noqa: E501
                .format(os_type, allowed_values)
            )

        self._os_type = os_type

    @property
    def id(self):
        """Gets the id of this AppInfoHostVmCsvRecord.  # noqa: E501

        Id of the app  # noqa: E501

        :return: The id of this AppInfoHostVmCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppInfoHostVmCsvRecord.

        Id of the app  # noqa: E501

        :param id: The id of this AppInfoHostVmCsvRecord.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def manufacturer(self):
        """Gets the manufacturer of this AppInfoHostVmCsvRecord.  # noqa: E501

        Manufacturer of the app  # noqa: E501

        :return: The manufacturer of this AppInfoHostVmCsvRecord.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this AppInfoHostVmCsvRecord.

        Manufacturer of the app  # noqa: E501

        :param manufacturer: The manufacturer of this AppInfoHostVmCsvRecord.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppInfoHostVmCsvRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppInfoHostVmCsvRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
