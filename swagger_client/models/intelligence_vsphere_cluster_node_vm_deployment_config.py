# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class IntelligenceVsphereClusterNodeVMDeploymentConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'placement_type': 'str',
        'ovf_url': 'str',
        'dns_servers': 'list[str]',
        'display_name': 'str',
        'ntp_servers': 'list[str]',
        'hostname': 'str',
        'enable_ssh': 'bool',
        'allow_ssh_root_login': 'bool',
        'compute_id': 'str',
        'vc_id': 'str',
        'storage_id': 'str',
        'default_gateway_addresses': 'list[str]',
        'management_port_subnets': 'list[IPSubnet]',
        'host_id': 'str',
        'management_network_id': 'str'
    }
    if hasattr(IntelligenceClusterNodeVMDeploymentConfig, "swagger_types"):
        swagger_types.update(IntelligenceClusterNodeVMDeploymentConfig.swagger_types)

    attribute_map = {
        'placement_type': 'placement_type',
        'ovf_url': 'ovf_url',
        'dns_servers': 'dns_servers',
        'display_name': 'display_name',
        'ntp_servers': 'ntp_servers',
        'hostname': 'hostname',
        'enable_ssh': 'enable_ssh',
        'allow_ssh_root_login': 'allow_ssh_root_login',
        'compute_id': 'compute_id',
        'vc_id': 'vc_id',
        'storage_id': 'storage_id',
        'default_gateway_addresses': 'default_gateway_addresses',
        'management_port_subnets': 'management_port_subnets',
        'host_id': 'host_id',
        'management_network_id': 'management_network_id'
    }
    if hasattr(IntelligenceClusterNodeVMDeploymentConfig, "attribute_map"):
        attribute_map.update(IntelligenceClusterNodeVMDeploymentConfig.attribute_map)

    def __init__(self, placement_type=None, ovf_url=None, dns_servers=None, display_name=None, ntp_servers=None, hostname=None, enable_ssh=False, allow_ssh_root_login=False, compute_id=None, vc_id=None, storage_id=None, default_gateway_addresses=None, management_port_subnets=None, host_id=None, management_network_id=None, *args, **kwargs):  # noqa: E501
        """IntelligenceVsphereClusterNodeVMDeploymentConfig - a model defined in Swagger"""  # noqa: E501
        self._placement_type = None
        self._ovf_url = None
        self._dns_servers = None
        self._display_name = None
        self._ntp_servers = None
        self._hostname = None
        self._enable_ssh = None
        self._allow_ssh_root_login = None
        self._compute_id = None
        self._vc_id = None
        self._storage_id = None
        self._default_gateway_addresses = None
        self._management_port_subnets = None
        self._host_id = None
        self._management_network_id = None
        self.discriminator = None
        self.placement_type = placement_type
        self.ovf_url = ovf_url
        if dns_servers is not None:
            self.dns_servers = dns_servers
        if display_name is not None:
            self.display_name = display_name
        if ntp_servers is not None:
            self.ntp_servers = ntp_servers
        self.hostname = hostname
        if enable_ssh is not None:
            self.enable_ssh = enable_ssh
        if allow_ssh_root_login is not None:
            self.allow_ssh_root_login = allow_ssh_root_login
        self.compute_id = compute_id
        self.vc_id = vc_id
        self.storage_id = storage_id
        if default_gateway_addresses is not None:
            self.default_gateway_addresses = default_gateway_addresses
        if management_port_subnets is not None:
            self.management_port_subnets = management_port_subnets
        if host_id is not None:
            self.host_id = host_id
        self.management_network_id = management_network_id
        IntelligenceClusterNodeVMDeploymentConfig.__init__(self, *args, **kwargs)

    @property
    def placement_type(self):
        """Gets the placement_type of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501

        Specifies the config for the platform through which to deploy the VM   # noqa: E501

        :return: The placement_type of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._placement_type

    @placement_type.setter
    def placement_type(self, placement_type):
        """Sets the placement_type of this IntelligenceVsphereClusterNodeVMDeploymentConfig.

        Specifies the config for the platform through which to deploy the VM   # noqa: E501

        :param placement_type: The placement_type of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :type: str
        """
        if placement_type is None:
            raise ValueError("Invalid value for `placement_type`, must not be `None`")  # noqa: E501
        allowed_values = ["IntelligenceVsphereClusterNodeVMDeploymentConfig"]  # noqa: E501
        if placement_type not in allowed_values:
            raise ValueError(
                "Invalid value for `placement_type` ({0}), must be one of {1}"  # noqa: E501
                .format(placement_type, allowed_values)
            )

        self._placement_type = placement_type

    @property
    def ovf_url(self):
        """Gets the ovf_url of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501

        The NSX-Intelligence cluster node VM OVF URL to download and install the OVF file.   # noqa: E501

        :return: The ovf_url of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._ovf_url

    @ovf_url.setter
    def ovf_url(self, ovf_url):
        """Sets the ovf_url of this IntelligenceVsphereClusterNodeVMDeploymentConfig.

        The NSX-Intelligence cluster node VM OVF URL to download and install the OVF file.   # noqa: E501

        :param ovf_url: The ovf_url of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :type: str
        """
        if ovf_url is None:
            raise ValueError("Invalid value for `ovf_url`, must not be `None`")  # noqa: E501

        self._ovf_url = ovf_url

    @property
    def dns_servers(self):
        """Gets the dns_servers of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501

        List of DNS servers. If DHCP is used, the default DNS servers associated with the DHCP server will be used instead. Required if using static IP.   # noqa: E501

        :return: The dns_servers of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers):
        """Sets the dns_servers of this IntelligenceVsphereClusterNodeVMDeploymentConfig.

        List of DNS servers. If DHCP is used, the default DNS servers associated with the DHCP server will be used instead. Required if using static IP.   # noqa: E501

        :param dns_servers: The dns_servers of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :type: list[str]
        """

        self._dns_servers = dns_servers

    @property
    def display_name(self):
        """Gets the display_name of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501

        Desired display name for NSX-Intelligence VM to be deployed   # noqa: E501

        :return: The display_name of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this IntelligenceVsphereClusterNodeVMDeploymentConfig.

        Desired display name for NSX-Intelligence VM to be deployed   # noqa: E501

        :param display_name: The display_name of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def ntp_servers(self):
        """Gets the ntp_servers of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501

        List of NTP servers. To use hostnames, a DNS server must be defined. If not using DHCP, a DNS server should be specified under dns_servers.   # noqa: E501

        :return: The ntp_servers of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._ntp_servers

    @ntp_servers.setter
    def ntp_servers(self, ntp_servers):
        """Sets the ntp_servers of this IntelligenceVsphereClusterNodeVMDeploymentConfig.

        List of NTP servers. To use hostnames, a DNS server must be defined. If not using DHCP, a DNS server should be specified under dns_servers.   # noqa: E501

        :param ntp_servers: The ntp_servers of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :type: list[str]
        """

        self._ntp_servers = ntp_servers

    @property
    def hostname(self):
        """Gets the hostname of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501

        Desired host name/FQDN for the VM to be deployed   # noqa: E501

        :return: The hostname of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this IntelligenceVsphereClusterNodeVMDeploymentConfig.

        Desired host name/FQDN for the VM to be deployed   # noqa: E501

        :param hostname: The hostname of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :type: str
        """
        if hostname is None:
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def enable_ssh(self):
        """Gets the enable_ssh of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501

        If true, the SSH service will automatically be started on the VM. Enabling SSH service is not recommended for security reasons.   # noqa: E501

        :return: The enable_ssh of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :rtype: bool
        """
        return self._enable_ssh

    @enable_ssh.setter
    def enable_ssh(self, enable_ssh):
        """Sets the enable_ssh of this IntelligenceVsphereClusterNodeVMDeploymentConfig.

        If true, the SSH service will automatically be started on the VM. Enabling SSH service is not recommended for security reasons.   # noqa: E501

        :param enable_ssh: The enable_ssh of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :type: bool
        """

        self._enable_ssh = enable_ssh

    @property
    def allow_ssh_root_login(self):
        """Gets the allow_ssh_root_login of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501

        If true, the root user will be allowed to log into the VM. Allowing root SSH logins is not recommended for security reasons.   # noqa: E501

        :return: The allow_ssh_root_login of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :rtype: bool
        """
        return self._allow_ssh_root_login

    @allow_ssh_root_login.setter
    def allow_ssh_root_login(self, allow_ssh_root_login):
        """Sets the allow_ssh_root_login of this IntelligenceVsphereClusterNodeVMDeploymentConfig.

        If true, the root user will be allowed to log into the VM. Allowing root SSH logins is not recommended for security reasons.   # noqa: E501

        :param allow_ssh_root_login: The allow_ssh_root_login of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :type: bool
        """

        self._allow_ssh_root_login = allow_ssh_root_login

    @property
    def compute_id(self):
        """Gets the compute_id of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501

        The NSX-Intelligence cluster node VM will be deployed on the specified cluster or resourcepool for specified VC server.   # noqa: E501

        :return: The compute_id of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._compute_id

    @compute_id.setter
    def compute_id(self, compute_id):
        """Sets the compute_id of this IntelligenceVsphereClusterNodeVMDeploymentConfig.

        The NSX-Intelligence cluster node VM will be deployed on the specified cluster or resourcepool for specified VC server.   # noqa: E501

        :param compute_id: The compute_id of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :type: str
        """
        if compute_id is None:
            raise ValueError("Invalid value for `compute_id`, must not be `None`")  # noqa: E501

        self._compute_id = compute_id

    @property
    def vc_id(self):
        """Gets the vc_id of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501

        The VC-specific identifiers will be resolved on this VC, so all other identifiers specified in the config must belong to this vCenter server.   # noqa: E501

        :return: The vc_id of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._vc_id

    @vc_id.setter
    def vc_id(self, vc_id):
        """Sets the vc_id of this IntelligenceVsphereClusterNodeVMDeploymentConfig.

        The VC-specific identifiers will be resolved on this VC, so all other identifiers specified in the config must belong to this vCenter server.   # noqa: E501

        :param vc_id: The vc_id of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :type: str
        """
        if vc_id is None:
            raise ValueError("Invalid value for `vc_id`, must not be `None`")  # noqa: E501

        self._vc_id = vc_id

    @property
    def storage_id(self):
        """Gets the storage_id of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501

        The NSX-Intelligence cluster node VM will be deployed on the specified datastore in the specified VC server. User must ensure that storage is accessible by the specified cluster/host.   # noqa: E501

        :return: The storage_id of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._storage_id

    @storage_id.setter
    def storage_id(self, storage_id):
        """Sets the storage_id of this IntelligenceVsphereClusterNodeVMDeploymentConfig.

        The NSX-Intelligence cluster node VM will be deployed on the specified datastore in the specified VC server. User must ensure that storage is accessible by the specified cluster/host.   # noqa: E501

        :param storage_id: The storage_id of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :type: str
        """
        if storage_id is None:
            raise ValueError("Invalid value for `storage_id`, must not be `None`")  # noqa: E501

        self._storage_id = storage_id

    @property
    def default_gateway_addresses(self):
        """Gets the default_gateway_addresses of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501

        The default gateway for the VM to be deployed must be specified if all the other VMs it communicates with are not in the same subnet. Do not specify this field and management_port_subnets to use DHCP. Note: only single IPv4 default gateway address is supported and it must belong to management network. IMPORTANT: VMs deployed using DHCP are currently not supported, so this parameter should be specified.   # noqa: E501

        :return: The default_gateway_addresses of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._default_gateway_addresses

    @default_gateway_addresses.setter
    def default_gateway_addresses(self, default_gateway_addresses):
        """Sets the default_gateway_addresses of this IntelligenceVsphereClusterNodeVMDeploymentConfig.

        The default gateway for the VM to be deployed must be specified if all the other VMs it communicates with are not in the same subnet. Do not specify this field and management_port_subnets to use DHCP. Note: only single IPv4 default gateway address is supported and it must belong to management network. IMPORTANT: VMs deployed using DHCP are currently not supported, so this parameter should be specified.   # noqa: E501

        :param default_gateway_addresses: The default_gateway_addresses of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :type: list[str]
        """

        self._default_gateway_addresses = default_gateway_addresses

    @property
    def management_port_subnets(self):
        """Gets the management_port_subnets of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501

        IP Address and subnet configuration for the management port. Do not specify this field and default_gateway_addresses to use DHCP. Note: only one IPv4 address is supported for the management port. IMPORTANT: VMs deployed using DHCP are currently not supported, so this parameter should be specified.   # noqa: E501

        :return: The management_port_subnets of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :rtype: list[IPSubnet]
        """
        return self._management_port_subnets

    @management_port_subnets.setter
    def management_port_subnets(self, management_port_subnets):
        """Sets the management_port_subnets of this IntelligenceVsphereClusterNodeVMDeploymentConfig.

        IP Address and subnet configuration for the management port. Do not specify this field and default_gateway_addresses to use DHCP. Note: only one IPv4 address is supported for the management port. IMPORTANT: VMs deployed using DHCP are currently not supported, so this parameter should be specified.   # noqa: E501

        :param management_port_subnets: The management_port_subnets of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :type: list[IPSubnet]
        """

        self._management_port_subnets = management_port_subnets

    @property
    def host_id(self):
        """Gets the host_id of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501

        The NSX-Intelligence cluster node VM will be deployed on the specified host in the specified VC server within the cluster if host_id is specified. Note: User must ensure that storage and specified networks are accessible by this host.   # noqa: E501

        :return: The host_id of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this IntelligenceVsphereClusterNodeVMDeploymentConfig.

        The NSX-Intelligence cluster node VM will be deployed on the specified host in the specified VC server within the cluster if host_id is specified. Note: User must ensure that storage and specified networks are accessible by this host.   # noqa: E501

        :param host_id: The host_id of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :type: str
        """

        self._host_id = host_id

    @property
    def management_network_id(self):
        """Gets the management_network_id of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501

        Distributed portgroup identifier to which the management vnic of NSX-Intelligence cluster node VM will be connected.   # noqa: E501

        :return: The management_network_id of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :rtype: str
        """
        return self._management_network_id

    @management_network_id.setter
    def management_network_id(self, management_network_id):
        """Sets the management_network_id of this IntelligenceVsphereClusterNodeVMDeploymentConfig.

        Distributed portgroup identifier to which the management vnic of NSX-Intelligence cluster node VM will be connected.   # noqa: E501

        :param management_network_id: The management_network_id of this IntelligenceVsphereClusterNodeVMDeploymentConfig.  # noqa: E501
        :type: str
        """
        if management_network_id is None:
            raise ValueError("Invalid value for `management_network_id`, must not be `None`")  # noqa: E501

        self._management_network_id = management_network_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntelligenceVsphereClusterNodeVMDeploymentConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntelligenceVsphereClusterNodeVMDeploymentConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
