# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ServiceDeployment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system_owned': 'bool',
        'display_name': 'str',
        'description': 'str',
        'tags': 'list[Tag]',
        'create_user': 'str',
        'protection': 'str',
        'create_time': 'int',
        'last_modified_time': 'int',
        'last_modified_user': 'str',
        'id': 'str',
        'resource_type': 'str',
        'perimeter': 'str',
        'deployment_spec_name': 'str',
        'deployment_mode': 'str',
        'instance_deployment_template': 'DeploymentTemplate',
        'service_deployment_config': 'ServiceDeploymentConfig',
        'service_id': 'str',
        'clustered_deployment_count': 'int',
        'deployed_to': 'list[ResourceReference]',
        'deployment_type': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'system_owned': '_system_owned',
        'display_name': 'display_name',
        'description': 'description',
        'tags': 'tags',
        'create_user': '_create_user',
        'protection': '_protection',
        'create_time': '_create_time',
        'last_modified_time': '_last_modified_time',
        'last_modified_user': '_last_modified_user',
        'id': 'id',
        'resource_type': 'resource_type',
        'perimeter': 'perimeter',
        'deployment_spec_name': 'deployment_spec_name',
        'deployment_mode': 'deployment_mode',
        'instance_deployment_template': 'instance_deployment_template',
        'service_deployment_config': 'service_deployment_config',
        'service_id': 'service_id',
        'clustered_deployment_count': 'clustered_deployment_count',
        'deployed_to': 'deployed_to',
        'deployment_type': 'deployment_type'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, system_owned=None, display_name=None, description=None, tags=None, create_user=None, protection=None, create_time=None, last_modified_time=None, last_modified_user=None, id=None, resource_type=None, perimeter='HOST', deployment_spec_name=None, deployment_mode='STAND_ALONE', instance_deployment_template=None, service_deployment_config=None, service_id=None, clustered_deployment_count=1, deployed_to=None, deployment_type='CLUSTERED', *args, **kwargs):  # noqa: E501
        """ServiceDeployment - a model defined in Swagger"""  # noqa: E501
        self._system_owned = None
        self._display_name = None
        self._description = None
        self._tags = None
        self._create_user = None
        self._protection = None
        self._create_time = None
        self._last_modified_time = None
        self._last_modified_user = None
        self._id = None
        self._resource_type = None
        self._perimeter = None
        self._deployment_spec_name = None
        self._deployment_mode = None
        self._instance_deployment_template = None
        self._service_deployment_config = None
        self._service_id = None
        self._clustered_deployment_count = None
        self._deployed_to = None
        self._deployment_type = None
        self.discriminator = None
        if system_owned is not None:
            self.system_owned = system_owned
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if create_user is not None:
            self.create_user = create_user
        if protection is not None:
            self.protection = protection
        if create_time is not None:
            self.create_time = create_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if last_modified_user is not None:
            self.last_modified_user = last_modified_user
        if id is not None:
            self.id = id
        if resource_type is not None:
            self.resource_type = resource_type
        if perimeter is not None:
            self.perimeter = perimeter
        self.deployment_spec_name = deployment_spec_name
        if deployment_mode is not None:
            self.deployment_mode = deployment_mode
        self.instance_deployment_template = instance_deployment_template
        self.service_deployment_config = service_deployment_config
        if service_id is not None:
            self.service_id = service_id
        if clustered_deployment_count is not None:
            self.clustered_deployment_count = clustered_deployment_count
        if deployed_to is not None:
            self.deployed_to = deployed_to
        if deployment_type is not None:
            self.deployment_type = deployment_type
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def system_owned(self):
        """Gets the system_owned of this ServiceDeployment.  # noqa: E501

        Indicates system owned resource  # noqa: E501

        :return: The system_owned of this ServiceDeployment.  # noqa: E501
        :rtype: bool
        """
        return self._system_owned

    @system_owned.setter
    def system_owned(self, system_owned):
        """Sets the system_owned of this ServiceDeployment.

        Indicates system owned resource  # noqa: E501

        :param system_owned: The system_owned of this ServiceDeployment.  # noqa: E501
        :type: bool
        """

        self._system_owned = system_owned

    @property
    def display_name(self):
        """Gets the display_name of this ServiceDeployment.  # noqa: E501

        Defaults to ID if not set  # noqa: E501

        :return: The display_name of this ServiceDeployment.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ServiceDeployment.

        Defaults to ID if not set  # noqa: E501

        :param display_name: The display_name of this ServiceDeployment.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this ServiceDeployment.  # noqa: E501

        Description of this resource  # noqa: E501

        :return: The description of this ServiceDeployment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceDeployment.

        Description of this resource  # noqa: E501

        :param description: The description of this ServiceDeployment.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this ServiceDeployment.  # noqa: E501

        Opaque identifiers meaningful to the API user  # noqa: E501

        :return: The tags of this ServiceDeployment.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ServiceDeployment.

        Opaque identifiers meaningful to the API user  # noqa: E501

        :param tags: The tags of this ServiceDeployment.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def create_user(self):
        """Gets the create_user of this ServiceDeployment.  # noqa: E501

        ID of the user who created this resource  # noqa: E501

        :return: The create_user of this ServiceDeployment.  # noqa: E501
        :rtype: str
        """
        return self._create_user

    @create_user.setter
    def create_user(self, create_user):
        """Sets the create_user of this ServiceDeployment.

        ID of the user who created this resource  # noqa: E501

        :param create_user: The create_user of this ServiceDeployment.  # noqa: E501
        :type: str
        """

        self._create_user = create_user

    @property
    def protection(self):
        """Gets the protection of this ServiceDeployment.  # noqa: E501

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :return: The protection of this ServiceDeployment.  # noqa: E501
        :rtype: str
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this ServiceDeployment.

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :param protection: The protection of this ServiceDeployment.  # noqa: E501
        :type: str
        """

        self._protection = protection

    @property
    def create_time(self):
        """Gets the create_time of this ServiceDeployment.  # noqa: E501

        Timestamp of resource creation  # noqa: E501

        :return: The create_time of this ServiceDeployment.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ServiceDeployment.

        Timestamp of resource creation  # noqa: E501

        :param create_time: The create_time of this ServiceDeployment.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this ServiceDeployment.  # noqa: E501

        Timestamp of last modification  # noqa: E501

        :return: The last_modified_time of this ServiceDeployment.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this ServiceDeployment.

        Timestamp of last modification  # noqa: E501

        :param last_modified_time: The last_modified_time of this ServiceDeployment.  # noqa: E501
        :type: int
        """

        self._last_modified_time = last_modified_time

    @property
    def last_modified_user(self):
        """Gets the last_modified_user of this ServiceDeployment.  # noqa: E501

        ID of the user who last modified this resource  # noqa: E501

        :return: The last_modified_user of this ServiceDeployment.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_user

    @last_modified_user.setter
    def last_modified_user(self, last_modified_user):
        """Sets the last_modified_user of this ServiceDeployment.

        ID of the user who last modified this resource  # noqa: E501

        :param last_modified_user: The last_modified_user of this ServiceDeployment.  # noqa: E501
        :type: str
        """

        self._last_modified_user = last_modified_user

    @property
    def id(self):
        """Gets the id of this ServiceDeployment.  # noqa: E501

        Unique identifier of this resource  # noqa: E501

        :return: The id of this ServiceDeployment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceDeployment.

        Unique identifier of this resource  # noqa: E501

        :param id: The id of this ServiceDeployment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resource_type(self):
        """Gets the resource_type of this ServiceDeployment.  # noqa: E501

        The type of this resource.  # noqa: E501

        :return: The resource_type of this ServiceDeployment.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ServiceDeployment.

        The type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this ServiceDeployment.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def perimeter(self):
        """Gets the perimeter of this ServiceDeployment.  # noqa: E501

        This indicates the deployment perimeter, such as a VC cluster or a host.  # noqa: E501

        :return: The perimeter of this ServiceDeployment.  # noqa: E501
        :rtype: str
        """
        return self._perimeter

    @perimeter.setter
    def perimeter(self, perimeter):
        """Sets the perimeter of this ServiceDeployment.

        This indicates the deployment perimeter, such as a VC cluster or a host.  # noqa: E501

        :param perimeter: The perimeter of this ServiceDeployment.  # noqa: E501
        :type: str
        """
        allowed_values = ["CLUSTER", "HOST"]  # noqa: E501
        if perimeter not in allowed_values:
            raise ValueError(
                "Invalid value for `perimeter` ({0}), must be one of {1}"  # noqa: E501
                .format(perimeter, allowed_values)
            )

        self._perimeter = perimeter

    @property
    def deployment_spec_name(self):
        """Gets the deployment_spec_name of this ServiceDeployment.  # noqa: E501

        Name of the deployment spec to be used for deployment, which specifies the OVF provided by the partner and the form factor.  # noqa: E501

        :return: The deployment_spec_name of this ServiceDeployment.  # noqa: E501
        :rtype: str
        """
        return self._deployment_spec_name

    @deployment_spec_name.setter
    def deployment_spec_name(self, deployment_spec_name):
        """Sets the deployment_spec_name of this ServiceDeployment.

        Name of the deployment spec to be used for deployment, which specifies the OVF provided by the partner and the form factor.  # noqa: E501

        :param deployment_spec_name: The deployment_spec_name of this ServiceDeployment.  # noqa: E501
        :type: str
        """
        if deployment_spec_name is None:
            raise ValueError("Invalid value for `deployment_spec_name`, must not be `None`")  # noqa: E501

        self._deployment_spec_name = deployment_spec_name

    @property
    def deployment_mode(self):
        """Gets the deployment_mode of this ServiceDeployment.  # noqa: E501

        Mode of deployment. Currently, only stand alone deployment is supported. It is a single VM deployed through this deployment spec. In future, HA configurations will be supported here.  # noqa: E501

        :return: The deployment_mode of this ServiceDeployment.  # noqa: E501
        :rtype: str
        """
        return self._deployment_mode

    @deployment_mode.setter
    def deployment_mode(self, deployment_mode):
        """Sets the deployment_mode of this ServiceDeployment.

        Mode of deployment. Currently, only stand alone deployment is supported. It is a single VM deployed through this deployment spec. In future, HA configurations will be supported here.  # noqa: E501

        :param deployment_mode: The deployment_mode of this ServiceDeployment.  # noqa: E501
        :type: str
        """
        allowed_values = ["STAND_ALONE", "ACTIVE_STANDBY"]  # noqa: E501
        if deployment_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(deployment_mode, allowed_values)
            )

        self._deployment_mode = deployment_mode

    @property
    def instance_deployment_template(self):
        """Gets the instance_deployment_template of this ServiceDeployment.  # noqa: E501


        :return: The instance_deployment_template of this ServiceDeployment.  # noqa: E501
        :rtype: DeploymentTemplate
        """
        return self._instance_deployment_template

    @instance_deployment_template.setter
    def instance_deployment_template(self, instance_deployment_template):
        """Sets the instance_deployment_template of this ServiceDeployment.


        :param instance_deployment_template: The instance_deployment_template of this ServiceDeployment.  # noqa: E501
        :type: DeploymentTemplate
        """
        if instance_deployment_template is None:
            raise ValueError("Invalid value for `instance_deployment_template`, must not be `None`")  # noqa: E501

        self._instance_deployment_template = instance_deployment_template

    @property
    def service_deployment_config(self):
        """Gets the service_deployment_config of this ServiceDeployment.  # noqa: E501


        :return: The service_deployment_config of this ServiceDeployment.  # noqa: E501
        :rtype: ServiceDeploymentConfig
        """
        return self._service_deployment_config

    @service_deployment_config.setter
    def service_deployment_config(self, service_deployment_config):
        """Sets the service_deployment_config of this ServiceDeployment.


        :param service_deployment_config: The service_deployment_config of this ServiceDeployment.  # noqa: E501
        :type: ServiceDeploymentConfig
        """
        if service_deployment_config is None:
            raise ValueError("Invalid value for `service_deployment_config`, must not be `None`")  # noqa: E501

        self._service_deployment_config = service_deployment_config

    @property
    def service_id(self):
        """Gets the service_id of this ServiceDeployment.  # noqa: E501

        The Service to which the service deployment is associated.  # noqa: E501

        :return: The service_id of this ServiceDeployment.  # noqa: E501
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this ServiceDeployment.

        The Service to which the service deployment is associated.  # noqa: E501

        :param service_id: The service_id of this ServiceDeployment.  # noqa: E501
        :type: str
        """

        self._service_id = service_id

    @property
    def clustered_deployment_count(self):
        """Gets the clustered_deployment_count of this ServiceDeployment.  # noqa: E501

        Number of instances in case of clustered deployment.  # noqa: E501

        :return: The clustered_deployment_count of this ServiceDeployment.  # noqa: E501
        :rtype: int
        """
        return self._clustered_deployment_count

    @clustered_deployment_count.setter
    def clustered_deployment_count(self, clustered_deployment_count):
        """Sets the clustered_deployment_count of this ServiceDeployment.

        Number of instances in case of clustered deployment.  # noqa: E501

        :param clustered_deployment_count: The clustered_deployment_count of this ServiceDeployment.  # noqa: E501
        :type: int
        """

        self._clustered_deployment_count = clustered_deployment_count

    @property
    def deployed_to(self):
        """Gets the deployed_to of this ServiceDeployment.  # noqa: E501

        List of resource references where service instance be deployed. Ex. Tier 0 Logical Router in case of N-S ServiceInsertion. Service Attachment in case of E-W ServiceInsertion.  # noqa: E501

        :return: The deployed_to of this ServiceDeployment.  # noqa: E501
        :rtype: list[ResourceReference]
        """
        return self._deployed_to

    @deployed_to.setter
    def deployed_to(self, deployed_to):
        """Sets the deployed_to of this ServiceDeployment.

        List of resource references where service instance be deployed. Ex. Tier 0 Logical Router in case of N-S ServiceInsertion. Service Attachment in case of E-W ServiceInsertion.  # noqa: E501

        :param deployed_to: The deployed_to of this ServiceDeployment.  # noqa: E501
        :type: list[ResourceReference]
        """

        self._deployed_to = deployed_to

    @property
    def deployment_type(self):
        """Gets the deployment_type of this ServiceDeployment.  # noqa: E501

        Specifies whether the service VM should be deployed on each host such that it provides partner service locally on the host, or whether the service VMs can be deployed as a cluster. If deployment_type is CLUSTERED, then the clustered_deployment_count should be provided.  # noqa: E501

        :return: The deployment_type of this ServiceDeployment.  # noqa: E501
        :rtype: str
        """
        return self._deployment_type

    @deployment_type.setter
    def deployment_type(self, deployment_type):
        """Sets the deployment_type of this ServiceDeployment.

        Specifies whether the service VM should be deployed on each host such that it provides partner service locally on the host, or whether the service VMs can be deployed as a cluster. If deployment_type is CLUSTERED, then the clustered_deployment_count should be provided.  # noqa: E501

        :param deployment_type: The deployment_type of this ServiceDeployment.  # noqa: E501
        :type: str
        """
        allowed_values = ["HOSTLOCAL", "CLUSTERED"]  # noqa: E501
        if deployment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(deployment_type, allowed_values)
            )

        self._deployment_type = deployment_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceDeployment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceDeployment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
