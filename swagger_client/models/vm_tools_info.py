# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class VmToolsInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_sync_time': 'int',
        'display_name': 'str',
        'description': 'str',
        'resource_type': 'str',
        'tags': 'list[Tag]',
        'source': 'ResourceReference',
        'vm_type': 'str',
        'network_agent_version': 'str',
        'host_local_id': 'str',
        'external_id': 'str',
        'tools_version': 'str',
        'file_agent_version': 'str'
    }
    if hasattr(DiscoveredResource, "swagger_types"):
        swagger_types.update(DiscoveredResource.swagger_types)

    attribute_map = {
        'last_sync_time': '_last_sync_time',
        'display_name': 'display_name',
        'description': 'description',
        'resource_type': 'resource_type',
        'tags': 'tags',
        'source': 'source',
        'vm_type': 'vm_type',
        'network_agent_version': 'network_agent_version',
        'host_local_id': 'host_local_id',
        'external_id': 'external_id',
        'tools_version': 'tools_version',
        'file_agent_version': 'file_agent_version'
    }
    if hasattr(DiscoveredResource, "attribute_map"):
        attribute_map.update(DiscoveredResource.attribute_map)

    def __init__(self, last_sync_time=None, display_name=None, description=None, resource_type=None, tags=None, source=None, vm_type=None, network_agent_version=None, host_local_id=None, external_id=None, tools_version=None, file_agent_version=None, *args, **kwargs):  # noqa: E501
        """VmToolsInfo - a model defined in Swagger"""  # noqa: E501
        self._last_sync_time = None
        self._display_name = None
        self._description = None
        self._resource_type = None
        self._tags = None
        self._source = None
        self._vm_type = None
        self._network_agent_version = None
        self._host_local_id = None
        self._external_id = None
        self._tools_version = None
        self._file_agent_version = None
        self.discriminator = None
        if last_sync_time is not None:
            self.last_sync_time = last_sync_time
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        self.resource_type = resource_type
        if tags is not None:
            self.tags = tags
        if source is not None:
            self.source = source
        if vm_type is not None:
            self.vm_type = vm_type
        if network_agent_version is not None:
            self.network_agent_version = network_agent_version
        if host_local_id is not None:
            self.host_local_id = host_local_id
        if external_id is not None:
            self.external_id = external_id
        if tools_version is not None:
            self.tools_version = tools_version
        if file_agent_version is not None:
            self.file_agent_version = file_agent_version
        DiscoveredResource.__init__(self, *args, **kwargs)

    @property
    def last_sync_time(self):
        """Gets the last_sync_time of this VmToolsInfo.  # noqa: E501

        Timestamp of last modification  # noqa: E501

        :return: The last_sync_time of this VmToolsInfo.  # noqa: E501
        :rtype: int
        """
        return self._last_sync_time

    @last_sync_time.setter
    def last_sync_time(self, last_sync_time):
        """Sets the last_sync_time of this VmToolsInfo.

        Timestamp of last modification  # noqa: E501

        :param last_sync_time: The last_sync_time of this VmToolsInfo.  # noqa: E501
        :type: int
        """

        self._last_sync_time = last_sync_time

    @property
    def display_name(self):
        """Gets the display_name of this VmToolsInfo.  # noqa: E501

        Defaults to ID if not set  # noqa: E501

        :return: The display_name of this VmToolsInfo.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this VmToolsInfo.

        Defaults to ID if not set  # noqa: E501

        :param display_name: The display_name of this VmToolsInfo.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this VmToolsInfo.  # noqa: E501

        Description of this resource  # noqa: E501

        :return: The description of this VmToolsInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VmToolsInfo.

        Description of this resource  # noqa: E501

        :param description: The description of this VmToolsInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def resource_type(self):
        """Gets the resource_type of this VmToolsInfo.  # noqa: E501

        The type of this resource.  # noqa: E501

        :return: The resource_type of this VmToolsInfo.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this VmToolsInfo.

        The type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this VmToolsInfo.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def tags(self):
        """Gets the tags of this VmToolsInfo.  # noqa: E501

        Opaque identifiers meaningful to the API user  # noqa: E501

        :return: The tags of this VmToolsInfo.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VmToolsInfo.

        Opaque identifiers meaningful to the API user  # noqa: E501

        :param tags: The tags of this VmToolsInfo.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def source(self):
        """Gets the source of this VmToolsInfo.  # noqa: E501


        :return: The source of this VmToolsInfo.  # noqa: E501
        :rtype: ResourceReference
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this VmToolsInfo.


        :param source: The source of this VmToolsInfo.  # noqa: E501
        :type: ResourceReference
        """

        self._source = source

    @property
    def vm_type(self):
        """Gets the vm_type of this VmToolsInfo.  # noqa: E501

        Type of VM - Edge, Service or other.  # noqa: E501

        :return: The vm_type of this VmToolsInfo.  # noqa: E501
        :rtype: str
        """
        return self._vm_type

    @vm_type.setter
    def vm_type(self, vm_type):
        """Sets the vm_type of this VmToolsInfo.

        Type of VM - Edge, Service or other.  # noqa: E501

        :param vm_type: The vm_type of this VmToolsInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["EDGE", "SERVICE", "REGULAR"]  # noqa: E501
        if vm_type not in allowed_values:
            raise ValueError(
                "Invalid value for `vm_type` ({0}), must be one of {1}"  # noqa: E501
                .format(vm_type, allowed_values)
            )

        self._vm_type = vm_type

    @property
    def network_agent_version(self):
        """Gets the network_agent_version of this VmToolsInfo.  # noqa: E501

        Version of network agent on the VM of a third party partner solution.  # noqa: E501

        :return: The network_agent_version of this VmToolsInfo.  # noqa: E501
        :rtype: str
        """
        return self._network_agent_version

    @network_agent_version.setter
    def network_agent_version(self, network_agent_version):
        """Sets the network_agent_version of this VmToolsInfo.

        Version of network agent on the VM of a third party partner solution.  # noqa: E501

        :param network_agent_version: The network_agent_version of this VmToolsInfo.  # noqa: E501
        :type: str
        """

        self._network_agent_version = network_agent_version

    @property
    def host_local_id(self):
        """Gets the host_local_id of this VmToolsInfo.  # noqa: E501

        Id of the VM which is assigned locally by the host. It is the VM-moref on ESXi hosts, in other environments it is VM UUID.  # noqa: E501

        :return: The host_local_id of this VmToolsInfo.  # noqa: E501
        :rtype: str
        """
        return self._host_local_id

    @host_local_id.setter
    def host_local_id(self, host_local_id):
        """Sets the host_local_id of this VmToolsInfo.

        Id of the VM which is assigned locally by the host. It is the VM-moref on ESXi hosts, in other environments it is VM UUID.  # noqa: E501

        :param host_local_id: The host_local_id of this VmToolsInfo.  # noqa: E501
        :type: str
        """

        self._host_local_id = host_local_id

    @property
    def external_id(self):
        """Gets the external_id of this VmToolsInfo.  # noqa: E501

        Current external id of this virtual machine in the system.  # noqa: E501

        :return: The external_id of this VmToolsInfo.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this VmToolsInfo.

        Current external id of this virtual machine in the system.  # noqa: E501

        :param external_id: The external_id of this VmToolsInfo.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def tools_version(self):
        """Gets the tools_version of this VmToolsInfo.  # noqa: E501

        Version of VMTools installed on the VM.  # noqa: E501

        :return: The tools_version of this VmToolsInfo.  # noqa: E501
        :rtype: str
        """
        return self._tools_version

    @tools_version.setter
    def tools_version(self, tools_version):
        """Sets the tools_version of this VmToolsInfo.

        Version of VMTools installed on the VM.  # noqa: E501

        :param tools_version: The tools_version of this VmToolsInfo.  # noqa: E501
        :type: str
        """

        self._tools_version = tools_version

    @property
    def file_agent_version(self):
        """Gets the file_agent_version of this VmToolsInfo.  # noqa: E501

        Version of file agent on the VM of a third party partner solution.  # noqa: E501

        :return: The file_agent_version of this VmToolsInfo.  # noqa: E501
        :rtype: str
        """
        return self._file_agent_version

    @file_agent_version.setter
    def file_agent_version(self, file_agent_version):
        """Sets the file_agent_version of this VmToolsInfo.

        Version of file agent on the VM of a third party partner solution.  # noqa: E501

        :param file_agent_version: The file_agent_version of this VmToolsInfo.  # noqa: E501
        :type: str
        """

        self._file_agent_version = file_agent_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VmToolsInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VmToolsInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
