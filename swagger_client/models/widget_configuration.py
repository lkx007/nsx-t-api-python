# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class WidgetConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system_owned': 'bool',
        'display_name': 'str',
        'description': 'str',
        'tags': 'list[Tag]',
        'create_user': 'str',
        'protection': 'str',
        'create_time': 'int',
        'last_modified_time': 'int',
        'last_modified_user': 'str',
        'id': 'str',
        'resource_type': 'str',
        'datasources': 'list[Datasource]',
        'weight': 'int',
        'icons': 'list[Icon]',
        'shared': 'bool',
        'footer': 'Footer',
        'drilldown_id': 'str',
        'is_drilldown': 'bool',
        'legend': 'Legend'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'system_owned': '_system_owned',
        'display_name': 'display_name',
        'description': 'description',
        'tags': 'tags',
        'create_user': '_create_user',
        'protection': '_protection',
        'create_time': '_create_time',
        'last_modified_time': '_last_modified_time',
        'last_modified_user': '_last_modified_user',
        'id': 'id',
        'resource_type': 'resource_type',
        'datasources': 'datasources',
        'weight': 'weight',
        'icons': 'icons',
        'shared': 'shared',
        'footer': 'footer',
        'drilldown_id': 'drilldown_id',
        'is_drilldown': 'is_drilldown',
        'legend': 'legend'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    discriminator_value_class_map = {
          'DonutConfiguration': 'DonutConfiguration',
'MultiWidgetConfiguration': 'MultiWidgetConfiguration',
'GridConfiguration': 'GridConfiguration',
'ContainerConfiguration': 'ContainerConfiguration',
'GraphConfiguration': 'GraphConfiguration',
'LabelValueConfiguration': 'LabelValueConfiguration',
'StatsConfiguration': 'StatsConfiguration'    }

    def __init__(self, system_owned=None, display_name=None, description=None, tags=None, create_user=None, protection=None, create_time=None, last_modified_time=None, last_modified_user=None, id=None, resource_type=None, datasources=None, weight=None, icons=None, shared=None, footer=None, drilldown_id=None, is_drilldown=False, legend=None, *args, **kwargs):  # noqa: E501
        """WidgetConfiguration - a model defined in Swagger"""  # noqa: E501
        self._system_owned = None
        self._display_name = None
        self._description = None
        self._tags = None
        self._create_user = None
        self._protection = None
        self._create_time = None
        self._last_modified_time = None
        self._last_modified_user = None
        self._id = None
        self._resource_type = None
        self._datasources = None
        self._weight = None
        self._icons = None
        self._shared = None
        self._footer = None
        self._drilldown_id = None
        self._is_drilldown = None
        self._legend = None
        self.discriminator = 'resource_type'
        if system_owned is not None:
            self.system_owned = system_owned
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if create_user is not None:
            self.create_user = create_user
        if protection is not None:
            self.protection = protection
        if create_time is not None:
            self.create_time = create_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if last_modified_user is not None:
            self.last_modified_user = last_modified_user
        if id is not None:
            self.id = id
        self.resource_type = resource_type
        if datasources is not None:
            self.datasources = datasources
        if weight is not None:
            self.weight = weight
        if icons is not None:
            self.icons = icons
        if shared is not None:
            self.shared = shared
        if footer is not None:
            self.footer = footer
        if drilldown_id is not None:
            self.drilldown_id = drilldown_id
        if is_drilldown is not None:
            self.is_drilldown = is_drilldown
        if legend is not None:
            self.legend = legend
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def system_owned(self):
        """Gets the system_owned of this WidgetConfiguration.  # noqa: E501

        Indicates system owned resource  # noqa: E501

        :return: The system_owned of this WidgetConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._system_owned

    @system_owned.setter
    def system_owned(self, system_owned):
        """Sets the system_owned of this WidgetConfiguration.

        Indicates system owned resource  # noqa: E501

        :param system_owned: The system_owned of this WidgetConfiguration.  # noqa: E501
        :type: bool
        """

        self._system_owned = system_owned

    @property
    def display_name(self):
        """Gets the display_name of this WidgetConfiguration.  # noqa: E501

        Title of the widget. If display_name is omitted, the widget will be shown without a title.  # noqa: E501

        :return: The display_name of this WidgetConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this WidgetConfiguration.

        Title of the widget. If display_name is omitted, the widget will be shown without a title.  # noqa: E501

        :param display_name: The display_name of this WidgetConfiguration.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this WidgetConfiguration.  # noqa: E501

        Description of this resource  # noqa: E501

        :return: The description of this WidgetConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WidgetConfiguration.

        Description of this resource  # noqa: E501

        :param description: The description of this WidgetConfiguration.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this WidgetConfiguration.  # noqa: E501

        Opaque identifiers meaningful to the API user  # noqa: E501

        :return: The tags of this WidgetConfiguration.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this WidgetConfiguration.

        Opaque identifiers meaningful to the API user  # noqa: E501

        :param tags: The tags of this WidgetConfiguration.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def create_user(self):
        """Gets the create_user of this WidgetConfiguration.  # noqa: E501

        ID of the user who created this resource  # noqa: E501

        :return: The create_user of this WidgetConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._create_user

    @create_user.setter
    def create_user(self, create_user):
        """Sets the create_user of this WidgetConfiguration.

        ID of the user who created this resource  # noqa: E501

        :param create_user: The create_user of this WidgetConfiguration.  # noqa: E501
        :type: str
        """

        self._create_user = create_user

    @property
    def protection(self):
        """Gets the protection of this WidgetConfiguration.  # noqa: E501

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :return: The protection of this WidgetConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this WidgetConfiguration.

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :param protection: The protection of this WidgetConfiguration.  # noqa: E501
        :type: str
        """

        self._protection = protection

    @property
    def create_time(self):
        """Gets the create_time of this WidgetConfiguration.  # noqa: E501

        Timestamp of resource creation  # noqa: E501

        :return: The create_time of this WidgetConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this WidgetConfiguration.

        Timestamp of resource creation  # noqa: E501

        :param create_time: The create_time of this WidgetConfiguration.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this WidgetConfiguration.  # noqa: E501

        Timestamp of last modification  # noqa: E501

        :return: The last_modified_time of this WidgetConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this WidgetConfiguration.

        Timestamp of last modification  # noqa: E501

        :param last_modified_time: The last_modified_time of this WidgetConfiguration.  # noqa: E501
        :type: int
        """

        self._last_modified_time = last_modified_time

    @property
    def last_modified_user(self):
        """Gets the last_modified_user of this WidgetConfiguration.  # noqa: E501

        ID of the user who last modified this resource  # noqa: E501

        :return: The last_modified_user of this WidgetConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_user

    @last_modified_user.setter
    def last_modified_user(self, last_modified_user):
        """Sets the last_modified_user of this WidgetConfiguration.

        ID of the user who last modified this resource  # noqa: E501

        :param last_modified_user: The last_modified_user of this WidgetConfiguration.  # noqa: E501
        :type: str
        """

        self._last_modified_user = last_modified_user

    @property
    def id(self):
        """Gets the id of this WidgetConfiguration.  # noqa: E501

        Unique identifier of this resource  # noqa: E501

        :return: The id of this WidgetConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WidgetConfiguration.

        Unique identifier of this resource  # noqa: E501

        :param id: The id of this WidgetConfiguration.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resource_type(self):
        """Gets the resource_type of this WidgetConfiguration.  # noqa: E501

        Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration and ContainerConfiguration.  # noqa: E501

        :return: The resource_type of this WidgetConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this WidgetConfiguration.

        Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration and ContainerConfiguration.  # noqa: E501

        :param resource_type: The resource_type of this WidgetConfiguration.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501
        allowed_values = ["LabelValueConfiguration", "DonutConfiguration", "MultiWidgetConfiguration", "ContainerConfiguration", "StatsConfiguration", "GridConfiguration", "GraphConfiguration"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def datasources(self):
        """Gets the datasources of this WidgetConfiguration.  # noqa: E501

        The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.  # noqa: E501

        :return: The datasources of this WidgetConfiguration.  # noqa: E501
        :rtype: list[Datasource]
        """
        return self._datasources

    @datasources.setter
    def datasources(self, datasources):
        """Sets the datasources of this WidgetConfiguration.

        The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.  # noqa: E501

        :param datasources: The datasources of this WidgetConfiguration.  # noqa: E501
        :type: list[Datasource]
        """

        self._datasources = datasources

    @property
    def weight(self):
        """Gets the weight of this WidgetConfiguration.  # noqa: E501

        Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.  # noqa: E501

        :return: The weight of this WidgetConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this WidgetConfiguration.

        Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.  # noqa: E501

        :param weight: The weight of this WidgetConfiguration.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def icons(self):
        """Gets the icons of this WidgetConfiguration.  # noqa: E501

        Icons to be applied at dashboard for widgets and UI elements.  # noqa: E501

        :return: The icons of this WidgetConfiguration.  # noqa: E501
        :rtype: list[Icon]
        """
        return self._icons

    @icons.setter
    def icons(self, icons):
        """Sets the icons of this WidgetConfiguration.

        Icons to be applied at dashboard for widgets and UI elements.  # noqa: E501

        :param icons: The icons of this WidgetConfiguration.  # noqa: E501
        :type: list[Icon]
        """

        self._icons = icons

    @property
    def shared(self):
        """Gets the shared of this WidgetConfiguration.  # noqa: E501

        Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.  # noqa: E501

        :return: The shared of this WidgetConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this WidgetConfiguration.

        Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.  # noqa: E501

        :param shared: The shared of this WidgetConfiguration.  # noqa: E501
        :type: bool
        """

        self._shared = shared

    @property
    def footer(self):
        """Gets the footer of this WidgetConfiguration.  # noqa: E501


        :return: The footer of this WidgetConfiguration.  # noqa: E501
        :rtype: Footer
        """
        return self._footer

    @footer.setter
    def footer(self, footer):
        """Sets the footer of this WidgetConfiguration.


        :param footer: The footer of this WidgetConfiguration.  # noqa: E501
        :type: Footer
        """

        self._footer = footer

    @property
    def drilldown_id(self):
        """Gets the drilldown_id of this WidgetConfiguration.  # noqa: E501

        Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.  # noqa: E501

        :return: The drilldown_id of this WidgetConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._drilldown_id

    @drilldown_id.setter
    def drilldown_id(self, drilldown_id):
        """Sets the drilldown_id of this WidgetConfiguration.

        Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.  # noqa: E501

        :param drilldown_id: The drilldown_id of this WidgetConfiguration.  # noqa: E501
        :type: str
        """

        self._drilldown_id = drilldown_id

    @property
    def is_drilldown(self):
        """Gets the is_drilldown of this WidgetConfiguration.  # noqa: E501

        Set to true if this widget should be used as a drilldown.  # noqa: E501

        :return: The is_drilldown of this WidgetConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_drilldown

    @is_drilldown.setter
    def is_drilldown(self, is_drilldown):
        """Sets the is_drilldown of this WidgetConfiguration.

        Set to true if this widget should be used as a drilldown.  # noqa: E501

        :param is_drilldown: The is_drilldown of this WidgetConfiguration.  # noqa: E501
        :type: bool
        """

        self._is_drilldown = is_drilldown

    @property
    def legend(self):
        """Gets the legend of this WidgetConfiguration.  # noqa: E501


        :return: The legend of this WidgetConfiguration.  # noqa: E501
        :rtype: Legend
        """
        return self._legend

    @legend.setter
    def legend(self, legend):
        """Sets the legend of this WidgetConfiguration.


        :param legend: The legend of this WidgetConfiguration.  # noqa: E501
        :type: Legend
        """

        self._legend = legend

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WidgetConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WidgetConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
