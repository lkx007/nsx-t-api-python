# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AlarmSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'thread_id': 'str',
        'interface_name': 'str',
        'quiesce_blocked_time': 'int',
        'local_ip': 'str',
        'id': 'str',
        'ip_address_type': 'str',
        'process_name': 'str',
        'ip_address': 'str',
        'mount': 'str',
        'peer_ip': 'str'
    }

    attribute_map = {
        'thread_id': 'thread_id',
        'interface_name': 'interface_name',
        'quiesce_blocked_time': 'quiesce_blocked_time',
        'local_ip': 'local_ip',
        'id': 'id',
        'ip_address_type': 'ip_address_type',
        'process_name': 'process_name',
        'ip_address': 'ip_address',
        'mount': 'mount',
        'peer_ip': 'peer_ip'
    }

    def __init__(self, thread_id=None, interface_name=None, quiesce_blocked_time=None, local_ip=None, id=None, ip_address_type=None, process_name=None, ip_address=None, mount=None, peer_ip=None):  # noqa: E501
        """AlarmSource - a model defined in Swagger"""  # noqa: E501
        self._thread_id = None
        self._interface_name = None
        self._quiesce_blocked_time = None
        self._local_ip = None
        self._id = None
        self._ip_address_type = None
        self._process_name = None
        self._ip_address = None
        self._mount = None
        self._peer_ip = None
        self.discriminator = None
        if thread_id is not None:
            self.thread_id = thread_id
        if interface_name is not None:
            self.interface_name = interface_name
        if quiesce_blocked_time is not None:
            self.quiesce_blocked_time = quiesce_blocked_time
        if local_ip is not None:
            self.local_ip = local_ip
        if id is not None:
            self.id = id
        if ip_address_type is not None:
            self.ip_address_type = ip_address_type
        if process_name is not None:
            self.process_name = process_name
        if ip_address is not None:
            self.ip_address = ip_address
        if mount is not None:
            self.mount = mount
        if peer_ip is not None:
            self.peer_ip = peer_ip

    @property
    def thread_id(self):
        """Gets the thread_id of this AlarmSource.  # noqa: E501

        The datapath thread name ID  # noqa: E501

        :return: The thread_id of this AlarmSource.  # noqa: E501
        :rtype: str
        """
        return self._thread_id

    @thread_id.setter
    def thread_id(self, thread_id):
        """Sets the thread_id of this AlarmSource.

        The datapath thread name ID  # noqa: E501

        :param thread_id: The thread_id of this AlarmSource.  # noqa: E501
        :type: str
        """

        self._thread_id = thread_id

    @property
    def interface_name(self):
        """Gets the interface_name of this AlarmSource.  # noqa: E501

        The NIC interface name  # noqa: E501

        :return: The interface_name of this AlarmSource.  # noqa: E501
        :rtype: str
        """
        return self._interface_name

    @interface_name.setter
    def interface_name(self, interface_name):
        """Sets the interface_name of this AlarmSource.

        The NIC interface name  # noqa: E501

        :param interface_name: The interface_name of this AlarmSource.  # noqa: E501
        :type: str
        """

        self._interface_name = interface_name

    @property
    def quiesce_blocked_time(self):
        """Gets the quiesce_blocked_time of this AlarmSource.  # noqa: E501

        Time in milliseconds that elapsed in blocked state  # noqa: E501

        :return: The quiesce_blocked_time of this AlarmSource.  # noqa: E501
        :rtype: int
        """
        return self._quiesce_blocked_time

    @quiesce_blocked_time.setter
    def quiesce_blocked_time(self, quiesce_blocked_time):
        """Sets the quiesce_blocked_time of this AlarmSource.

        Time in milliseconds that elapsed in blocked state  # noqa: E501

        :param quiesce_blocked_time: The quiesce_blocked_time of this AlarmSource.  # noqa: E501
        :type: int
        """

        self._quiesce_blocked_time = quiesce_blocked_time

    @property
    def local_ip(self):
        """Gets the local_ip of this AlarmSource.  # noqa: E501

        VPN session/tunnel etc. local Ip(v4 or v6) address  # noqa: E501

        :return: The local_ip of this AlarmSource.  # noqa: E501
        :rtype: str
        """
        return self._local_ip

    @local_ip.setter
    def local_ip(self, local_ip):
        """Sets the local_ip of this AlarmSource.

        VPN session/tunnel etc. local Ip(v4 or v6) address  # noqa: E501

        :param local_ip: The local_ip of this AlarmSource.  # noqa: E501
        :type: str
        """

        self._local_ip = local_ip

    @property
    def id(self):
        """Gets the id of this AlarmSource.  # noqa: E501

        Identifier of the Alarm source entity for e.g. Vpn session id, Vpn tunnel id etc.  # noqa: E501

        :return: The id of this AlarmSource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AlarmSource.

        Identifier of the Alarm source entity for e.g. Vpn session id, Vpn tunnel id etc.  # noqa: E501

        :param id: The id of this AlarmSource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ip_address_type(self):
        """Gets the ip_address_type of this AlarmSource.  # noqa: E501

        Ip address type v4, v6 etc.  # noqa: E501

        :return: The ip_address_type of this AlarmSource.  # noqa: E501
        :rtype: str
        """
        return self._ip_address_type

    @ip_address_type.setter
    def ip_address_type(self, ip_address_type):
        """Sets the ip_address_type of this AlarmSource.

        Ip address type v4, v6 etc.  # noqa: E501

        :param ip_address_type: The ip_address_type of this AlarmSource.  # noqa: E501
        :type: str
        """
        allowed_values = ["IPV4", "IPV6"]  # noqa: E501
        if ip_address_type not in allowed_values:
            raise ValueError(
                "Invalid value for `ip_address_type` ({0}), must be one of {1}"  # noqa: E501
                .format(ip_address_type, allowed_values)
            )

        self._ip_address_type = ip_address_type

    @property
    def process_name(self):
        """Gets the process_name of this AlarmSource.  # noqa: E501

        Name of the process which is blocked from entering quiesce state  # noqa: E501

        :return: The process_name of this AlarmSource.  # noqa: E501
        :rtype: str
        """
        return self._process_name

    @process_name.setter
    def process_name(self, process_name):
        """Sets the process_name of this AlarmSource.

        Name of the process which is blocked from entering quiesce state  # noqa: E501

        :param process_name: The process_name of this AlarmSource.  # noqa: E501
        :type: str
        """

        self._process_name = process_name

    @property
    def ip_address(self):
        """Gets the ip_address of this AlarmSource.  # noqa: E501

        Ip address  # noqa: E501

        :return: The ip_address of this AlarmSource.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this AlarmSource.

        Ip address  # noqa: E501

        :param ip_address: The ip_address of this AlarmSource.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def mount(self):
        """Gets the mount of this AlarmSource.  # noqa: E501

        Filesystem mount name  # noqa: E501

        :return: The mount of this AlarmSource.  # noqa: E501
        :rtype: str
        """
        return self._mount

    @mount.setter
    def mount(self, mount):
        """Sets the mount of this AlarmSource.

        Filesystem mount name  # noqa: E501

        :param mount: The mount of this AlarmSource.  # noqa: E501
        :type: str
        """

        self._mount = mount

    @property
    def peer_ip(self):
        """Gets the peer_ip of this AlarmSource.  # noqa: E501

        VPN session/tunnel etc. peer Ip(v4 or v6) address  # noqa: E501

        :return: The peer_ip of this AlarmSource.  # noqa: E501
        :rtype: str
        """
        return self._peer_ip

    @peer_ip.setter
    def peer_ip(self, peer_ip):
        """Sets the peer_ip of this AlarmSource.

        VPN session/tunnel etc. peer Ip(v4 or v6) address  # noqa: E501

        :param peer_ip: The peer_ip of this AlarmSource.  # noqa: E501
        :type: str
        """

        self._peer_ip = peer_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlarmSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlarmSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
