# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class NodeStatusProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_self': 'SelfResourceLink',
        'links': 'list[ResourceLink]',
        'schema': 'str',
        'load_average': 'list[float]',
        'swap_used': 'int',
        'cpu_usage': 'CpuUsage',
        'non_dpdk_cpu_cores': 'int',
        'swap_total': 'int',
        'system_time': 'int',
        'cpu_cores': 'int',
        'uptime': 'int',
        'mem_cache': 'int',
        'mem_total': 'int',
        'mem_used': 'int',
        'dpdk_cpu_cores': 'int',
        'file_systems': 'list[NodeFileSystemProperties]',
        'source': 'str'
    }
    if hasattr(Resource, "swagger_types"):
        swagger_types.update(Resource.swagger_types)

    attribute_map = {
        '_self': '_self',
        'links': '_links',
        'schema': '_schema',
        'load_average': 'load_average',
        'swap_used': 'swap_used',
        'cpu_usage': 'cpu_usage',
        'non_dpdk_cpu_cores': 'non_dpdk_cpu_cores',
        'swap_total': 'swap_total',
        'system_time': 'system_time',
        'cpu_cores': 'cpu_cores',
        'uptime': 'uptime',
        'mem_cache': 'mem_cache',
        'mem_total': 'mem_total',
        'mem_used': 'mem_used',
        'dpdk_cpu_cores': 'dpdk_cpu_cores',
        'file_systems': 'file_systems',
        'source': 'source'
    }
    if hasattr(Resource, "attribute_map"):
        attribute_map.update(Resource.attribute_map)

    def __init__(self, _self=None, links=None, schema=None, load_average=None, swap_used=None, cpu_usage=None, non_dpdk_cpu_cores=None, swap_total=None, system_time=None, cpu_cores=None, uptime=None, mem_cache=None, mem_total=None, mem_used=None, dpdk_cpu_cores=None, file_systems=None, source=None, *args, **kwargs):  # noqa: E501
        """NodeStatusProperties - a model defined in Swagger"""  # noqa: E501
        self.__self = None
        self._links = None
        self._schema = None
        self._load_average = None
        self._swap_used = None
        self._cpu_usage = None
        self._non_dpdk_cpu_cores = None
        self._swap_total = None
        self._system_time = None
        self._cpu_cores = None
        self._uptime = None
        self._mem_cache = None
        self._mem_total = None
        self._mem_used = None
        self._dpdk_cpu_cores = None
        self._file_systems = None
        self._source = None
        self.discriminator = None
        if _self is not None:
            self._self = _self
        if links is not None:
            self.links = links
        if schema is not None:
            self.schema = schema
        if load_average is not None:
            self.load_average = load_average
        if swap_used is not None:
            self.swap_used = swap_used
        if cpu_usage is not None:
            self.cpu_usage = cpu_usage
        if non_dpdk_cpu_cores is not None:
            self.non_dpdk_cpu_cores = non_dpdk_cpu_cores
        if swap_total is not None:
            self.swap_total = swap_total
        if system_time is not None:
            self.system_time = system_time
        if cpu_cores is not None:
            self.cpu_cores = cpu_cores
        if uptime is not None:
            self.uptime = uptime
        if mem_cache is not None:
            self.mem_cache = mem_cache
        if mem_total is not None:
            self.mem_total = mem_total
        if mem_used is not None:
            self.mem_used = mem_used
        if dpdk_cpu_cores is not None:
            self.dpdk_cpu_cores = dpdk_cpu_cores
        if file_systems is not None:
            self.file_systems = file_systems
        if source is not None:
            self.source = source
        Resource.__init__(self, *args, **kwargs)

    @property
    def _self(self):
        """Gets the _self of this NodeStatusProperties.  # noqa: E501


        :return: The _self of this NodeStatusProperties.  # noqa: E501
        :rtype: SelfResourceLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this NodeStatusProperties.


        :param _self: The _self of this NodeStatusProperties.  # noqa: E501
        :type: SelfResourceLink
        """

        self.__self = _self

    @property
    def links(self):
        """Gets the links of this NodeStatusProperties.  # noqa: E501

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :return: The links of this NodeStatusProperties.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this NodeStatusProperties.

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :param links: The links of this NodeStatusProperties.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    @property
    def schema(self):
        """Gets the schema of this NodeStatusProperties.  # noqa: E501

        Schema for this resource  # noqa: E501

        :return: The schema of this NodeStatusProperties.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this NodeStatusProperties.

        Schema for this resource  # noqa: E501

        :param schema: The schema of this NodeStatusProperties.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def load_average(self):
        """Gets the load_average of this NodeStatusProperties.  # noqa: E501

        One, five, and fifteen minute load averages for the system  # noqa: E501

        :return: The load_average of this NodeStatusProperties.  # noqa: E501
        :rtype: list[float]
        """
        return self._load_average

    @load_average.setter
    def load_average(self, load_average):
        """Sets the load_average of this NodeStatusProperties.

        One, five, and fifteen minute load averages for the system  # noqa: E501

        :param load_average: The load_average of this NodeStatusProperties.  # noqa: E501
        :type: list[float]
        """

        self._load_average = load_average

    @property
    def swap_used(self):
        """Gets the swap_used of this NodeStatusProperties.  # noqa: E501

        Amount of swap disk in use, in kilobytes  # noqa: E501

        :return: The swap_used of this NodeStatusProperties.  # noqa: E501
        :rtype: int
        """
        return self._swap_used

    @swap_used.setter
    def swap_used(self, swap_used):
        """Sets the swap_used of this NodeStatusProperties.

        Amount of swap disk in use, in kilobytes  # noqa: E501

        :param swap_used: The swap_used of this NodeStatusProperties.  # noqa: E501
        :type: int
        """

        self._swap_used = swap_used

    @property
    def cpu_usage(self):
        """Gets the cpu_usage of this NodeStatusProperties.  # noqa: E501


        :return: The cpu_usage of this NodeStatusProperties.  # noqa: E501
        :rtype: CpuUsage
        """
        return self._cpu_usage

    @cpu_usage.setter
    def cpu_usage(self, cpu_usage):
        """Sets the cpu_usage of this NodeStatusProperties.


        :param cpu_usage: The cpu_usage of this NodeStatusProperties.  # noqa: E501
        :type: CpuUsage
        """

        self._cpu_usage = cpu_usage

    @property
    def non_dpdk_cpu_cores(self):
        """Gets the non_dpdk_cpu_cores of this NodeStatusProperties.  # noqa: E501

        Number of non-DPDK cores on Edge Node.  # noqa: E501

        :return: The non_dpdk_cpu_cores of this NodeStatusProperties.  # noqa: E501
        :rtype: int
        """
        return self._non_dpdk_cpu_cores

    @non_dpdk_cpu_cores.setter
    def non_dpdk_cpu_cores(self, non_dpdk_cpu_cores):
        """Sets the non_dpdk_cpu_cores of this NodeStatusProperties.

        Number of non-DPDK cores on Edge Node.  # noqa: E501

        :param non_dpdk_cpu_cores: The non_dpdk_cpu_cores of this NodeStatusProperties.  # noqa: E501
        :type: int
        """

        self._non_dpdk_cpu_cores = non_dpdk_cpu_cores

    @property
    def swap_total(self):
        """Gets the swap_total of this NodeStatusProperties.  # noqa: E501

        Amount of disk available for swap, in kilobytes  # noqa: E501

        :return: The swap_total of this NodeStatusProperties.  # noqa: E501
        :rtype: int
        """
        return self._swap_total

    @swap_total.setter
    def swap_total(self, swap_total):
        """Sets the swap_total of this NodeStatusProperties.

        Amount of disk available for swap, in kilobytes  # noqa: E501

        :param swap_total: The swap_total of this NodeStatusProperties.  # noqa: E501
        :type: int
        """

        self._swap_total = swap_total

    @property
    def system_time(self):
        """Gets the system_time of this NodeStatusProperties.  # noqa: E501

        Current time expressed in milliseconds since epoch  # noqa: E501

        :return: The system_time of this NodeStatusProperties.  # noqa: E501
        :rtype: int
        """
        return self._system_time

    @system_time.setter
    def system_time(self, system_time):
        """Sets the system_time of this NodeStatusProperties.

        Current time expressed in milliseconds since epoch  # noqa: E501

        :param system_time: The system_time of this NodeStatusProperties.  # noqa: E501
        :type: int
        """

        self._system_time = system_time

    @property
    def cpu_cores(self):
        """Gets the cpu_cores of this NodeStatusProperties.  # noqa: E501

        Number of CPU cores on the system  # noqa: E501

        :return: The cpu_cores of this NodeStatusProperties.  # noqa: E501
        :rtype: int
        """
        return self._cpu_cores

    @cpu_cores.setter
    def cpu_cores(self, cpu_cores):
        """Sets the cpu_cores of this NodeStatusProperties.

        Number of CPU cores on the system  # noqa: E501

        :param cpu_cores: The cpu_cores of this NodeStatusProperties.  # noqa: E501
        :type: int
        """

        self._cpu_cores = cpu_cores

    @property
    def uptime(self):
        """Gets the uptime of this NodeStatusProperties.  # noqa: E501

        Milliseconds since system start  # noqa: E501

        :return: The uptime of this NodeStatusProperties.  # noqa: E501
        :rtype: int
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this NodeStatusProperties.

        Milliseconds since system start  # noqa: E501

        :param uptime: The uptime of this NodeStatusProperties.  # noqa: E501
        :type: int
        """

        self._uptime = uptime

    @property
    def mem_cache(self):
        """Gets the mem_cache of this NodeStatusProperties.  # noqa: E501

        Amount of RAM on the system that can be flushed out to disk, in kilobytes  # noqa: E501

        :return: The mem_cache of this NodeStatusProperties.  # noqa: E501
        :rtype: int
        """
        return self._mem_cache

    @mem_cache.setter
    def mem_cache(self, mem_cache):
        """Sets the mem_cache of this NodeStatusProperties.

        Amount of RAM on the system that can be flushed out to disk, in kilobytes  # noqa: E501

        :param mem_cache: The mem_cache of this NodeStatusProperties.  # noqa: E501
        :type: int
        """

        self._mem_cache = mem_cache

    @property
    def mem_total(self):
        """Gets the mem_total of this NodeStatusProperties.  # noqa: E501

        Amount of RAM allocated to the system, in kilobytes  # noqa: E501

        :return: The mem_total of this NodeStatusProperties.  # noqa: E501
        :rtype: int
        """
        return self._mem_total

    @mem_total.setter
    def mem_total(self, mem_total):
        """Sets the mem_total of this NodeStatusProperties.

        Amount of RAM allocated to the system, in kilobytes  # noqa: E501

        :param mem_total: The mem_total of this NodeStatusProperties.  # noqa: E501
        :type: int
        """

        self._mem_total = mem_total

    @property
    def mem_used(self):
        """Gets the mem_used of this NodeStatusProperties.  # noqa: E501

        Amount of RAM in use on the system, in kilobytes  # noqa: E501

        :return: The mem_used of this NodeStatusProperties.  # noqa: E501
        :rtype: int
        """
        return self._mem_used

    @mem_used.setter
    def mem_used(self, mem_used):
        """Sets the mem_used of this NodeStatusProperties.

        Amount of RAM in use on the system, in kilobytes  # noqa: E501

        :param mem_used: The mem_used of this NodeStatusProperties.  # noqa: E501
        :type: int
        """

        self._mem_used = mem_used

    @property
    def dpdk_cpu_cores(self):
        """Gets the dpdk_cpu_cores of this NodeStatusProperties.  # noqa: E501

        Number of DPDK cores on Edge Node which are used for packet IO processing.  # noqa: E501

        :return: The dpdk_cpu_cores of this NodeStatusProperties.  # noqa: E501
        :rtype: int
        """
        return self._dpdk_cpu_cores

    @dpdk_cpu_cores.setter
    def dpdk_cpu_cores(self, dpdk_cpu_cores):
        """Sets the dpdk_cpu_cores of this NodeStatusProperties.

        Number of DPDK cores on Edge Node which are used for packet IO processing.  # noqa: E501

        :param dpdk_cpu_cores: The dpdk_cpu_cores of this NodeStatusProperties.  # noqa: E501
        :type: int
        """

        self._dpdk_cpu_cores = dpdk_cpu_cores

    @property
    def file_systems(self):
        """Gets the file_systems of this NodeStatusProperties.  # noqa: E501

        File systems configured on the system  # noqa: E501

        :return: The file_systems of this NodeStatusProperties.  # noqa: E501
        :rtype: list[NodeFileSystemProperties]
        """
        return self._file_systems

    @file_systems.setter
    def file_systems(self, file_systems):
        """Sets the file_systems of this NodeStatusProperties.

        File systems configured on the system  # noqa: E501

        :param file_systems: The file_systems of this NodeStatusProperties.  # noqa: E501
        :type: list[NodeFileSystemProperties]
        """

        self._file_systems = file_systems

    @property
    def source(self):
        """Gets the source of this NodeStatusProperties.  # noqa: E501

        Source of status data.  # noqa: E501

        :return: The source of this NodeStatusProperties.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this NodeStatusProperties.

        Source of status data.  # noqa: E501

        :param source: The source of this NodeStatusProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["realtime", "cached"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeStatusProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeStatusProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
