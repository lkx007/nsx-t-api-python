# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class HostSwitch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pnics': 'list[Pnic]',
        'host_switch_name': 'str',
        'static_ip_pool_id': 'str',
        'host_switch_profile_ids': 'list[HostSwitchProfileTypeIdEntry]'
    }

    attribute_map = {
        'pnics': 'pnics',
        'host_switch_name': 'host_switch_name',
        'static_ip_pool_id': 'static_ip_pool_id',
        'host_switch_profile_ids': 'host_switch_profile_ids'
    }

    def __init__(self, pnics=None, host_switch_name='nsxDefaultHostSwitch', static_ip_pool_id=None, host_switch_profile_ids=None):  # noqa: E501
        """HostSwitch - a model defined in Swagger"""  # noqa: E501
        self._pnics = None
        self._host_switch_name = None
        self._static_ip_pool_id = None
        self._host_switch_profile_ids = None
        self.discriminator = None
        if pnics is not None:
            self.pnics = pnics
        if host_switch_name is not None:
            self.host_switch_name = host_switch_name
        if static_ip_pool_id is not None:
            self.static_ip_pool_id = static_ip_pool_id
        if host_switch_profile_ids is not None:
            self.host_switch_profile_ids = host_switch_profile_ids

    @property
    def pnics(self):
        """Gets the pnics of this HostSwitch.  # noqa: E501

        Physical NICs connected to the host switch  # noqa: E501

        :return: The pnics of this HostSwitch.  # noqa: E501
        :rtype: list[Pnic]
        """
        return self._pnics

    @pnics.setter
    def pnics(self, pnics):
        """Sets the pnics of this HostSwitch.

        Physical NICs connected to the host switch  # noqa: E501

        :param pnics: The pnics of this HostSwitch.  # noqa: E501
        :type: list[Pnic]
        """

        self._pnics = pnics

    @property
    def host_switch_name(self):
        """Gets the host_switch_name of this HostSwitch.  # noqa: E501

        If this name is unset or empty then the default host switch name will be used. The name must be unique among all host switches specified in a given Transport Node; unset name, empty name and the default host switch name are considered the same in terms of uniqueness.  # noqa: E501

        :return: The host_switch_name of this HostSwitch.  # noqa: E501
        :rtype: str
        """
        return self._host_switch_name

    @host_switch_name.setter
    def host_switch_name(self, host_switch_name):
        """Sets the host_switch_name of this HostSwitch.

        If this name is unset or empty then the default host switch name will be used. The name must be unique among all host switches specified in a given Transport Node; unset name, empty name and the default host switch name are considered the same in terms of uniqueness.  # noqa: E501

        :param host_switch_name: The host_switch_name of this HostSwitch.  # noqa: E501
        :type: str
        """

        self._host_switch_name = host_switch_name

    @property
    def static_ip_pool_id(self):
        """Gets the static_ip_pool_id of this HostSwitch.  # noqa: E501

        ID of configured Static IP Pool. If specified allocate IP for Endpoints from Pool. Else assume IP will be assigned for Endpoints from DHCP. This field is deprecated, use ip_assignment_spec field instead.  # noqa: E501

        :return: The static_ip_pool_id of this HostSwitch.  # noqa: E501
        :rtype: str
        """
        return self._static_ip_pool_id

    @static_ip_pool_id.setter
    def static_ip_pool_id(self, static_ip_pool_id):
        """Sets the static_ip_pool_id of this HostSwitch.

        ID of configured Static IP Pool. If specified allocate IP for Endpoints from Pool. Else assume IP will be assigned for Endpoints from DHCP. This field is deprecated, use ip_assignment_spec field instead.  # noqa: E501

        :param static_ip_pool_id: The static_ip_pool_id of this HostSwitch.  # noqa: E501
        :type: str
        """

        self._static_ip_pool_id = static_ip_pool_id

    @property
    def host_switch_profile_ids(self):
        """Gets the host_switch_profile_ids of this HostSwitch.  # noqa: E501

        HostSwitch profiles bound to this HostSwitch. If a profile ID is not provided for any HostSwitchProfileType that is supported by the Transport Node, the corresponding default profile will be bound to the HostSwitch.  # noqa: E501

        :return: The host_switch_profile_ids of this HostSwitch.  # noqa: E501
        :rtype: list[HostSwitchProfileTypeIdEntry]
        """
        return self._host_switch_profile_ids

    @host_switch_profile_ids.setter
    def host_switch_profile_ids(self, host_switch_profile_ids):
        """Sets the host_switch_profile_ids of this HostSwitch.

        HostSwitch profiles bound to this HostSwitch. If a profile ID is not provided for any HostSwitchProfileType that is supported by the Transport Node, the corresponding default profile will be bound to the HostSwitch.  # noqa: E501

        :param host_switch_profile_ids: The host_switch_profile_ids of this HostSwitch.  # noqa: E501
        :type: list[HostSwitchProfileTypeIdEntry]
        """

        self._host_switch_profile_ids = host_switch_profile_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HostSwitch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HostSwitch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
