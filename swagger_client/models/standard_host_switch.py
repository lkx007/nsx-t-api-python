# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class StandardHostSwitch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pnics_uninstall_migration': 'list[Pnic]',
        'ip_assignment_spec': 'IpAssignmentSpec',
        'cpu_config': 'list[CpuCoreConfigForEnhancedNetworkingStackSwitch]',
        'is_migrate_pnics': 'bool',
        'vmk_uninstall_migration': 'list[VmknicNetwork]',
        'pnics': 'list[Pnic]',
        'host_switch_name': 'str',
        'vmk_install_migration': 'list[VmknicNetwork]',
        'host_switch_profile_ids': 'list[HostSwitchProfileTypeIdEntry]'
    }

    attribute_map = {
        'pnics_uninstall_migration': 'pnics_uninstall_migration',
        'ip_assignment_spec': 'ip_assignment_spec',
        'cpu_config': 'cpu_config',
        'is_migrate_pnics': 'is_migrate_pnics',
        'vmk_uninstall_migration': 'vmk_uninstall_migration',
        'pnics': 'pnics',
        'host_switch_name': 'host_switch_name',
        'vmk_install_migration': 'vmk_install_migration',
        'host_switch_profile_ids': 'host_switch_profile_ids'
    }

    def __init__(self, pnics_uninstall_migration=None, ip_assignment_spec=None, cpu_config=None, is_migrate_pnics=False, vmk_uninstall_migration=None, pnics=None, host_switch_name='nsxDefaultHostSwitch', vmk_install_migration=None, host_switch_profile_ids=None):  # noqa: E501
        """StandardHostSwitch - a model defined in Swagger"""  # noqa: E501
        self._pnics_uninstall_migration = None
        self._ip_assignment_spec = None
        self._cpu_config = None
        self._is_migrate_pnics = None
        self._vmk_uninstall_migration = None
        self._pnics = None
        self._host_switch_name = None
        self._vmk_install_migration = None
        self._host_switch_profile_ids = None
        self.discriminator = None
        if pnics_uninstall_migration is not None:
            self.pnics_uninstall_migration = pnics_uninstall_migration
        if ip_assignment_spec is not None:
            self.ip_assignment_spec = ip_assignment_spec
        if cpu_config is not None:
            self.cpu_config = cpu_config
        if is_migrate_pnics is not None:
            self.is_migrate_pnics = is_migrate_pnics
        if vmk_uninstall_migration is not None:
            self.vmk_uninstall_migration = vmk_uninstall_migration
        if pnics is not None:
            self.pnics = pnics
        if host_switch_name is not None:
            self.host_switch_name = host_switch_name
        if vmk_install_migration is not None:
            self.vmk_install_migration = vmk_install_migration
        if host_switch_profile_ids is not None:
            self.host_switch_profile_ids = host_switch_profile_ids

    @property
    def pnics_uninstall_migration(self):
        """Gets the pnics_uninstall_migration of this StandardHostSwitch.  # noqa: E501

        The pnics to be migrated out to a non N-VDS switch during transport node deletion.  # noqa: E501

        :return: The pnics_uninstall_migration of this StandardHostSwitch.  # noqa: E501
        :rtype: list[Pnic]
        """
        return self._pnics_uninstall_migration

    @pnics_uninstall_migration.setter
    def pnics_uninstall_migration(self, pnics_uninstall_migration):
        """Sets the pnics_uninstall_migration of this StandardHostSwitch.

        The pnics to be migrated out to a non N-VDS switch during transport node deletion.  # noqa: E501

        :param pnics_uninstall_migration: The pnics_uninstall_migration of this StandardHostSwitch.  # noqa: E501
        :type: list[Pnic]
        """

        self._pnics_uninstall_migration = pnics_uninstall_migration

    @property
    def ip_assignment_spec(self):
        """Gets the ip_assignment_spec of this StandardHostSwitch.  # noqa: E501


        :return: The ip_assignment_spec of this StandardHostSwitch.  # noqa: E501
        :rtype: IpAssignmentSpec
        """
        return self._ip_assignment_spec

    @ip_assignment_spec.setter
    def ip_assignment_spec(self, ip_assignment_spec):
        """Sets the ip_assignment_spec of this StandardHostSwitch.


        :param ip_assignment_spec: The ip_assignment_spec of this StandardHostSwitch.  # noqa: E501
        :type: IpAssignmentSpec
        """

        self._ip_assignment_spec = ip_assignment_spec

    @property
    def cpu_config(self):
        """Gets the cpu_config of this StandardHostSwitch.  # noqa: E501

        CPU configuration specifies number of Logical cpu cores (Lcores) per Non Uniform Memory Access (NUMA) node dedicated to Enhanced Networking Stack enabled HostSwitch to get the best performance.  # noqa: E501

        :return: The cpu_config of this StandardHostSwitch.  # noqa: E501
        :rtype: list[CpuCoreConfigForEnhancedNetworkingStackSwitch]
        """
        return self._cpu_config

    @cpu_config.setter
    def cpu_config(self, cpu_config):
        """Sets the cpu_config of this StandardHostSwitch.

        CPU configuration specifies number of Logical cpu cores (Lcores) per Non Uniform Memory Access (NUMA) node dedicated to Enhanced Networking Stack enabled HostSwitch to get the best performance.  # noqa: E501

        :param cpu_config: The cpu_config of this StandardHostSwitch.  # noqa: E501
        :type: list[CpuCoreConfigForEnhancedNetworkingStackSwitch]
        """

        self._cpu_config = cpu_config

    @property
    def is_migrate_pnics(self):
        """Gets the is_migrate_pnics of this StandardHostSwitch.  # noqa: E501

        If the pnics specified in the pnics field are used by a single Vsphere Standard Switch or DVS, then migrate the pnics to N-VDS. If any two pnics are not used by the same Vsphere Standard Switch or DVS, it is not supported. In such cases, please migrate them in multiple steps, one Vsphere Standard Switch or DVS at a time.  # noqa: E501

        :return: The is_migrate_pnics of this StandardHostSwitch.  # noqa: E501
        :rtype: bool
        """
        return self._is_migrate_pnics

    @is_migrate_pnics.setter
    def is_migrate_pnics(self, is_migrate_pnics):
        """Sets the is_migrate_pnics of this StandardHostSwitch.

        If the pnics specified in the pnics field are used by a single Vsphere Standard Switch or DVS, then migrate the pnics to N-VDS. If any two pnics are not used by the same Vsphere Standard Switch or DVS, it is not supported. In such cases, please migrate them in multiple steps, one Vsphere Standard Switch or DVS at a time.  # noqa: E501

        :param is_migrate_pnics: The is_migrate_pnics of this StandardHostSwitch.  # noqa: E501
        :type: bool
        """

        self._is_migrate_pnics = is_migrate_pnics

    @property
    def vmk_uninstall_migration(self):
        """Gets the vmk_uninstall_migration of this StandardHostSwitch.  # noqa: E501

        The vmk interfaces and the associated portgroups on the VSS/DVS. This field is realized on the host during transport node deletion or NSX uninstallation to specify the destination for all vmks on N-VDS switches.  # noqa: E501

        :return: The vmk_uninstall_migration of this StandardHostSwitch.  # noqa: E501
        :rtype: list[VmknicNetwork]
        """
        return self._vmk_uninstall_migration

    @vmk_uninstall_migration.setter
    def vmk_uninstall_migration(self, vmk_uninstall_migration):
        """Sets the vmk_uninstall_migration of this StandardHostSwitch.

        The vmk interfaces and the associated portgroups on the VSS/DVS. This field is realized on the host during transport node deletion or NSX uninstallation to specify the destination for all vmks on N-VDS switches.  # noqa: E501

        :param vmk_uninstall_migration: The vmk_uninstall_migration of this StandardHostSwitch.  # noqa: E501
        :type: list[VmknicNetwork]
        """

        self._vmk_uninstall_migration = vmk_uninstall_migration

    @property
    def pnics(self):
        """Gets the pnics of this StandardHostSwitch.  # noqa: E501

        Physical NICs connected to the host switch  # noqa: E501

        :return: The pnics of this StandardHostSwitch.  # noqa: E501
        :rtype: list[Pnic]
        """
        return self._pnics

    @pnics.setter
    def pnics(self, pnics):
        """Sets the pnics of this StandardHostSwitch.

        Physical NICs connected to the host switch  # noqa: E501

        :param pnics: The pnics of this StandardHostSwitch.  # noqa: E501
        :type: list[Pnic]
        """

        self._pnics = pnics

    @property
    def host_switch_name(self):
        """Gets the host_switch_name of this StandardHostSwitch.  # noqa: E501

        If this name is unset or empty then the default host switch name will be used. The name must be unique among all host switches specified in a given transport node; unset name, empty name and the default host switch name are considered the same in terms of uniqueness.  # noqa: E501

        :return: The host_switch_name of this StandardHostSwitch.  # noqa: E501
        :rtype: str
        """
        return self._host_switch_name

    @host_switch_name.setter
    def host_switch_name(self, host_switch_name):
        """Sets the host_switch_name of this StandardHostSwitch.

        If this name is unset or empty then the default host switch name will be used. The name must be unique among all host switches specified in a given transport node; unset name, empty name and the default host switch name are considered the same in terms of uniqueness.  # noqa: E501

        :param host_switch_name: The host_switch_name of this StandardHostSwitch.  # noqa: E501
        :type: str
        """

        self._host_switch_name = host_switch_name

    @property
    def vmk_install_migration(self):
        """Gets the vmk_install_migration of this StandardHostSwitch.  # noqa: E501

        The vmk interfaces and the associated logical switches on the host switch. The state of this field is realized on the transport node during creation and update.  # noqa: E501

        :return: The vmk_install_migration of this StandardHostSwitch.  # noqa: E501
        :rtype: list[VmknicNetwork]
        """
        return self._vmk_install_migration

    @vmk_install_migration.setter
    def vmk_install_migration(self, vmk_install_migration):
        """Sets the vmk_install_migration of this StandardHostSwitch.

        The vmk interfaces and the associated logical switches on the host switch. The state of this field is realized on the transport node during creation and update.  # noqa: E501

        :param vmk_install_migration: The vmk_install_migration of this StandardHostSwitch.  # noqa: E501
        :type: list[VmknicNetwork]
        """

        self._vmk_install_migration = vmk_install_migration

    @property
    def host_switch_profile_ids(self):
        """Gets the host_switch_profile_ids of this StandardHostSwitch.  # noqa: E501

        host switch profiles bound to this host switch. If a profile ID is not provided for any HostSwitchProfileType that is supported by the transport node, the corresponding default profile will be bound to the host switch.  # noqa: E501

        :return: The host_switch_profile_ids of this StandardHostSwitch.  # noqa: E501
        :rtype: list[HostSwitchProfileTypeIdEntry]
        """
        return self._host_switch_profile_ids

    @host_switch_profile_ids.setter
    def host_switch_profile_ids(self, host_switch_profile_ids):
        """Sets the host_switch_profile_ids of this StandardHostSwitch.

        host switch profiles bound to this host switch. If a profile ID is not provided for any HostSwitchProfileType that is supported by the transport node, the corresponding default profile will be bound to the host switch.  # noqa: E501

        :param host_switch_profile_ids: The host_switch_profile_ids of this StandardHostSwitch.  # noqa: E501
        :type: list[HostSwitchProfileTypeIdEntry]
        """

        self._host_switch_profile_ids = host_switch_profile_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StandardHostSwitch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StandardHostSwitch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
