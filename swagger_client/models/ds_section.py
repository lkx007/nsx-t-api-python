# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DSSection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system_owned': 'bool',
        'display_name': 'str',
        'description': 'str',
        'tags': 'list[Tag]',
        'create_user': 'str',
        'protection': 'str',
        'create_time': 'int',
        'last_modified_time': 'int',
        'last_modified_user': 'str',
        'id': 'str',
        'resource_type': 'str',
        'stateful': 'bool',
        'is_default': 'bool',
        'applied_tos': 'list[ResourceReference]',
        'rule_count': 'int',
        'section_type': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'system_owned': '_system_owned',
        'display_name': 'display_name',
        'description': 'description',
        'tags': 'tags',
        'create_user': '_create_user',
        'protection': '_protection',
        'create_time': '_create_time',
        'last_modified_time': '_last_modified_time',
        'last_modified_user': '_last_modified_user',
        'id': 'id',
        'resource_type': 'resource_type',
        'stateful': 'stateful',
        'is_default': 'is_default',
        'applied_tos': 'applied_tos',
        'rule_count': 'rule_count',
        'section_type': 'section_type'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, system_owned=None, display_name=None, description=None, tags=None, create_user=None, protection=None, create_time=None, last_modified_time=None, last_modified_user=None, id=None, resource_type=None, stateful=None, is_default=None, applied_tos=None, rule_count=None, section_type=None, *args, **kwargs):  # noqa: E501
        """DSSection - a model defined in Swagger"""  # noqa: E501
        self._system_owned = None
        self._display_name = None
        self._description = None
        self._tags = None
        self._create_user = None
        self._protection = None
        self._create_time = None
        self._last_modified_time = None
        self._last_modified_user = None
        self._id = None
        self._resource_type = None
        self._stateful = None
        self._is_default = None
        self._applied_tos = None
        self._rule_count = None
        self._section_type = None
        self.discriminator = None
        if system_owned is not None:
            self.system_owned = system_owned
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if create_user is not None:
            self.create_user = create_user
        if protection is not None:
            self.protection = protection
        if create_time is not None:
            self.create_time = create_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if last_modified_user is not None:
            self.last_modified_user = last_modified_user
        if id is not None:
            self.id = id
        if resource_type is not None:
            self.resource_type = resource_type
        self.stateful = stateful
        if is_default is not None:
            self.is_default = is_default
        if applied_tos is not None:
            self.applied_tos = applied_tos
        if rule_count is not None:
            self.rule_count = rule_count
        self.section_type = section_type
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def system_owned(self):
        """Gets the system_owned of this DSSection.  # noqa: E501

        Indicates system owned resource  # noqa: E501

        :return: The system_owned of this DSSection.  # noqa: E501
        :rtype: bool
        """
        return self._system_owned

    @system_owned.setter
    def system_owned(self, system_owned):
        """Sets the system_owned of this DSSection.

        Indicates system owned resource  # noqa: E501

        :param system_owned: The system_owned of this DSSection.  # noqa: E501
        :type: bool
        """

        self._system_owned = system_owned

    @property
    def display_name(self):
        """Gets the display_name of this DSSection.  # noqa: E501

        Defaults to ID if not set  # noqa: E501

        :return: The display_name of this DSSection.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DSSection.

        Defaults to ID if not set  # noqa: E501

        :param display_name: The display_name of this DSSection.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this DSSection.  # noqa: E501

        Description of this resource  # noqa: E501

        :return: The description of this DSSection.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DSSection.

        Description of this resource  # noqa: E501

        :param description: The description of this DSSection.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this DSSection.  # noqa: E501

        Opaque identifiers meaningful to the API user  # noqa: E501

        :return: The tags of this DSSection.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DSSection.

        Opaque identifiers meaningful to the API user  # noqa: E501

        :param tags: The tags of this DSSection.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def create_user(self):
        """Gets the create_user of this DSSection.  # noqa: E501

        ID of the user who created this resource  # noqa: E501

        :return: The create_user of this DSSection.  # noqa: E501
        :rtype: str
        """
        return self._create_user

    @create_user.setter
    def create_user(self, create_user):
        """Sets the create_user of this DSSection.

        ID of the user who created this resource  # noqa: E501

        :param create_user: The create_user of this DSSection.  # noqa: E501
        :type: str
        """

        self._create_user = create_user

    @property
    def protection(self):
        """Gets the protection of this DSSection.  # noqa: E501

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :return: The protection of this DSSection.  # noqa: E501
        :rtype: str
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this DSSection.

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :param protection: The protection of this DSSection.  # noqa: E501
        :type: str
        """

        self._protection = protection

    @property
    def create_time(self):
        """Gets the create_time of this DSSection.  # noqa: E501

        Timestamp of resource creation  # noqa: E501

        :return: The create_time of this DSSection.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this DSSection.

        Timestamp of resource creation  # noqa: E501

        :param create_time: The create_time of this DSSection.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this DSSection.  # noqa: E501

        Timestamp of last modification  # noqa: E501

        :return: The last_modified_time of this DSSection.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this DSSection.

        Timestamp of last modification  # noqa: E501

        :param last_modified_time: The last_modified_time of this DSSection.  # noqa: E501
        :type: int
        """

        self._last_modified_time = last_modified_time

    @property
    def last_modified_user(self):
        """Gets the last_modified_user of this DSSection.  # noqa: E501

        ID of the user who last modified this resource  # noqa: E501

        :return: The last_modified_user of this DSSection.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_user

    @last_modified_user.setter
    def last_modified_user(self, last_modified_user):
        """Sets the last_modified_user of this DSSection.

        ID of the user who last modified this resource  # noqa: E501

        :param last_modified_user: The last_modified_user of this DSSection.  # noqa: E501
        :type: str
        """

        self._last_modified_user = last_modified_user

    @property
    def id(self):
        """Gets the id of this DSSection.  # noqa: E501

        Unique identifier of this resource  # noqa: E501

        :return: The id of this DSSection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DSSection.

        Unique identifier of this resource  # noqa: E501

        :param id: The id of this DSSection.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resource_type(self):
        """Gets the resource_type of this DSSection.  # noqa: E501

        The type of this resource.  # noqa: E501

        :return: The resource_type of this DSSection.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this DSSection.

        The type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this DSSection.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def stateful(self):
        """Gets the stateful of this DSSection.  # noqa: E501

        Stateful or Stateless nature of distributed service section is enforced on all rules inside the section. Layer3 sections can be stateful or stateless. Layer2 sections can only be stateless.  # noqa: E501

        :return: The stateful of this DSSection.  # noqa: E501
        :rtype: bool
        """
        return self._stateful

    @stateful.setter
    def stateful(self, stateful):
        """Sets the stateful of this DSSection.

        Stateful or Stateless nature of distributed service section is enforced on all rules inside the section. Layer3 sections can be stateful or stateless. Layer2 sections can only be stateless.  # noqa: E501

        :param stateful: The stateful of this DSSection.  # noqa: E501
        :type: bool
        """
        if stateful is None:
            raise ValueError("Invalid value for `stateful`, must not be `None`")  # noqa: E501

        self._stateful = stateful

    @property
    def is_default(self):
        """Gets the is_default of this DSSection.  # noqa: E501

        It is a boolean flag which reflects whether a distributed service section is default section or not. Each Layer 3 and Layer 2 section will have at least and at most one default section.  # noqa: E501

        :return: The is_default of this DSSection.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this DSSection.

        It is a boolean flag which reflects whether a distributed service section is default section or not. Each Layer 3 and Layer 2 section will have at least and at most one default section.  # noqa: E501

        :param is_default: The is_default of this DSSection.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def applied_tos(self):
        """Gets the applied_tos of this DSSection.  # noqa: E501

        List of objects where the rules in this section will be enforced. This will take precedence over rule level appliedTo.  # noqa: E501

        :return: The applied_tos of this DSSection.  # noqa: E501
        :rtype: list[ResourceReference]
        """
        return self._applied_tos

    @applied_tos.setter
    def applied_tos(self, applied_tos):
        """Sets the applied_tos of this DSSection.

        List of objects where the rules in this section will be enforced. This will take precedence over rule level appliedTo.  # noqa: E501

        :param applied_tos: The applied_tos of this DSSection.  # noqa: E501
        :type: list[ResourceReference]
        """

        self._applied_tos = applied_tos

    @property
    def rule_count(self):
        """Gets the rule_count of this DSSection.  # noqa: E501

        Number of rules in this section.  # noqa: E501

        :return: The rule_count of this DSSection.  # noqa: E501
        :rtype: int
        """
        return self._rule_count

    @rule_count.setter
    def rule_count(self, rule_count):
        """Sets the rule_count of this DSSection.

        Number of rules in this section.  # noqa: E501

        :param rule_count: The rule_count of this DSSection.  # noqa: E501
        :type: int
        """

        self._rule_count = rule_count

    @property
    def section_type(self):
        """Gets the section_type of this DSSection.  # noqa: E501

        Type of the rules which a section can contain. Only homogeneous sections are supported.  # noqa: E501

        :return: The section_type of this DSSection.  # noqa: E501
        :rtype: str
        """
        return self._section_type

    @section_type.setter
    def section_type(self, section_type):
        """Sets the section_type of this DSSection.

        Type of the rules which a section can contain. Only homogeneous sections are supported.  # noqa: E501

        :param section_type: The section_type of this DSSection.  # noqa: E501
        :type: str
        """
        if section_type is None:
            raise ValueError("Invalid value for `section_type`, must not be `None`")  # noqa: E501
        allowed_values = ["LAYER2", "LAYER3", "L3REDIRECT"]  # noqa: E501
        if section_type not in allowed_values:
            raise ValueError(
                "Invalid value for `section_type` ({0}), must be one of {1}"  # noqa: E501
                .format(section_type, allowed_values)
            )

        self._section_type = section_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DSSection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DSSection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
