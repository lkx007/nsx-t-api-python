# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ManagementPlaneApiNsxComponentAdministrationApplianceManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_node_user_ssh_key_add_ssh_key(self, body, userid, **kwargs):  # noqa: E501
        """Add SSH public key to authorized_keys file for node user  # noqa: E501

        Add SSH public key to authorized_keys file for node user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_node_user_ssh_key_add_ssh_key(body, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SshKeyProperties body: (required)
        :param str userid: User id of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_node_user_ssh_key_add_ssh_key_with_http_info(body, userid, **kwargs)  # noqa: E501
        else:
            (data) = self.add_node_user_ssh_key_add_ssh_key_with_http_info(body, userid, **kwargs)  # noqa: E501
            return data

    def add_node_user_ssh_key_add_ssh_key_with_http_info(self, body, userid, **kwargs):  # noqa: E501
        """Add SSH public key to authorized_keys file for node user  # noqa: E501

        Add SSH public key to authorized_keys file for node user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_node_user_ssh_key_add_ssh_key_with_http_info(body, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SshKeyProperties body: (required)
        :param str userid: User id of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_node_user_ssh_key_add_ssh_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_node_user_ssh_key_add_ssh_key`")  # noqa: E501
        # verify the required parameter 'userid' is set
        if ('userid' not in params or
                params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `add_node_user_ssh_key_add_ssh_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'userid' in params:
            path_params['userid'] = params['userid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/users/{userid}/ssh-keys?action=add_ssh_key', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cancel_appliance_management_task_cancel(self, task_id, **kwargs):  # noqa: E501
        """Cancel specified task  # noqa: E501

        Cancel specified task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_appliance_management_task_cancel(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: ID of task to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cancel_appliance_management_task_cancel_with_http_info(task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_appliance_management_task_cancel_with_http_info(task_id, **kwargs)  # noqa: E501
            return data

    def cancel_appliance_management_task_cancel_with_http_info(self, task_id, **kwargs):  # noqa: E501
        """Cancel specified task  # noqa: E501

        Cancel specified task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cancel_appliance_management_task_cancel_with_http_info(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: ID of task to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_appliance_management_task_cancel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `cancel_appliance_management_task_cancel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task-id'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/tasks/{task-id}?action=cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def check_rabbit_mq_management_port(self, **kwargs):  # noqa: E501
        """Check if RabbitMQ management port is enabled or not  # noqa: E501

        Returns status as true if RabbitMQ management port is enabled else false  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_rabbit_mq_management_port(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PortStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.check_rabbit_mq_management_port_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.check_rabbit_mq_management_port_with_http_info(**kwargs)  # noqa: E501
            return data

    def check_rabbit_mq_management_port_with_http_info(self, **kwargs):  # noqa: E501
        """Check if RabbitMQ management port is enabled or not  # noqa: E501

        Returns status as true if RabbitMQ management port is enabled else false  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.check_rabbit_mq_management_port_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PortStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_rabbit_mq_management_port" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/rabbitmq-management-port', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collect_alarms(self, **kwargs):  # noqa: E501
        """Collect alarms from all NSX nodes  # noqa: E501

        This API is executed on a manager node to return current alarms from all NSX nodes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collect_alarms(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str fields: Fields to include in query results
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :return: AlarmListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collect_alarms_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.collect_alarms_with_http_info(**kwargs)  # noqa: E501
            return data

    def collect_alarms_with_http_info(self, **kwargs):  # noqa: E501
        """Collect alarms from all NSX nodes  # noqa: E501

        This API is executed on a manager node to return current alarms from all NSX nodes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collect_alarms_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str fields: Fields to include in query results
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :return: AlarmListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cursor', 'fields', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collect_alarms" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/hpm/alarms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlarmListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collect_audit_logs(self, body, **kwargs):  # noqa: E501
        """Collect audit logs from registered manager nodes  # noqa: E501

        This API is executed on a manager node to display audit logs from all nodes inside the management plane cluster. An audit log collection will be triggered if the local master audit log is outdated.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collect_audit_logs(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditLogRequest body: (required)
        :param int cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str fields: Fields to include in query results
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :return: AuditLogListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collect_audit_logs_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.collect_audit_logs_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def collect_audit_logs_with_http_info(self, body, **kwargs):  # noqa: E501
        """Collect audit logs from registered manager nodes  # noqa: E501

        This API is executed on a manager node to display audit logs from all nodes inside the management plane cluster. An audit log collection will be triggered if the local master audit log is outdated.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collect_audit_logs_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AuditLogRequest body: (required)
        :param int cursor: Opaque cursor to be used for getting next page of records (supplied by current result page)
        :param str fields: Fields to include in query results
        :param int page_size: Maximum number of results to return in this page (server may return fewer)
        :return: AuditLogListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cursor', 'fields', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collect_audit_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `collect_audit_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cursor' in params:
            query_params.append(('cursor', params['cursor']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/administration/audit-logs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuditLogListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collect_support_bundles_collect(self, body, **kwargs):  # noqa: E501
        """Collect support bundles from registered cluster and fabric nodes  # noqa: E501

        Collect support bundles from registered cluster and fabric nodes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collect_support_bundles_collect(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportBundleRequest body: (required)
        :param bool override_async_response: Override any existing support bundle async response
        :param bool require_delete_or_override_async_response: Suppress auto-deletion of generated support bundle
        :return: SupportBundleResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collect_support_bundles_collect_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.collect_support_bundles_collect_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def collect_support_bundles_collect_with_http_info(self, body, **kwargs):  # noqa: E501
        """Collect support bundles from registered cluster and fabric nodes  # noqa: E501

        Collect support bundles from registered cluster and fabric nodes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collect_support_bundles_collect_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SupportBundleRequest body: (required)
        :param bool override_async_response: Override any existing support bundle async response
        :param bool require_delete_or_override_async_response: Suppress auto-deletion of generated support bundle
        :return: SupportBundleResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'override_async_response', 'require_delete_or_override_async_response']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collect_support_bundles_collect" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `collect_support_bundles_collect`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'override_async_response' in params:
            query_params.append(('override_async_response', params['override_async_response']))  # noqa: E501
        if 'require_delete_or_override_async_response' in params:
            query_params.append(('require_delete_or_override_async_response', params['require_delete_or_override_async_response']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/administration/support-bundles?action=collect', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SupportBundleResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def copy_from_remote_file_copy_from_remote_file(self, body, file_name, **kwargs):  # noqa: E501
        """Copy a remote file to the file store  # noqa: E501

        Copy a remote file to the file store. If you use scp or sftp, you must provide the remote server's SSH fingerprint. See the <i>NSX-T Administration Guide</i> for information and instructions about finding the SSH fingerprint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_from_remote_file_copy_from_remote_file(body, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CopyFromRemoteFileProperties body: (required)
        :param str file_name: Destination filename (required)
        :return: FileProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.copy_from_remote_file_copy_from_remote_file_with_http_info(body, file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_from_remote_file_copy_from_remote_file_with_http_info(body, file_name, **kwargs)  # noqa: E501
            return data

    def copy_from_remote_file_copy_from_remote_file_with_http_info(self, body, file_name, **kwargs):  # noqa: E501
        """Copy a remote file to the file store  # noqa: E501

        Copy a remote file to the file store. If you use scp or sftp, you must provide the remote server's SSH fingerprint. See the <i>NSX-T Administration Guide</i> for information and instructions about finding the SSH fingerprint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_from_remote_file_copy_from_remote_file_with_http_info(body, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CopyFromRemoteFileProperties body: (required)
        :param str file_name: Destination filename (required)
        :return: FileProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'file_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_from_remote_file_copy_from_remote_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `copy_from_remote_file_copy_from_remote_file`")  # noqa: E501
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `copy_from_remote_file_copy_from_remote_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_name' in params:
            path_params['file-name'] = params['file_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/file-store/{file-name}?action=copy_from_remote_file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def copy_to_remote_file_copy_to_remote_file(self, body, file_name, **kwargs):  # noqa: E501
        """Copy file in the file store to a remote file store  # noqa: E501

        Copy a file in the file store to a remote server. If you use scp or sftp, you must provide the remote server's SSH fingerprint. See the <i>NSX-T Administration Guide</i> for information and instructions about finding the SSH fingerprint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_to_remote_file_copy_to_remote_file(body, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CopyToRemoteFileProperties body: (required)
        :param str file_name: Destination filename (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.copy_to_remote_file_copy_to_remote_file_with_http_info(body, file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_to_remote_file_copy_to_remote_file_with_http_info(body, file_name, **kwargs)  # noqa: E501
            return data

    def copy_to_remote_file_copy_to_remote_file_with_http_info(self, body, file_name, **kwargs):  # noqa: E501
        """Copy file in the file store to a remote file store  # noqa: E501

        Copy a file in the file store to a remote server. If you use scp or sftp, you must provide the remote server's SSH fingerprint. See the <i>NSX-T Administration Guide</i> for information and instructions about finding the SSH fingerprint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_to_remote_file_copy_to_remote_file_with_http_info(body, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CopyToRemoteFileProperties body: (required)
        :param str file_name: Destination filename (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'file_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_to_remote_file_copy_to_remote_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `copy_to_remote_file_copy_to_remote_file`")  # noqa: E501
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `copy_to_remote_file_copy_to_remote_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_name' in params:
            path_params['file-name'] = params['file_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/file-store/{file-name}?action=copy_to_remote_file', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_appliance_management_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart the node management service  # noqa: E501

        Restart the node management service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_appliance_management_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_appliance_management_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_appliance_management_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_appliance_management_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart the node management service  # noqa: E501

        Restart the node management service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_appliance_management_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_appliance_management_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/node-mgmt?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_cluster_boot_manager_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop the cluster boot manager service  # noqa: E501

        Restart, start or stop the cluster boot manager service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cluster_boot_manager_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_cluster_boot_manager_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_cluster_boot_manager_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_cluster_boot_manager_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the cluster boot manager service  # noqa: E501

        Restart, start or stop the cluster boot manager service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cluster_boot_manager_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cluster_boot_manager_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/cluster_manager?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_cluster_boot_manager_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop the cluster boot manager service  # noqa: E501

        Restart, start or stop the cluster boot manager service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cluster_boot_manager_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_cluster_boot_manager_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_cluster_boot_manager_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_cluster_boot_manager_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the cluster boot manager service  # noqa: E501

        Restart, start or stop the cluster boot manager service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cluster_boot_manager_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cluster_boot_manager_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/cluster_manager?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_cluster_boot_manager_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop the cluster boot manager service  # noqa: E501

        Restart, start or stop the cluster boot manager service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cluster_boot_manager_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_cluster_boot_manager_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_cluster_boot_manager_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_cluster_boot_manager_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the cluster boot manager service  # noqa: E501

        Restart, start or stop the cluster boot manager service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cluster_boot_manager_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cluster_boot_manager_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/cluster_manager?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_cminventory_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop the manager service  # noqa: E501

        Restart, start or stop the manager service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cminventory_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_cminventory_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_cminventory_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_cminventory_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the manager service  # noqa: E501

        Restart, start or stop the manager service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cminventory_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cminventory_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/cm-inventory?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_cminventory_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop the manager service  # noqa: E501

        Restart, start or stop the manager service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cminventory_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_cminventory_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_cminventory_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_cminventory_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the manager service  # noqa: E501

        Restart, start or stop the manager service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cminventory_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cminventory_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/cm-inventory?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_cminventory_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop the manager service  # noqa: E501

        Restart, start or stop the manager service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cminventory_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_cminventory_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_cminventory_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_cminventory_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the manager service  # noqa: E501

        Restart, start or stop the manager service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_cminventory_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_cminventory_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/cm-inventory?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_controller_server_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop the controller service  # noqa: E501

        Restart, start or stop the controller service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_controller_server_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_controller_server_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_controller_server_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_controller_server_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the controller service  # noqa: E501

        Restart, start or stop the controller service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_controller_server_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_controller_server_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/controller?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_controller_server_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop the controller service  # noqa: E501

        Restart, start or stop the controller service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_controller_server_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_controller_server_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_controller_server_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_controller_server_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the controller service  # noqa: E501

        Restart, start or stop the controller service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_controller_server_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_controller_server_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/controller?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_controller_server_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop the controller service  # noqa: E501

        Restart, start or stop the controller service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_controller_server_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_controller_server_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_controller_server_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_controller_server_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the controller service  # noqa: E501

        Restart, start or stop the controller service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_controller_server_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_controller_server_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/controller?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_file(self, file_name, **kwargs):  # noqa: E501
        """Upload a file to the file store  # noqa: E501

        When you issue this API, the client must specify: - HTTP header Content-Type:application/octet-stream. - Request body with the contents of the file in the filestore. In the CLI, you can view the filestore with the <em>get files</em> command.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_file(file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: Destination filename (required)
        :return: FileProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_file_with_http_info(file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_file_with_http_info(file_name, **kwargs)  # noqa: E501
            return data

    def create_file_with_http_info(self, file_name, **kwargs):  # noqa: E501
        """Upload a file to the file store  # noqa: E501

        When you issue this API, the client must specify: - HTTP header Content-Type:application/octet-stream. - Request body with the contents of the file in the filestore. In the CLI, you can view the filestore with the <em>get files</em> command.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_file_with_http_info(file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: Destination filename (required)
        :return: FileProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `create_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_name' in params:
            path_params['file-name'] = params['file_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/file-store/{file-name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_liagent_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop the liagent service  # noqa: E501

        Restart, start or stop the liagent service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_liagent_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_liagent_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_liagent_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_liagent_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the liagent service  # noqa: E501

        Restart, start or stop the liagent service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_liagent_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_liagent_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/liagent?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_liagent_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop the liagent service  # noqa: E501

        Restart, start or stop the liagent service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_liagent_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_liagent_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_liagent_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_liagent_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the liagent service  # noqa: E501

        Restart, start or stop the liagent service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_liagent_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_liagent_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/liagent?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_liagent_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop the liagent service  # noqa: E501

        Restart, start or stop the liagent service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_liagent_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_liagent_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_liagent_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_liagent_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the liagent service  # noqa: E501

        Restart, start or stop the liagent service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_liagent_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_liagent_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/liagent?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_migration_coordinator_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop the migration coordinator service  # noqa: E501

        Restart, start or stop the migration coordinator service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_migration_coordinator_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_migration_coordinator_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_migration_coordinator_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_migration_coordinator_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the migration coordinator service  # noqa: E501

        Restart, start or stop the migration coordinator service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_migration_coordinator_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_migration_coordinator_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/migration-coordinator?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_migration_coordinator_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop the migration coordinator service  # noqa: E501

        Restart, start or stop the migration coordinator service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_migration_coordinator_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_migration_coordinator_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_migration_coordinator_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_migration_coordinator_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the migration coordinator service  # noqa: E501

        Restart, start or stop the migration coordinator service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_migration_coordinator_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_migration_coordinator_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/migration-coordinator?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_migration_coordinator_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop the migration coordinator service  # noqa: E501

        Restart, start or stop the migration coordinator service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_migration_coordinator_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_migration_coordinator_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_migration_coordinator_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_migration_coordinator_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the migration coordinator service  # noqa: E501

        Restart, start or stop the migration coordinator service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_migration_coordinator_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_migration_coordinator_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/migration-coordinator?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_node_network_route(self, body, **kwargs):  # noqa: E501
        """Create node network route  # noqa: E501

        Add a route to the NSX Manager routing table. For static routes, the route_type, interface_id, netmask, and destination are required parameters. For default routes, the route_type, gateway address, and interface_id are required. For blackhole routes, the route_type and destination are required. All other parameters are optional. When you add a static route, the scope and route_id are created automatically. When you add a default or blackhole route, the route_id is created automatically. The route_id is read-only, meaning that it cannot be modified. All other properties can be modified by deleting and readding the route.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_node_network_route(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeRouteProperties body: (required)
        :return: NodeRouteProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_node_network_route_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_node_network_route_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_node_network_route_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create node network route  # noqa: E501

        Add a route to the NSX Manager routing table. For static routes, the route_type, interface_id, netmask, and destination are required parameters. For default routes, the route_type, gateway address, and interface_id are required. For blackhole routes, the route_type and destination are required. All other parameters are optional. When you add a static route, the scope and route_id are created automatically. When you add a default or blackhole route, the route_id is created automatically. The route_id is read-only, meaning that it cannot be modified. All other properties can be modified by deleting and readding the route.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_node_network_route_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeRouteProperties body: (required)
        :return: NodeRouteProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_node_network_route" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_node_network_route`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/network/routes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeRouteProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_node_stats_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX node-stats service  # noqa: E501

        Restart, start or stop the NSX node-stats service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_node_stats_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_node_stats_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_node_stats_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_node_stats_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX node-stats service  # noqa: E501

        Restart, start or stop the NSX node-stats service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_node_stats_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_node_stats_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/node-stats?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_node_stats_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX node-stats service  # noqa: E501

        Restart, start or stop the NSX node-stats service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_node_stats_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_node_stats_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_node_stats_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_node_stats_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX node-stats service  # noqa: E501

        Restart, start or stop the NSX node-stats service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_node_stats_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_node_stats_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/node-stats?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_node_stats_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX node-stats service  # noqa: E501

        Restart, start or stop the NSX node-stats service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_node_stats_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_node_stats_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_node_stats_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_node_stats_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX node-stats service  # noqa: E501

        Restart, start or stop the NSX node-stats service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_node_stats_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_node_stats_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/node-stats?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_nsx_message_bus_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX Message Bus service  # noqa: E501

        Restart, start or stop the NSX Message Bus service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_message_bus_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_nsx_message_bus_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_nsx_message_bus_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_nsx_message_bus_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX Message Bus service  # noqa: E501

        Restart, start or stop the NSX Message Bus service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_message_bus_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_nsx_message_bus_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/nsx-message-bus?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_nsx_message_bus_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX Message Bus service  # noqa: E501

        Restart, start or stop the NSX Message Bus service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_message_bus_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_nsx_message_bus_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_nsx_message_bus_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_nsx_message_bus_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX Message Bus service  # noqa: E501

        Restart, start or stop the NSX Message Bus service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_message_bus_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_nsx_message_bus_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/nsx-message-bus?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_nsx_message_bus_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX Message Bus service  # noqa: E501

        Restart, start or stop the NSX Message Bus service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_message_bus_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_nsx_message_bus_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_nsx_message_bus_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_nsx_message_bus_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX Message Bus service  # noqa: E501

        Restart, start or stop the NSX Message Bus service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_message_bus_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_nsx_message_bus_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/nsx-message-bus?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_nsx_ui_service_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, Start and Stop the ui service  # noqa: E501

        Restart, Start and Stop the ui service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_ui_service_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_nsx_ui_service_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_nsx_ui_service_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_nsx_ui_service_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, Start and Stop the ui service  # noqa: E501

        Restart, Start and Stop the ui service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_ui_service_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_nsx_ui_service_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ui-service?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_nsx_ui_service_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, Start and Stop the ui service  # noqa: E501

        Restart, Start and Stop the ui service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_ui_service_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_nsx_ui_service_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_nsx_ui_service_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_nsx_ui_service_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, Start and Stop the ui service  # noqa: E501

        Restart, Start and Stop the ui service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_ui_service_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_nsx_ui_service_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ui-service?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_nsx_ui_service_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, Start and Stop the ui service  # noqa: E501

        Restart, Start and Stop the ui service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_ui_service_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_nsx_ui_service_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_nsx_ui_service_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_nsx_ui_service_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, Start and Stop the ui service  # noqa: E501

        Restart, Start and Stop the ui service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_ui_service_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_nsx_ui_service_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ui-service?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_nsx_upgrade_agent_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX upgrade agent service  # noqa: E501

        Restart, start or stop the NSX upgrade agent service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_upgrade_agent_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_nsx_upgrade_agent_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_nsx_upgrade_agent_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_nsx_upgrade_agent_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX upgrade agent service  # noqa: E501

        Restart, start or stop the NSX upgrade agent service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_upgrade_agent_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_nsx_upgrade_agent_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/nsx-upgrade-agent?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_nsx_upgrade_agent_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX upgrade agent service  # noqa: E501

        Restart, start or stop the NSX upgrade agent service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_upgrade_agent_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_nsx_upgrade_agent_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_nsx_upgrade_agent_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_nsx_upgrade_agent_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX upgrade agent service  # noqa: E501

        Restart, start or stop the NSX upgrade agent service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_upgrade_agent_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_nsx_upgrade_agent_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/nsx-upgrade-agent?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_nsx_upgrade_agent_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX upgrade agent service  # noqa: E501

        Restart, start or stop the NSX upgrade agent service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_upgrade_agent_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_nsx_upgrade_agent_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_nsx_upgrade_agent_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_nsx_upgrade_agent_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX upgrade agent service  # noqa: E501

        Restart, start or stop the NSX upgrade agent service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_nsx_upgrade_agent_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_nsx_upgrade_agent_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/nsx-upgrade-agent?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ntp_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NTP service  # noqa: E501

        Restart, start or stop the NTP service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ntp_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ntp_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_ntp_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_ntp_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NTP service  # noqa: E501

        Restart, start or stop the NTP service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ntp_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ntp_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ntp?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ntp_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NTP service  # noqa: E501

        Restart, start or stop the NTP service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ntp_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ntp_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_ntp_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_ntp_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NTP service  # noqa: E501

        Restart, start or stop the NTP service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ntp_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ntp_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ntp?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ntp_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NTP service  # noqa: E501

        Restart, start or stop the NTP service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ntp_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ntp_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_ntp_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_ntp_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NTP service  # noqa: E501

        Restart, start or stop the NTP service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ntp_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ntp_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ntp?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_phonehome_coordinator_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop Telemetry service  # noqa: E501

        Restart, start or stop Telemetry service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_phonehome_coordinator_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_phonehome_coordinator_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_phonehome_coordinator_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_phonehome_coordinator_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop Telemetry service  # noqa: E501

        Restart, start or stop Telemetry service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_phonehome_coordinator_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_phonehome_coordinator_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/telemetry?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_phonehome_coordinator_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop Telemetry service  # noqa: E501

        Restart, start or stop Telemetry service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_phonehome_coordinator_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_phonehome_coordinator_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_phonehome_coordinator_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_phonehome_coordinator_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop Telemetry service  # noqa: E501

        Restart, start or stop Telemetry service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_phonehome_coordinator_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_phonehome_coordinator_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/telemetry?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_phonehome_coordinator_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop Telemetry service  # noqa: E501

        Restart, start or stop Telemetry service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_phonehome_coordinator_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_phonehome_coordinator_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_phonehome_coordinator_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_phonehome_coordinator_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop Telemetry service  # noqa: E501

        Restart, start or stop Telemetry service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_phonehome_coordinator_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_phonehome_coordinator_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/telemetry?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_platform_client_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX Platform Client service  # noqa: E501

        Restart, start or stop the NSX Platform Client service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_platform_client_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_platform_client_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_platform_client_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_platform_client_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX Platform Client service  # noqa: E501

        Restart, start or stop the NSX Platform Client service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_platform_client_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_platform_client_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/nsx-platform-client?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_platform_client_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX Platform Client service  # noqa: E501

        Restart, start or stop the NSX Platform Client service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_platform_client_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_platform_client_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_platform_client_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_platform_client_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX Platform Client service  # noqa: E501

        Restart, start or stop the NSX Platform Client service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_platform_client_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_platform_client_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/nsx-platform-client?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_platform_client_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX Platform Client service  # noqa: E501

        Restart, start or stop the NSX Platform Client service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_platform_client_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_platform_client_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_platform_client_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_platform_client_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX Platform Client service  # noqa: E501

        Restart, start or stop the NSX Platform Client service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_platform_client_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_platform_client_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/nsx-platform-client?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_policy_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop the service  # noqa: E501

        Restart, start or stop the service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_policy_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_policy_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_policy_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_policy_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the service  # noqa: E501

        Restart, start or stop the service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_policy_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_policy_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/policy?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_policy_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop the service  # noqa: E501

        Restart, start or stop the service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_policy_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_policy_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_policy_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_policy_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the service  # noqa: E501

        Restart, start or stop the service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_policy_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_policy_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/policy?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_policy_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop the service  # noqa: E501

        Restart, start or stop the service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_policy_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_policy_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_policy_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_policy_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the service  # noqa: E501

        Restart, start or stop the service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_policy_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_policy_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/policy?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_proton_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop the service  # noqa: E501

        Restart, start or stop the service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_proton_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_proton_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_proton_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_proton_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the service  # noqa: E501

        Restart, start or stop the service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_proton_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_proton_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/manager?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_proton_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop the service  # noqa: E501

        Restart, start or stop the service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_proton_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_proton_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_proton_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_proton_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the service  # noqa: E501

        Restart, start or stop the service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_proton_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_proton_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/manager?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_proton_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop the service  # noqa: E501

        Restart, start or stop the service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_proton_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_proton_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_proton_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_proton_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the service  # noqa: E501

        Restart, start or stop the service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_proton_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_proton_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/manager?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_proxy_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart the http service  # noqa: E501

        Restart the http service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_proxy_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_proxy_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_proxy_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_proxy_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart the http service  # noqa: E501

        Restart the http service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_proxy_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_proxy_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/http?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_proxy_service_action_start(self, **kwargs):  # noqa: E501
        """Start the http service  # noqa: E501

        Start the http service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_proxy_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_proxy_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_proxy_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_proxy_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Start the http service  # noqa: E501

        Start the http service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_proxy_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_proxy_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/http?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_proxy_service_action_stop(self, **kwargs):  # noqa: E501
        """Stop the http service  # noqa: E501

        Stop the http service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_proxy_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_proxy_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_proxy_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_proxy_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Stop the http service  # noqa: E501

        Stop the http service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_proxy_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_proxy_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/http?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_proxy_service_apply_certificate_action_apply_certificate(self, certificate_id, **kwargs):  # noqa: E501
        """Update http service certificate  # noqa: E501

        Applies a security certificate to the http service. In the POST request, the CERTIFICATE_ID references a certificate created with the /api/v1/trust-management APIs. Issuing this request causes the http service to restart so that the service can begin using the new certificate. When the POST request succeeds, it doesn't return a valid response. The request times out because of the restart.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_proxy_service_apply_certificate_action_apply_certificate(certificate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str certificate_id: Certificate ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_proxy_service_apply_certificate_action_apply_certificate_with_http_info(certificate_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_proxy_service_apply_certificate_action_apply_certificate_with_http_info(certificate_id, **kwargs)  # noqa: E501
            return data

    def create_proxy_service_apply_certificate_action_apply_certificate_with_http_info(self, certificate_id, **kwargs):  # noqa: E501
        """Update http service certificate  # noqa: E501

        Applies a security certificate to the http service. In the POST request, the CERTIFICATE_ID references a certificate created with the /api/v1/trust-management APIs. Issuing this request causes the http service to restart so that the service can begin using the new certificate. When the POST request succeeds, it doesn't return a valid response. The request times out because of the restart.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_proxy_service_apply_certificate_action_apply_certificate_with_http_info(certificate_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str certificate_id: Certificate ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['certificate_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_proxy_service_apply_certificate_action_apply_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'certificate_id' is set
        if ('certificate_id' not in params or
                params['certificate_id'] is None):
            raise ValueError("Missing the required parameter `certificate_id` when calling `create_proxy_service_apply_certificate_action_apply_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'certificate_id' in params:
            query_params.append(('certificate_id', params['certificate_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/http?action=apply_certificate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_rabbit_mq_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop the Rabbit MQ service  # noqa: E501

        Restart, start or stop the Rabbit MQ service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_rabbit_mq_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_rabbit_mq_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_rabbit_mq_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_rabbit_mq_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the Rabbit MQ service  # noqa: E501

        Restart, start or stop the Rabbit MQ service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_rabbit_mq_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_rabbit_mq_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/mgmt-plane-bus?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_rabbit_mq_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop the Rabbit MQ service  # noqa: E501

        Restart, start or stop the Rabbit MQ service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_rabbit_mq_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_rabbit_mq_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_rabbit_mq_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_rabbit_mq_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the Rabbit MQ service  # noqa: E501

        Restart, start or stop the Rabbit MQ service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_rabbit_mq_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_rabbit_mq_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/mgmt-plane-bus?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_rabbit_mq_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop the Rabbit MQ service  # noqa: E501

        Restart, start or stop the Rabbit MQ service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_rabbit_mq_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_rabbit_mq_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_rabbit_mq_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_rabbit_mq_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the Rabbit MQ service  # noqa: E501

        Restart, start or stop the Rabbit MQ service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_rabbit_mq_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_rabbit_mq_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/mgmt-plane-bus?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_remote_directory_create_remote_directory(self, body, **kwargs):  # noqa: E501
        """Create directory in remote file server  # noqa: E501

        Create a directory on the remote remote server. Supports only SFTP. You must provide the remote server's SSH fingerprint. See the <i>NSX Administration Guide</i> for information and instructions about finding the SSH fingerprint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_remote_directory_create_remote_directory(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateRemoteDirectoryProperties body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_remote_directory_create_remote_directory_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_remote_directory_create_remote_directory_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_remote_directory_create_remote_directory_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create directory in remote file server  # noqa: E501

        Create a directory on the remote remote server. Supports only SFTP. You must provide the remote server's SSH fingerprint. See the <i>NSX Administration Guide</i> for information and instructions about finding the SSH fingerprint.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_remote_directory_create_remote_directory_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateRemoteDirectoryProperties body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_remote_directory_create_remote_directory" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_remote_directory_create_remote_directory`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/file-store?action=create_remote_directory', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_repository_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX install-upgrade service  # noqa: E501

        Restart, start or stop the NSX install-upgrade service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_repository_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX install-upgrade service  # noqa: E501

        Restart, start or stop the NSX install-upgrade service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/install-upgrade?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_repository_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX install-upgrade service  # noqa: E501

        Restart, start or stop the NSX install-upgrade service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_repository_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX install-upgrade service  # noqa: E501

        Restart, start or stop the NSX install-upgrade service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/install-upgrade?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_repository_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX install-upgrade service  # noqa: E501

        Restart, start or stop the NSX install-upgrade service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_repository_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_repository_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_repository_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX install-upgrade service  # noqa: E501

        Restart, start or stop the NSX install-upgrade service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_repository_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_repository_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/install-upgrade?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_search_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX Search service  # noqa: E501

        Restart, start or stop the NSX Search service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_search_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_search_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_search_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_search_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX Search service  # noqa: E501

        Restart, start or stop the NSX Search service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_search_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_search_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/search?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_search_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX Search service  # noqa: E501

        Restart, start or stop the NSX Search service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_search_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_search_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_search_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_search_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX Search service  # noqa: E501

        Restart, start or stop the NSX Search service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_search_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_search_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/search?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_search_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX Search service  # noqa: E501

        Restart, start or stop the NSX Search service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_search_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_search_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_search_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_search_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the NSX Search service  # noqa: E501

        Restart, start or stop the NSX Search service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_search_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_search_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/search?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_snmp_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop the SNMP service  # noqa: E501

        Restart, start or stop the SNMP service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_snmp_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_snmp_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_snmp_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_snmp_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the SNMP service  # noqa: E501

        Restart, start or stop the SNMP service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_snmp_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_snmp_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/snmp?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_snmp_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop the SNMP service  # noqa: E501

        Restart, start or stop the SNMP service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_snmp_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_snmp_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_snmp_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_snmp_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the SNMP service  # noqa: E501

        Restart, start or stop the SNMP service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_snmp_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_snmp_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/snmp?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_snmp_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop the SNMP service  # noqa: E501

        Restart, start or stop the SNMP service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_snmp_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_snmp_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_snmp_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_snmp_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the SNMP service  # noqa: E501

        Restart, start or stop the SNMP service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_snmp_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_snmp_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/snmp?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ssh_service_action_notify_mpa_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop the ssh service  # noqa: E501

        Restart, start or stop the ssh service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ssh_service_action_notify_mpa_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ssh_service_action_notify_mpa_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_ssh_service_action_notify_mpa_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_ssh_service_action_notify_mpa_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the ssh service  # noqa: E501

        Restart, start or stop the ssh service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ssh_service_action_notify_mpa_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ssh_service_action_notify_mpa_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ssh/notify_mpa?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ssh_service_action_notify_mpa_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop the ssh service  # noqa: E501

        Restart, start or stop the ssh service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ssh_service_action_notify_mpa_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ssh_service_action_notify_mpa_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_ssh_service_action_notify_mpa_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_ssh_service_action_notify_mpa_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the ssh service  # noqa: E501

        Restart, start or stop the ssh service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ssh_service_action_notify_mpa_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ssh_service_action_notify_mpa_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ssh/notify_mpa?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ssh_service_action_notify_mpa_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop the ssh service  # noqa: E501

        Restart, start or stop the ssh service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ssh_service_action_notify_mpa_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ssh_service_action_notify_mpa_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_ssh_service_action_notify_mpa_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_ssh_service_action_notify_mpa_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the ssh service  # noqa: E501

        Restart, start or stop the ssh service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ssh_service_action_notify_mpa_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ssh_service_action_notify_mpa_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ssh/notify_mpa?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ssh_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop the ssh service  # noqa: E501

        Restart, start or stop the ssh service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ssh_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ssh_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_ssh_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_ssh_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the ssh service  # noqa: E501

        Restart, start or stop the ssh service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ssh_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ssh_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ssh?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ssh_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop the ssh service  # noqa: E501

        Restart, start or stop the ssh service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ssh_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ssh_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_ssh_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_ssh_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the ssh service  # noqa: E501

        Restart, start or stop the ssh service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ssh_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ssh_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ssh?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ssh_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop the ssh service  # noqa: E501

        Restart, start or stop the ssh service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ssh_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ssh_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_ssh_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_ssh_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the ssh service  # noqa: E501

        Restart, start or stop the ssh service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ssh_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ssh_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ssh?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_ssh_service_remove_host_fingerprint_action_remove_host_fingerprint(self, body, **kwargs):  # noqa: E501
        """Remove a host's fingerprint from known hosts file  # noqa: E501

        Remove a host's fingerprint from known hosts file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ssh_service_remove_host_fingerprint_action_remove_host_fingerprint(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KnownHostParameter body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ssh_service_remove_host_fingerprint_action_remove_host_fingerprint_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ssh_service_remove_host_fingerprint_action_remove_host_fingerprint_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_ssh_service_remove_host_fingerprint_action_remove_host_fingerprint_with_http_info(self, body, **kwargs):  # noqa: E501
        """Remove a host's fingerprint from known hosts file  # noqa: E501

        Remove a host's fingerprint from known hosts file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ssh_service_remove_host_fingerprint_action_remove_host_fingerprint_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param KnownHostParameter body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ssh_service_remove_host_fingerprint_action_remove_host_fingerprint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_ssh_service_remove_host_fingerprint_action_remove_host_fingerprint`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ssh?action=remove_host_fingerprint', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_syslog_service_action_restart(self, **kwargs):  # noqa: E501
        """Restart, start or stop the syslog service  # noqa: E501

        Restart, start or stop the syslog service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_syslog_service_action_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_syslog_service_action_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_syslog_service_action_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_syslog_service_action_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the syslog service  # noqa: E501

        Restart, start or stop the syslog service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_syslog_service_action_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_syslog_service_action_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_syslog_service_action_start(self, **kwargs):  # noqa: E501
        """Restart, start or stop the syslog service  # noqa: E501

        Restart, start or stop the syslog service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_syslog_service_action_start(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_syslog_service_action_start_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_syslog_service_action_start_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_syslog_service_action_start_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the syslog service  # noqa: E501

        Restart, start or stop the syslog service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_syslog_service_action_start_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_syslog_service_action_start" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog?action=start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_syslog_service_action_stop(self, **kwargs):  # noqa: E501
        """Restart, start or stop the syslog service  # noqa: E501

        Restart, start or stop the syslog service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_syslog_service_action_stop(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_syslog_service_action_stop_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_syslog_service_action_stop_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_syslog_service_action_stop_with_http_info(self, **kwargs):  # noqa: E501
        """Restart, start or stop the syslog service  # noqa: E501

        Restart, start or stop the syslog service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_syslog_service_action_stop_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_syslog_service_action_stop" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog?action=stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def d_elete_rabbit_mq_management_port(self, **kwargs):  # noqa: E501
        """Delete RabbitMQ management port  # noqa: E501

        Delete RabbitMQ management port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_elete_rabbit_mq_management_port(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.d_elete_rabbit_mq_management_port_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.d_elete_rabbit_mq_management_port_with_http_info(**kwargs)  # noqa: E501
            return data

    def d_elete_rabbit_mq_management_port_with_http_info(self, **kwargs):  # noqa: E501
        """Delete RabbitMQ management port  # noqa: E501

        Delete RabbitMQ management port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_elete_rabbit_mq_management_port_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method d_elete_rabbit_mq_management_port" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/rabbitmq-management-port', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_appliance_management_task(self, task_id, **kwargs):  # noqa: E501
        """Delete task  # noqa: E501

        Delete task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_appliance_management_task(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: ID of task to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_appliance_management_task_with_http_info(task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_appliance_management_task_with_http_info(task_id, **kwargs)  # noqa: E501
            return data

    def delete_appliance_management_task_with_http_info(self, task_id, **kwargs):  # noqa: E501
        """Delete task  # noqa: E501

        Delete task  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_appliance_management_task_with_http_info(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: ID of task to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_appliance_management_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `delete_appliance_management_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task-id'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/tasks/{task-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_file(self, file_name, **kwargs):  # noqa: E501
        """Delete file  # noqa: E501

        Delete file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_file(file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: Name of the file to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_file_with_http_info(file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_file_with_http_info(file_name, **kwargs)  # noqa: E501
            return data

    def delete_file_with_http_info(self, file_name, **kwargs):  # noqa: E501
        """Delete file  # noqa: E501

        Delete file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_file_with_http_info(file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: Name of the file to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `delete_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_name' in params:
            path_params['file-name'] = params['file_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/file-store/{file-name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_node_network_route(self, route_id, **kwargs):  # noqa: E501
        """Delete node network route  # noqa: E501

        Delete a route from the NSX Manager routing table. You can modify an existing route by deleting it and then posting the modified version of the route. To verify, remove the route ID from the URI, issue a GET request, and note the absense of the deleted route.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_node_network_route(route_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str route_id: ID of route to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_node_network_route_with_http_info(route_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_node_network_route_with_http_info(route_id, **kwargs)  # noqa: E501
            return data

    def delete_node_network_route_with_http_info(self, route_id, **kwargs):  # noqa: E501
        """Delete node network route  # noqa: E501

        Delete a route from the NSX Manager routing table. You can modify an existing route by deleting it and then posting the modified version of the route. To verify, remove the route ID from the URI, issue a GET request, and note the absense of the deleted route.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_node_network_route_with_http_info(route_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str route_id: ID of route to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['route_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_node_network_route" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'route_id' is set
        if ('route_id' not in params or
                params['route_id'] is None):
            raise ValueError("Missing the required parameter `route_id` when calling `delete_node_network_route`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'route_id' in params:
            path_params['route-id'] = params['route_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/network/routes/{route-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_node_syslog_exporter(self, exporter_name, **kwargs):  # noqa: E501
        """Delete node syslog exporter  # noqa: E501

        Removes a specified rule from the collection of syslog exporter rules.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_node_syslog_exporter(exporter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exporter_name: Name of syslog exporter to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_node_syslog_exporter_with_http_info(exporter_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_node_syslog_exporter_with_http_info(exporter_name, **kwargs)  # noqa: E501
            return data

    def delete_node_syslog_exporter_with_http_info(self, exporter_name, **kwargs):  # noqa: E501
        """Delete node syslog exporter  # noqa: E501

        Removes a specified rule from the collection of syslog exporter rules.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_node_syslog_exporter_with_http_info(exporter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exporter_name: Name of syslog exporter to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exporter_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_node_syslog_exporter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exporter_name' is set
        if ('exporter_name' not in params or
                params['exporter_name'] is None):
            raise ValueError("Missing the required parameter `exporter_name` when calling `delete_node_syslog_exporter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exporter_name' in params:
            path_params['exporter-name'] = params['exporter_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog/exporters/{exporter-name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_node_user_ssh_key_remove_ssh_key(self, body, userid, **kwargs):  # noqa: E501
        """Remove SSH public key from authorized_keys file for node user  # noqa: E501

        Remove SSH public key from authorized_keys file for node user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_node_user_ssh_key_remove_ssh_key(body, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SshKeyBaseProperties body: (required)
        :param str userid: User id of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_node_user_ssh_key_remove_ssh_key_with_http_info(body, userid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_node_user_ssh_key_remove_ssh_key_with_http_info(body, userid, **kwargs)  # noqa: E501
            return data

    def delete_node_user_ssh_key_remove_ssh_key_with_http_info(self, body, userid, **kwargs):  # noqa: E501
        """Remove SSH public key from authorized_keys file for node user  # noqa: E501

        Remove SSH public key from authorized_keys file for node user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_node_user_ssh_key_remove_ssh_key_with_http_info(body, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SshKeyBaseProperties body: (required)
        :param str userid: User id of the user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_node_user_ssh_key_remove_ssh_key" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_node_user_ssh_key_remove_ssh_key`")  # noqa: E501
        # verify the required parameter 'userid' is set
        if ('userid' not in params or
                params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `delete_node_user_ssh_key_remove_ssh_key`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'userid' in params:
            path_params['userid'] = params['userid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/users/{userid}/ssh-keys?action=remove_ssh_key', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_support_bundles_async_response_delete_async_response(self, **kwargs):  # noqa: E501
        """Delete existing support bundles waiting to be downloaded  # noqa: E501

        Delete existing support bundles waiting to be downloaded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_support_bundles_async_response_delete_async_response(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_support_bundles_async_response_delete_async_response_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_support_bundles_async_response_delete_async_response_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_support_bundles_async_response_delete_async_response_with_http_info(self, **kwargs):  # noqa: E501
        """Delete existing support bundles waiting to be downloaded  # noqa: E501

        Delete existing support bundles waiting to be downloaded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_support_bundles_async_response_delete_async_response_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_support_bundles_async_response_delete_async_response" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/administration/support-bundles?action=delete_async_response', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_controller_profiler_status(self, **kwargs):  # noqa: E501
        """Get the status (Enabled/Disabled) of controller profiler  # noqa: E501

        Get the status (Enabled/Disabled) of controller profiler  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_controller_profiler_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ControllerProfilerProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_controller_profiler_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_controller_profiler_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_controller_profiler_status_with_http_info(self, **kwargs):  # noqa: E501
        """Get the status (Enabled/Disabled) of controller profiler  # noqa: E501

        Get the status (Enabled/Disabled) of controller profiler  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_controller_profiler_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ControllerProfilerProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_controller_profiler_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/controller/profiler', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ControllerProfilerProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_node_mandatory_access_control(self, **kwargs):  # noqa: E501
        """Gets the enable status for Mandatory Access Control  # noqa: E501

        Gets the enable status for Mandatory Access Control  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_node_mandatory_access_control(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MandatoryAccessControlProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_node_mandatory_access_control_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_node_mandatory_access_control_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_node_mandatory_access_control_with_http_info(self, **kwargs):  # noqa: E501
        """Gets the enable status for Mandatory Access Control  # noqa: E501

        Gets the enable status for Mandatory Access Control  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_node_mandatory_access_control_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MandatoryAccessControlProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_node_mandatory_access_control" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/hardening-policy/mandatory-access-control', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MandatoryAccessControlProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_node_mandatory_access_control_report(self, **kwargs):  # noqa: E501
        """Get the report for Mandatory Access Control  # noqa: E501

        Get the report for Mandatory Access Control  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_node_mandatory_access_control_report(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_node_mandatory_access_control_report_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_node_mandatory_access_control_report_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_node_mandatory_access_control_report_with_http_info(self, **kwargs):  # noqa: E501
        """Get the report for Mandatory Access Control  # noqa: E501

        Get the report for Mandatory Access Control  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_node_mandatory_access_control_report_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_node_mandatory_access_control_report" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/hardening-policy/mandatory-access-control/report', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_delete_cluster_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke DELETE request on target cluster node  # noqa: E501

        Invoke DELETE request on target cluster node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_delete_cluster_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID or keyword self (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_delete_cluster_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_delete_cluster_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_delete_cluster_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke DELETE request on target cluster node  # noqa: E501

        Invoke DELETE request on target cluster node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_delete_cluster_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID or keyword self (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_delete_cluster_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_delete_cluster_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_delete_cluster_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/{target-node-id}/{target-uri}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_delete_fabric_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke DELETE request on target fabric node  # noqa: E501

        Invoke DELETE request on target fabric node. This api is deprecated as part of FN+TN unification. Please use Transport Node API DELETE /transport-nodes/&lt;transport-node-id&gt;/&lt;target-node-id&gt;/&lt;target-uri&gt;   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_delete_fabric_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_delete_fabric_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_delete_fabric_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_delete_fabric_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke DELETE request on target fabric node  # noqa: E501

        Invoke DELETE request on target fabric node. This api is deprecated as part of FN+TN unification. Please use Transport Node API DELETE /transport-nodes/&lt;transport-node-id&gt;/&lt;target-node-id&gt;/&lt;target-uri&gt;   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_delete_fabric_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_delete_fabric_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_delete_fabric_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_delete_fabric_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{target-node-id}/{target-uri}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_delete_transport_node_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke DELETE request on target transport node  # noqa: E501

        Invoke DELETE request on target transport node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_delete_transport_node_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_delete_transport_node_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_delete_transport_node_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_delete_transport_node_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke DELETE request on target transport node  # noqa: E501

        Invoke DELETE request on target transport node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_delete_transport_node_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_delete_transport_node_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_delete_transport_node_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_delete_transport_node_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{target-node-id}/{target-uri}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_get_cluster_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke GET request on target cluster node  # noqa: E501

        Invoke GET request on target cluster node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_get_cluster_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID or keyword self (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_get_cluster_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_get_cluster_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_get_cluster_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke GET request on target cluster node  # noqa: E501

        Invoke GET request on target cluster node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_get_cluster_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID or keyword self (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_get_cluster_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_get_cluster_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_get_cluster_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/{target-node-id}/{target-uri}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_get_fabric_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke GET request on target fabric node  # noqa: E501

        Invoke GET request on target fabric node. This api is deprecated as part of FN+TN unification. Please use Transport Node API GET /transport-nodes/&lt;transport-node-id&gt;/&lt;target-node-id&gt;/&lt;target-uri&gt;   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_get_fabric_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_get_fabric_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_get_fabric_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_get_fabric_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke GET request on target fabric node  # noqa: E501

        Invoke GET request on target fabric node. This api is deprecated as part of FN+TN unification. Please use Transport Node API GET /transport-nodes/&lt;transport-node-id&gt;/&lt;target-node-id&gt;/&lt;target-uri&gt;   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_get_fabric_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_get_fabric_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_get_fabric_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_get_fabric_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{target-node-id}/{target-uri}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_get_transport_node_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke GET request on target transport node  # noqa: E501

        Invoke GET request on target transport node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_get_transport_node_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_get_transport_node_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_get_transport_node_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_get_transport_node_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke GET request on target transport node  # noqa: E501

        Invoke GET request on target transport node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_get_transport_node_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_get_transport_node_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_get_transport_node_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_get_transport_node_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{target-node-id}/{target-uri}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_post_cluster_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke POST request on target cluster node  # noqa: E501

        Invoke POST request on target cluster node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_post_cluster_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID or keyword self (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_post_cluster_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_post_cluster_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_post_cluster_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke POST request on target cluster node  # noqa: E501

        Invoke POST request on target cluster node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_post_cluster_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID or keyword self (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_post_cluster_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_post_cluster_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_post_cluster_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/{target-node-id}/{target-uri}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_post_fabric_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke POST request on target fabric node  # noqa: E501

        Invoke POST request on target fabric node. This api is deprecated as part of FN+TN unification. Please use Transport Node API POST /transport-nodes/&lt;transport-node-id&gt;/&lt;target-node-id&gt;/&lt;target-uri&gt;   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_post_fabric_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_post_fabric_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_post_fabric_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_post_fabric_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke POST request on target fabric node  # noqa: E501

        Invoke POST request on target fabric node. This api is deprecated as part of FN+TN unification. Please use Transport Node API POST /transport-nodes/&lt;transport-node-id&gt;/&lt;target-node-id&gt;/&lt;target-uri&gt;   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_post_fabric_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_post_fabric_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_post_fabric_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_post_fabric_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{target-node-id}/{target-uri}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_post_transport_node_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke POST request on target transport node  # noqa: E501

        Invoke POST request on target transport node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_post_transport_node_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_post_transport_node_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_post_transport_node_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_post_transport_node_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke POST request on target transport node  # noqa: E501

        Invoke POST request on target transport node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_post_transport_node_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_post_transport_node_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_post_transport_node_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_post_transport_node_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{target-node-id}/{target-uri}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_put_cluster_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke PUT request on target cluster node  # noqa: E501

        Invoke PUT request on target cluster node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_put_cluster_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID or keyword self (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_put_cluster_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_put_cluster_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_put_cluster_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke PUT request on target cluster node  # noqa: E501

        Invoke PUT request on target cluster node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_put_cluster_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID or keyword self (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_put_cluster_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_put_cluster_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_put_cluster_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/cluster/{target-node-id}/{target-uri}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_put_fabric_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke PUT request on target fabric node  # noqa: E501

        Invoke PUT request on target fabric node. This api is deprecated as part of FN+TN unification. Please use Transport Node API PUT /transport-nodes/&lt;transport-node-id&gt;/&lt;target-node-id&gt;/&lt;target-uri&gt;   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_put_fabric_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_put_fabric_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_put_fabric_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_put_fabric_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke PUT request on target fabric node  # noqa: E501

        Invoke PUT request on target fabric node. This api is deprecated as part of FN+TN unification. Please use Transport Node API PUT /transport-nodes/&lt;transport-node-id&gt;/&lt;target-node-id&gt;/&lt;target-uri&gt;   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_put_fabric_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_put_fabric_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_put_fabric_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_put_fabric_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/fabric/nodes/{target-node-id}/{target-uri}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def invoke_put_transport_node_central_api(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke PUT request on target transport node  # noqa: E501

        Invoke PUT request on target transport node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_put_transport_node_central_api(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.invoke_put_transport_node_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
        else:
            (data) = self.invoke_put_transport_node_central_api_with_http_info(target_node_id, target_uri, **kwargs)  # noqa: E501
            return data

    def invoke_put_transport_node_central_api_with_http_info(self, target_node_id, target_uri, **kwargs):  # noqa: E501
        """Invoke PUT request on target transport node  # noqa: E501

        Invoke PUT request on target transport node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.invoke_put_transport_node_central_api_with_http_info(target_node_id, target_uri, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str target_node_id: Target node UUID (required)
        :param str target_uri: URI of API to invoke on target node (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['target_node_id', 'target_uri']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method invoke_put_transport_node_central_api" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'target_node_id' is set
        if ('target_node_id' not in params or
                params['target_node_id'] is None):
            raise ValueError("Missing the required parameter `target_node_id` when calling `invoke_put_transport_node_central_api`")  # noqa: E501
        # verify the required parameter 'target_uri' is set
        if ('target_uri' not in params or
                params['target_uri'] is None):
            raise ValueError("Missing the required parameter `target_uri` when calling `invoke_put_transport_node_central_api`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'target_node_id' in params:
            path_params['target-node-id'] = params['target_node_id']  # noqa: E501
        if 'target_uri' in params:
            path_params['target-uri'] = params['target_uri']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/transport-nodes/{target-node-id}/{target-uri}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_appliance_management_tasks(self, **kwargs):  # noqa: E501
        """List appliance management tasks  # noqa: E501

        List appliance management tasks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_appliance_management_tasks(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fields: Fields to include in query results
        :param str request_method: Request method(s) to include in query result
        :param str request_path: Request URI path(s) to include in query result
        :param str request_uri: Request URI(s) to include in query result
        :param str status: Status(es) to include in query result
        :param str user: Names of users to include in query result
        :return: ApplianceManagementTaskListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_appliance_management_tasks_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_appliance_management_tasks_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_appliance_management_tasks_with_http_info(self, **kwargs):  # noqa: E501
        """List appliance management tasks  # noqa: E501

        List appliance management tasks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_appliance_management_tasks_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fields: Fields to include in query results
        :param str request_method: Request method(s) to include in query result
        :param str request_path: Request URI path(s) to include in query result
        :param str request_uri: Request URI(s) to include in query result
        :param str status: Status(es) to include in query result
        :param str user: Names of users to include in query result
        :return: ApplianceManagementTaskListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'request_method', 'request_path', 'request_uri', 'status', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_appliance_management_tasks" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'request_method' in params:
            query_params.append(('request_method', params['request_method']))  # noqa: E501
        if 'request_path' in params:
            query_params.append(('request_path', params['request_path']))  # noqa: E501
        if 'request_uri' in params:
            query_params.append(('request_uri', params['request_uri']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/tasks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplianceManagementTaskListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_files(self, **kwargs):  # noqa: E501
        """List node files  # noqa: E501

        List node files  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_files(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: FilePropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_files_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_files_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_files_with_http_info(self, **kwargs):  # noqa: E501
        """List node files  # noqa: E501

        List node files  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_files_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: FilePropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_files" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/file-store', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FilePropertiesListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_node_interfaces(self, **kwargs):  # noqa: E501
        """List the NSX Manager's Network Interfaces  # noqa: E501

        Returns the number of interfaces on the NSX Manager appliance and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_interfaces(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeNetworkInterfacePropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_node_interfaces_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_node_interfaces_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_node_interfaces_with_http_info(self, **kwargs):  # noqa: E501
        """List the NSX Manager's Network Interfaces  # noqa: E501

        Returns the number of interfaces on the NSX Manager appliance and detailed information about each interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network mask, and the IP configuration method (static or DHCP).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_interfaces_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeNetworkInterfacePropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_node_interfaces" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/network/interfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeNetworkInterfacePropertiesListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_node_network_routes(self, **kwargs):  # noqa: E501
        """List node network routes  # noqa: E501

        Returns detailed information about each route in the NSX Manager routing table. Route information includes the route type (default, static, and so on), a unique route identifier, the route metric, the protocol from which the route was learned, the route source (which is the preferred egress interface), the route destination, and the route scope. The route scope refers to the distance to the destination network: The \"host\" scope leads to a destination address on the NSX Manager, such as a loopback address; the \"link\" scope leads to a destination on the local network; and the \"global\" scope leads to addresses that are more than one hop away.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_network_routes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeRoutePropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_node_network_routes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_node_network_routes_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_node_network_routes_with_http_info(self, **kwargs):  # noqa: E501
        """List node network routes  # noqa: E501

        Returns detailed information about each route in the NSX Manager routing table. Route information includes the route type (default, static, and so on), a unique route identifier, the route metric, the protocol from which the route was learned, the route source (which is the preferred egress interface), the route destination, and the route scope. The route scope refers to the distance to the destination network: The \"host\" scope leads to a destination address on the NSX Manager, such as a loopback address; the \"link\" scope leads to a destination on the local network; and the \"global\" scope leads to addresses that are more than one hop away.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_network_routes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeRoutePropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_node_network_routes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/network/routes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeRoutePropertiesListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_node_processes(self, **kwargs):  # noqa: E501
        """List node processes  # noqa: E501

        Returns the number of processes and information about each process. Process information includes 1) mem_resident, which is roughly equivalent to the amount of RAM, in bytes, currently used by the process, 2) parent process ID (ppid), 3) process name, 4) process up time in milliseconds, 5) mem_used, wich is the amount of virtual memory used by the process, in bytes, 6) process start time, in milliseconds since epoch, 7) process ID (pid), 8) CPU time, both user and the system, consumed by the process in milliseconds.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_processes(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeProcessPropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_node_processes_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_node_processes_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_node_processes_with_http_info(self, **kwargs):  # noqa: E501
        """List node processes  # noqa: E501

        Returns the number of processes and information about each process. Process information includes 1) mem_resident, which is roughly equivalent to the amount of RAM, in bytes, currently used by the process, 2) parent process ID (ppid), 3) process name, 4) process up time in milliseconds, 5) mem_used, wich is the amount of virtual memory used by the process, in bytes, 6) process start time, in milliseconds since epoch, 7) process ID (pid), 8) CPU time, both user and the system, consumed by the process in milliseconds.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_processes_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeProcessPropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_node_processes" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/processes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeProcessPropertiesListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_node_services(self, **kwargs):  # noqa: E501
        """List node services  # noqa: E501

        Returns a list of all services available on the NSX Manager applicance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_services(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServicePropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_node_services_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_node_services_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_node_services_with_http_info(self, **kwargs):  # noqa: E501
        """List node services  # noqa: E501

        Returns a list of all services available on the NSX Manager applicance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_services_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServicePropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_node_services" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServicePropertiesListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_node_syslog_exporters(self, **kwargs):  # noqa: E501
        """List node syslog exporters  # noqa: E501

        Returns the collection of registered syslog exporter rules, if any. The rules specify the collector IP address and port, and the protocol to use.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_syslog_exporters(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeSyslogExporterPropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_node_syslog_exporters_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_node_syslog_exporters_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_node_syslog_exporters_with_http_info(self, **kwargs):  # noqa: E501
        """List node syslog exporters  # noqa: E501

        Returns the collection of registered syslog exporter rules, if any. The rules specify the collector IP address and port, and the protocol to use.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_syslog_exporters_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeSyslogExporterPropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_node_syslog_exporters" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog/exporters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeSyslogExporterPropertiesListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_node_user_ssh_keys(self, userid, **kwargs):  # noqa: E501
        """List SSH keys from authorized_keys file for node user  # noqa: E501

        Returns a list of all SSH keys from authorized_keys file for node user   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_user_ssh_keys(userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid: User id of the user (required)
        :return: SshKeyPropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_node_user_ssh_keys_with_http_info(userid, **kwargs)  # noqa: E501
        else:
            (data) = self.list_node_user_ssh_keys_with_http_info(userid, **kwargs)  # noqa: E501
            return data

    def list_node_user_ssh_keys_with_http_info(self, userid, **kwargs):  # noqa: E501
        """List SSH keys from authorized_keys file for node user  # noqa: E501

        Returns a list of all SSH keys from authorized_keys file for node user   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_user_ssh_keys_with_http_info(userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid: User id of the user (required)
        :return: SshKeyPropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_node_user_ssh_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'userid' is set
        if ('userid' not in params or
                params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `list_node_user_ssh_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'userid' in params:
            path_params['userid'] = params['userid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/users/{userid}/ssh-keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SshKeyPropertiesListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_node_users(self, **kwargs):  # noqa: E501
        """List node users  # noqa: E501

        Returns the list of users configued to log in to the NSX appliance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_users(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeUserPropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_node_users_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_node_users_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_node_users_with_http_info(self, **kwargs):  # noqa: E501
        """List node users  # noqa: E501

        Returns the list of users configued to log in to the NSX appliance.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_node_users_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeUserPropertiesListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_node_users" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeUserPropertiesListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_node_syslog_exporter(self, body, **kwargs):  # noqa: E501
        """Add node syslog exporter  # noqa: E501

        Adds a rule for exporting syslog information to a specified server. The required parameters are the rule name (exporter_name); severity level (emerg, alert, crit, and so on); transmission protocol (TCP or UDP); and server IP address or hostname. The optional parameters are the syslog port number, which can be 1 through 65,535 (514, by default); facility level to use when logging messages to syslog (kern, user, mail, and so on); and message IDs (msgids), which identify the types of messages to export.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_node_syslog_exporter(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeSyslogExporterProperties body: (required)
        :return: NodeSyslogExporterProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_node_syslog_exporter_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_node_syslog_exporter_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_node_syslog_exporter_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add node syslog exporter  # noqa: E501

        Adds a rule for exporting syslog information to a specified server. The required parameters are the rule name (exporter_name); severity level (emerg, alert, crit, and so on); transmission protocol (TCP or UDP); and server IP address or hostname. The optional parameters are the syslog port number, which can be 1 through 65,535 (514, by default); facility level to use when logging messages to syslog (kern, user, mail, and so on); and message IDs (msgids), which identify the types of messages to export.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_node_syslog_exporter_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeSyslogExporterProperties body: (required)
        :return: NodeSyslogExporterProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_node_syslog_exporter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_node_syslog_exporter`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog/exporters', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeSyslogExporterProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_appliance_management_service(self, **kwargs):  # noqa: E501
        """Read appliance management service properties  # noqa: E501

        Read appliance management service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_appliance_management_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_appliance_management_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_appliance_management_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_appliance_management_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read appliance management service properties  # noqa: E501

        Read appliance management service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_appliance_management_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_appliance_management_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/node-mgmt', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_appliance_management_service_status(self, **kwargs):  # noqa: E501
        """Read appliance management service status  # noqa: E501

        Read appliance management service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_appliance_management_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_appliance_management_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_appliance_management_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_appliance_management_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read appliance management service status  # noqa: E501

        Read appliance management service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_appliance_management_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_appliance_management_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/node-mgmt/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_appliance_management_task_properties(self, task_id, **kwargs):  # noqa: E501
        """Read task properties  # noqa: E501

        Read task properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_appliance_management_task_properties(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: ID of task to read (required)
        :param bool suppress_redirect: Suppress redirect status if applicable
        :return: ApplianceManagementTaskProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_appliance_management_task_properties_with_http_info(task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_appliance_management_task_properties_with_http_info(task_id, **kwargs)  # noqa: E501
            return data

    def read_appliance_management_task_properties_with_http_info(self, task_id, **kwargs):  # noqa: E501
        """Read task properties  # noqa: E501

        Read task properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_appliance_management_task_properties_with_http_info(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: ID of task to read (required)
        :param bool suppress_redirect: Suppress redirect status if applicable
        :return: ApplianceManagementTaskProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'suppress_redirect']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_appliance_management_task_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `read_appliance_management_task_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task-id'] = params['task_id']  # noqa: E501

        query_params = []
        if 'suppress_redirect' in params:
            query_params.append(('suppress_redirect', params['suppress_redirect']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/tasks/{task-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApplianceManagementTaskProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_appliance_node_status(self, **kwargs):  # noqa: E501
        """Read node status  # noqa: E501

        Returns information about the NSX Manager appliance's file system, CPU, memory, disk usage, and uptime.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_appliance_node_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_appliance_node_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_appliance_node_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_appliance_node_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read node status  # noqa: E501

        Returns information about the NSX Manager appliance's file system, CPU, memory, disk usage, and uptime.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_appliance_node_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_appliance_node_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_async_appliance_management_task_response(self, task_id, **kwargs):  # noqa: E501
        """Read asynchronous task response  # noqa: E501

        Read asynchronous task response  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_async_appliance_management_task_response(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: ID of task to read (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_async_appliance_management_task_response_with_http_info(task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_async_appliance_management_task_response_with_http_info(task_id, **kwargs)  # noqa: E501
            return data

    def read_async_appliance_management_task_response_with_http_info(self, task_id, **kwargs):  # noqa: E501
        """Read asynchronous task response  # noqa: E501

        Read asynchronous task response  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_async_appliance_management_task_response_with_http_info(task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_id: ID of task to read (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_async_appliance_management_task_response" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `read_async_appliance_management_task_response`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['task-id'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/tasks/{task-id}/response', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_auth_provider_vidm(self, **kwargs):  # noqa: E501
        """Read AAA provider vIDM properties  # noqa: E501

        Read AAA provider vIDM properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_auth_provider_vidm(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeAuthProviderVidmProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_auth_provider_vidm_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_auth_provider_vidm_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_auth_provider_vidm_with_http_info(self, **kwargs):  # noqa: E501
        """Read AAA provider vIDM properties  # noqa: E501

        Read AAA provider vIDM properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_auth_provider_vidm_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeAuthProviderVidmProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_auth_provider_vidm" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/aaa/providers/vidm', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeAuthProviderVidmProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_auth_provider_vidm_status(self, **kwargs):  # noqa: E501
        """Read AAA provider vIDM status  # noqa: E501

        Read AAA provider vIDM status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_auth_provider_vidm_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeAuthProviderVidmStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_auth_provider_vidm_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_auth_provider_vidm_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_auth_provider_vidm_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read AAA provider vIDM status  # noqa: E501

        Read AAA provider vIDM status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_auth_provider_vidm_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeAuthProviderVidmStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_auth_provider_vidm_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/aaa/providers/vidm/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeAuthProviderVidmStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_cluster_boot_manager_service(self, **kwargs):  # noqa: E501
        """Read cluster boot manager service properties  # noqa: E501

        Read cluster boot manager service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_cluster_boot_manager_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_cluster_boot_manager_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_cluster_boot_manager_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_cluster_boot_manager_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read cluster boot manager service properties  # noqa: E501

        Read cluster boot manager service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_cluster_boot_manager_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_cluster_boot_manager_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/cluster_manager', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_cluster_boot_manager_service_status(self, **kwargs):  # noqa: E501
        """Read cluster boot manager service status  # noqa: E501

        Read cluster boot manager service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_cluster_boot_manager_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_cluster_boot_manager_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_cluster_boot_manager_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_cluster_boot_manager_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read cluster boot manager service status  # noqa: E501

        Read cluster boot manager service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_cluster_boot_manager_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_cluster_boot_manager_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/cluster_manager/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_cminventory_service(self, **kwargs):  # noqa: E501
        """Read cm inventory service properties  # noqa: E501

        Read cm inventory service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_cminventory_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_cminventory_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_cminventory_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_cminventory_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read cm inventory service properties  # noqa: E501

        Read cm inventory service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_cminventory_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_cminventory_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/cm-inventory', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_cminventory_service_status(self, **kwargs):  # noqa: E501
        """Read manager service status  # noqa: E501

        Read manager service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_cminventory_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_cminventory_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_cminventory_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_cminventory_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read manager service status  # noqa: E501

        Read manager service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_cminventory_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_cminventory_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/cm-inventory/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_controller_server_certificate(self, **kwargs):  # noqa: E501
        """Read controller server certificate properties  # noqa: E501

        Read controller server certificate properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_controller_server_certificate(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CertificateKeyPair
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_controller_server_certificate_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_controller_server_certificate_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_controller_server_certificate_with_http_info(self, **kwargs):  # noqa: E501
        """Read controller server certificate properties  # noqa: E501

        Read controller server certificate properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_controller_server_certificate_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CertificateKeyPair
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_controller_server_certificate" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/controller/controller-certificate', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CertificateKeyPair',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_controller_server_service(self, **kwargs):  # noqa: E501
        """Read controller service properties  # noqa: E501

        Read controller service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_controller_server_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_controller_server_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_controller_server_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_controller_server_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read controller service properties  # noqa: E501

        Read controller service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_controller_server_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_controller_server_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/controller', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_controller_server_service_status(self, **kwargs):  # noqa: E501
        """Read controller service status  # noqa: E501

        Read controller service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_controller_server_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_controller_server_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_controller_server_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_controller_server_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read controller service status  # noqa: E501

        Read controller service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_controller_server_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_controller_server_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/controller/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_file(self, file_name, **kwargs):  # noqa: E501
        """Read file contents  # noqa: E501

        Read file contents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_file(file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: Name of the file to read (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_file_with_http_info(file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.read_file_with_http_info(file_name, **kwargs)  # noqa: E501
            return data

    def read_file_with_http_info(self, file_name, **kwargs):  # noqa: E501
        """Read file contents  # noqa: E501

        Read file contents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_file_with_http_info(file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: Name of the file to read (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `read_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_name' in params:
            path_params['file-name'] = params['file_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/file-store/{file-name}/data', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_file_properties(self, file_name, **kwargs):  # noqa: E501
        """Read file properties  # noqa: E501

        Read file properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_file_properties(file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: Name of the file to retrieve information about (required)
        :return: FileProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_file_properties_with_http_info(file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.read_file_properties_with_http_info(file_name, **kwargs)  # noqa: E501
            return data

    def read_file_properties_with_http_info(self, file_name, **kwargs):  # noqa: E501
        """Read file properties  # noqa: E501

        Read file properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_file_properties_with_http_info(file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: Name of the file to retrieve information about (required)
        :return: FileProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_file_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `read_file_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_name' in params:
            path_params['file-name'] = params['file_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/file-store/{file-name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_file_thumbprint(self, file_name, **kwargs):  # noqa: E501
        """Read file thumbprint  # noqa: E501

        Read file thumbprint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_file_thumbprint(file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: Name of the file for which thumbprint should be computed (required)
        :return: FileThumbprint
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_file_thumbprint_with_http_info(file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.read_file_thumbprint_with_http_info(file_name, **kwargs)  # noqa: E501
            return data

    def read_file_thumbprint_with_http_info(self, file_name, **kwargs):  # noqa: E501
        """Read file thumbprint  # noqa: E501

        Read file thumbprint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_file_thumbprint_with_http_info(file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: Name of the file for which thumbprint should be computed (required)
        :return: FileThumbprint
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_file_thumbprint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `read_file_thumbprint`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_name' in params:
            path_params['file-name'] = params['file_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/file-store/{file-name}/thumbprint', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileThumbprint',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_liagent_service(self, **kwargs):  # noqa: E501
        """Read liagent service properties  # noqa: E501

        Read liagent service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_liagent_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_liagent_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_liagent_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_liagent_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read liagent service properties  # noqa: E501

        Read liagent service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_liagent_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_liagent_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/liagent', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_liagent_service_status(self, **kwargs):  # noqa: E501
        """Read liagent service status  # noqa: E501

        Read liagent service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_liagent_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_liagent_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_liagent_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_liagent_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read liagent service status  # noqa: E501

        Read liagent service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_liagent_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_liagent_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/liagent/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_migration_coordinator_service(self, **kwargs):  # noqa: E501
        """Read migration coordinator service properties  # noqa: E501

        Read migration coordinator service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_migration_coordinator_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_migration_coordinator_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_migration_coordinator_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_migration_coordinator_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read migration coordinator service properties  # noqa: E501

        Read migration coordinator service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_migration_coordinator_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_migration_coordinator_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/migration-coordinator', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_migration_coordinator_service_status(self, **kwargs):  # noqa: E501
        """Read migration coordinator service status  # noqa: E501

        Read migration coordinator service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_migration_coordinator_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_migration_coordinator_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_migration_coordinator_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_migration_coordinator_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read migration coordinator service status  # noqa: E501

        Read migration coordinator service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_migration_coordinator_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_migration_coordinator_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/migration-coordinator/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_network_interface_statistics(self, interface_id, **kwargs):  # noqa: E501
        """Read the NSX Manager's Network Interface Statistics  # noqa: E501

        On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_network_interface_statistics(interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str interface_id: ID of interface to read (required)
        :return: NodeInterfaceStatisticsProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_network_interface_statistics_with_http_info(interface_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_network_interface_statistics_with_http_info(interface_id, **kwargs)  # noqa: E501
            return data

    def read_network_interface_statistics_with_http_info(self, interface_id, **kwargs):  # noqa: E501
        """Read the NSX Manager's Network Interface Statistics  # noqa: E501

        On the specified interface, returns the number of received (rx), transmitted (tx), and dropped packets; the number of bytes and errors received and transmitted on the interface; and the number of detected collisions.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_network_interface_statistics_with_http_info(interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str interface_id: ID of interface to read (required)
        :return: NodeInterfaceStatisticsProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interface_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_network_interface_statistics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interface_id' is set
        if ('interface_id' not in params or
                params['interface_id'] is None):
            raise ValueError("Missing the required parameter `interface_id` when calling `read_network_interface_statistics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'interface_id' in params:
            path_params['interface-id'] = params['interface_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/network/interfaces/{interface-id}/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeInterfaceStatisticsProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_network_properties(self, **kwargs):  # noqa: E501
        """Read network configuration properties  # noqa: E501

        Read network configuration properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_network_properties(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeNetworkProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_network_properties_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_network_properties_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_network_properties_with_http_info(self, **kwargs):  # noqa: E501
        """Read network configuration properties  # noqa: E501

        Read network configuration properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_network_properties_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeNetworkProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_network_properties" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/network', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeNetworkProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_node_interface(self, interface_id, **kwargs):  # noqa: E501
        """Read the NSX Manager's Network Interface  # noqa: E501

        Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_interface(interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str interface_id: ID of interface to read (required)
        :return: NodeNetworkInterfaceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_node_interface_with_http_info(interface_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_node_interface_with_http_info(interface_id, **kwargs)  # noqa: E501
            return data

    def read_node_interface_with_http_info(self, interface_id, **kwargs):  # noqa: E501
        """Read the NSX Manager's Network Interface  # noqa: E501

        Returns detailed information about the specified interface. Interface information includes MTU, broadcast and host IP addresses, link and admin status, MAC address, network  mask, and the IP configuration method.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_interface_with_http_info(interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str interface_id: ID of interface to read (required)
        :return: NodeNetworkInterfaceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['interface_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_node_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'interface_id' is set
        if ('interface_id' not in params or
                params['interface_id'] is None):
            raise ValueError("Missing the required parameter `interface_id` when calling `read_node_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'interface_id' in params:
            path_params['interface-id'] = params['interface_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/network/interfaces/{interface-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeNetworkInterfaceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_node_name_servers(self, **kwargs):  # noqa: E501
        """Read the NSX Manager's Name Servers  # noqa: E501

        Returns the list of servers that the NSX Manager node uses to look up IP addresses associated with given domain names.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_name_servers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeNameServersProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_node_name_servers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_node_name_servers_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_node_name_servers_with_http_info(self, **kwargs):  # noqa: E501
        """Read the NSX Manager's Name Servers  # noqa: E501

        Returns the list of servers that the NSX Manager node uses to look up IP addresses associated with given domain names.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_name_servers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeNameServersProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_node_name_servers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/network/name-servers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeNameServersProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_node_network_route(self, route_id, **kwargs):  # noqa: E501
        """Read node network route  # noqa: E501

        Returns detailed information about a specified route in the NSX Manager routing table.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_network_route(route_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str route_id: ID of route to read (required)
        :return: NodeRouteProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_node_network_route_with_http_info(route_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_node_network_route_with_http_info(route_id, **kwargs)  # noqa: E501
            return data

    def read_node_network_route_with_http_info(self, route_id, **kwargs):  # noqa: E501
        """Read node network route  # noqa: E501

        Returns detailed information about a specified route in the NSX Manager routing table.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_network_route_with_http_info(route_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str route_id: ID of route to read (required)
        :return: NodeRouteProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['route_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_node_network_route" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'route_id' is set
        if ('route_id' not in params or
                params['route_id'] is None):
            raise ValueError("Missing the required parameter `route_id` when calling `read_node_network_route`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'route_id' in params:
            path_params['route-id'] = params['route_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/network/routes/{route-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeRouteProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_node_process(self, process_id, **kwargs):  # noqa: E501
        """Read node process  # noqa: E501

        Returns information for a specified process ID (pid).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_process(process_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str process_id: ID of process to read (required)
        :return: NodeProcessProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_node_process_with_http_info(process_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_node_process_with_http_info(process_id, **kwargs)  # noqa: E501
            return data

    def read_node_process_with_http_info(self, process_id, **kwargs):  # noqa: E501
        """Read node process  # noqa: E501

        Returns information for a specified process ID (pid).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_process_with_http_info(process_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str process_id: ID of process to read (required)
        :return: NodeProcessProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['process_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_node_process" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'process_id' is set
        if ('process_id' not in params or
                params['process_id'] is None):
            raise ValueError("Missing the required parameter `process_id` when calling `read_node_process`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'process_id' in params:
            path_params['process-id'] = params['process_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/processes/{process-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeProcessProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_node_properties(self, **kwargs):  # noqa: E501
        """Read node properties  # noqa: E501

        Returns information about the NSX appliance. Information includes release number, time zone, system time, kernel version, message of the day (motd), and host name.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_properties(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_node_properties_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_node_properties_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_node_properties_with_http_info(self, **kwargs):  # noqa: E501
        """Read node properties  # noqa: E501

        Returns information about the NSX appliance. Information includes release number, time zone, system time, kernel version, message of the day (motd), and host name.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_properties_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_node_properties" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_node_search_domains(self, **kwargs):  # noqa: E501
        """Read the NSX Manager's Search Domains  # noqa: E501

        Returns the domain list that the NSX Manager node uses to complete unqualified host names. When a host name does not include a fully qualified domain name (FQDN), the NSX Management node appends the first-listed domain name to the host name before the host name is looked up. The NSX Management node continues this for each entry in the domain list until it finds a match.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_search_domains(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeSearchDomainsProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_node_search_domains_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_node_search_domains_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_node_search_domains_with_http_info(self, **kwargs):  # noqa: E501
        """Read the NSX Manager's Search Domains  # noqa: E501

        Returns the domain list that the NSX Manager node uses to complete unqualified host names. When a host name does not include a fully qualified domain name (FQDN), the NSX Management node appends the first-listed domain name to the host name before the host name is looked up. The NSX Management node continues this for each entry in the domain list until it finds a match.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_search_domains_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeSearchDomainsProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_node_search_domains" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/network/search-domains', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeSearchDomainsProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_node_stats_service(self, **kwargs):  # noqa: E501
        """Read NSX node-stats service properties  # noqa: E501

        Read NSX node-stats service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_stats_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_node_stats_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_node_stats_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_node_stats_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read NSX node-stats service properties  # noqa: E501

        Read NSX node-stats service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_stats_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_node_stats_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/node-stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_node_stats_service_status(self, **kwargs):  # noqa: E501
        """Read NSX node-stats service status  # noqa: E501

        Read NSX node-stats service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_stats_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_node_stats_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_node_stats_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_node_stats_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read NSX node-stats service status  # noqa: E501

        Read NSX node-stats service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_stats_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_node_stats_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/node-stats/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_node_support_bundle(self, **kwargs):  # noqa: E501
        """Read node support bundle  # noqa: E501

        Read node support bundle  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_support_bundle(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool all: Include all files
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_node_support_bundle_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_node_support_bundle_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_node_support_bundle_with_http_info(self, **kwargs):  # noqa: E501
        """Read node support bundle  # noqa: E501

        Read node support bundle  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_support_bundle_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool all: Include all files
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['all']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_node_support_bundle" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'all' in params:
            query_params.append(('all', params['all']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/support-bundle', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_node_syslog_exporter(self, exporter_name, **kwargs):  # noqa: E501
        """Read node syslog exporter  # noqa: E501

        Returns information about a specific syslog collection point.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_syslog_exporter(exporter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exporter_name: Name of syslog exporter (required)
        :return: NodeSyslogExporterProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_node_syslog_exporter_with_http_info(exporter_name, **kwargs)  # noqa: E501
        else:
            (data) = self.read_node_syslog_exporter_with_http_info(exporter_name, **kwargs)  # noqa: E501
            return data

    def read_node_syslog_exporter_with_http_info(self, exporter_name, **kwargs):  # noqa: E501
        """Read node syslog exporter  # noqa: E501

        Returns information about a specific syslog collection point.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_syslog_exporter_with_http_info(exporter_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str exporter_name: Name of syslog exporter (required)
        :return: NodeSyslogExporterProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['exporter_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_node_syslog_exporter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'exporter_name' is set
        if ('exporter_name' not in params or
                params['exporter_name'] is None):
            raise ValueError("Missing the required parameter `exporter_name` when calling `read_node_syslog_exporter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'exporter_name' in params:
            path_params['exporter-name'] = params['exporter_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog/exporters/{exporter-name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeSyslogExporterProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_node_user(self, userid, **kwargs):  # noqa: E501
        """Read node user  # noqa: E501

        Returns information about a specified user who is configued to log in to the NSX appliance   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_user(userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid: User id of the user (required)
        :return: NodeUserProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_node_user_with_http_info(userid, **kwargs)  # noqa: E501
        else:
            (data) = self.read_node_user_with_http_info(userid, **kwargs)  # noqa: E501
            return data

    def read_node_user_with_http_info(self, userid, **kwargs):  # noqa: E501
        """Read node user  # noqa: E501

        Returns information about a specified user who is configued to log in to the NSX appliance   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_user_with_http_info(userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str userid: User id of the user (required)
        :return: NodeUserProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_node_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'userid' is set
        if ('userid' not in params or
                params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `read_node_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'userid' in params:
            path_params['userid'] = params['userid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/users/{userid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeUserProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_node_version(self, **kwargs):  # noqa: E501
        """Read node version  # noqa: E501

        Read node version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_version(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_node_version_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_node_version_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_node_version_with_http_info(self, **kwargs):  # noqa: E501
        """Read node version  # noqa: E501

        Read node version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_node_version_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeVersion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_node_version" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/version', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeVersion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_nsx_message_bus_service(self, **kwargs):  # noqa: E501
        """Read NSX Message Bus service properties  # noqa: E501

        Read NSX Message Bus service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_nsx_message_bus_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_nsx_message_bus_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_nsx_message_bus_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_nsx_message_bus_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read NSX Message Bus service properties  # noqa: E501

        Read NSX Message Bus service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_nsx_message_bus_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_nsx_message_bus_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/nsx-message-bus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_nsx_message_bus_service_status(self, **kwargs):  # noqa: E501
        """Read NSX Message Bus service status  # noqa: E501

        Read NSX Message Bus service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_nsx_message_bus_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_nsx_message_bus_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_nsx_message_bus_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_nsx_message_bus_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read NSX Message Bus service status  # noqa: E501

        Read NSX Message Bus service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_nsx_message_bus_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_nsx_message_bus_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/nsx-message-bus/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_nsx_ui_service_service(self, **kwargs):  # noqa: E501
        """Read ui service properties  # noqa: E501

        Read ui service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_nsx_ui_service_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_nsx_ui_service_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_nsx_ui_service_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_nsx_ui_service_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read ui service properties  # noqa: E501

        Read ui service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_nsx_ui_service_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_nsx_ui_service_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ui-service', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_nsx_ui_service_service_status(self, **kwargs):  # noqa: E501
        """Read ui service status  # noqa: E501

        Read ui service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_nsx_ui_service_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_nsx_ui_service_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_nsx_ui_service_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_nsx_ui_service_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read ui service status  # noqa: E501

        Read ui service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_nsx_ui_service_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_nsx_ui_service_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ui-service/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_nsx_upgrade_agent_service(self, **kwargs):  # noqa: E501
        """Read NSX upgrade Agent service properties  # noqa: E501

        Read NSX upgrade Agent service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_nsx_upgrade_agent_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_nsx_upgrade_agent_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_nsx_upgrade_agent_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_nsx_upgrade_agent_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read NSX upgrade Agent service properties  # noqa: E501

        Read NSX upgrade Agent service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_nsx_upgrade_agent_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_nsx_upgrade_agent_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/nsx-upgrade-agent', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_nsx_upgrade_agent_service_status(self, **kwargs):  # noqa: E501
        """Read Nsx upgrade agent service status  # noqa: E501

        Read Nsx upgrade agent service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_nsx_upgrade_agent_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_nsx_upgrade_agent_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_nsx_upgrade_agent_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_nsx_upgrade_agent_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read Nsx upgrade agent service status  # noqa: E501

        Read Nsx upgrade agent service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_nsx_upgrade_agent_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_nsx_upgrade_agent_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/nsx-upgrade-agent/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_ntp_service(self, **kwargs):  # noqa: E501
        """Read NTP service properties  # noqa: E501

        Read NTP service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_ntp_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeNtpServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_ntp_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_ntp_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_ntp_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read NTP service properties  # noqa: E501

        Read NTP service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_ntp_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeNtpServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_ntp_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ntp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeNtpServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_ntp_service_status(self, **kwargs):  # noqa: E501
        """Read NTP service status  # noqa: E501

        Read NTP service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_ntp_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_ntp_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_ntp_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_ntp_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read NTP service status  # noqa: E501

        Read NTP service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_ntp_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_ntp_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ntp/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_phonehome_coordinator_service(self, **kwargs):  # noqa: E501
        """Read Telemetry service properties  # noqa: E501

        Read Telemetry service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_phonehome_coordinator_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_phonehome_coordinator_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_phonehome_coordinator_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_phonehome_coordinator_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read Telemetry service properties  # noqa: E501

        Read Telemetry service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_phonehome_coordinator_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_phonehome_coordinator_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/telemetry', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_phonehome_coordinator_service_status(self, **kwargs):  # noqa: E501
        """Read Telemetry service status  # noqa: E501

        Read Telemetry service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_phonehome_coordinator_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_phonehome_coordinator_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_phonehome_coordinator_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_phonehome_coordinator_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read Telemetry service status  # noqa: E501

        Read Telemetry service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_phonehome_coordinator_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_phonehome_coordinator_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/telemetry/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_platform_client_service(self, **kwargs):  # noqa: E501
        """Read NSX Platform Client service properties  # noqa: E501

        Read NSX Platform Client service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_platform_client_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_platform_client_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_platform_client_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_platform_client_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read NSX Platform Client service properties  # noqa: E501

        Read NSX Platform Client service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_platform_client_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_platform_client_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/nsx-platform-client', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_platform_client_service_status(self, **kwargs):  # noqa: E501
        """Read NSX Platform Client service status  # noqa: E501

        Read NSX Platform Client service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_platform_client_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_platform_client_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_platform_client_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_platform_client_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read NSX Platform Client service status  # noqa: E501

        Read NSX Platform Client service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_platform_client_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_platform_client_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/nsx-platform-client/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_policy_service(self, **kwargs):  # noqa: E501
        """Read service properties  # noqa: E501

        Read service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_policy_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodePolicyServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_policy_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_policy_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_policy_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read service properties  # noqa: E501

        Read service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_policy_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodePolicyServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_policy_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/policy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodePolicyServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_policy_service_status(self, **kwargs):  # noqa: E501
        """Read service status  # noqa: E501

        Read service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_policy_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_policy_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_policy_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_policy_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read service status  # noqa: E501

        Read service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_policy_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_policy_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/policy/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_proton_service(self, **kwargs):  # noqa: E501
        """Read service properties  # noqa: E501

        Read service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_proton_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeProtonServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_proton_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_proton_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_proton_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read service properties  # noqa: E501

        Read service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_proton_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeProtonServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_proton_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/manager', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeProtonServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_proton_service_status(self, **kwargs):  # noqa: E501
        """Read service status  # noqa: E501

        Read service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_proton_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_proton_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_proton_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_proton_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read service status  # noqa: E501

        Read service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_proton_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_proton_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/manager/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_proxy_service(self, **kwargs):  # noqa: E501
        """Read http service properties  # noqa: E501

        This API is deprecated.  Read the configuration of the http service by calling the GET /api/v1/cluster/api-service API.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_proxy_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeHttpServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_proxy_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_proxy_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_proxy_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read http service properties  # noqa: E501

        This API is deprecated.  Read the configuration of the http service by calling the GET /api/v1/cluster/api-service API.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_proxy_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeHttpServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_proxy_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/http', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeHttpServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_proxy_service_status(self, **kwargs):  # noqa: E501
        """Read http service status  # noqa: E501

        Read http service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_proxy_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_proxy_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_proxy_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_proxy_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read http service status  # noqa: E501

        Read http service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_proxy_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_proxy_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/http/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_rabbit_mq_service(self, **kwargs):  # noqa: E501
        """Read Rabbit MQ service properties  # noqa: E501

        Read Rabbit MQ service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_rabbit_mq_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_rabbit_mq_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_rabbit_mq_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_rabbit_mq_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read Rabbit MQ service properties  # noqa: E501

        Read Rabbit MQ service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_rabbit_mq_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_rabbit_mq_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/mgmt-plane-bus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_rabbit_mq_service_status(self, **kwargs):  # noqa: E501
        """Read Rabbit MQ service status  # noqa: E501

        Read Rabbit MQ service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_rabbit_mq_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_rabbit_mq_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_rabbit_mq_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_rabbit_mq_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read Rabbit MQ service status  # noqa: E501

        Read Rabbit MQ service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_rabbit_mq_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_rabbit_mq_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/mgmt-plane-bus/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_repository_service(self, **kwargs):  # noqa: E501
        """Read NSX install-upgrade service properties  # noqa: E501

        Read NSX install-upgrade service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_repository_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeInstallUpgradeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_repository_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_repository_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_repository_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read NSX install-upgrade service properties  # noqa: E501

        Read NSX install-upgrade service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_repository_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeInstallUpgradeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_repository_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/install-upgrade', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeInstallUpgradeServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_repository_service_status(self, **kwargs):  # noqa: E501
        """Read NSX install-upgrade service status  # noqa: E501

        Read NSX install-upgrade service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_repository_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_repository_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_repository_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_repository_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read NSX install-upgrade service status  # noqa: E501

        Read NSX install-upgrade service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_repository_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_repository_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/install-upgrade/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_search_service(self, **kwargs):  # noqa: E501
        """Read NSX Search service properties  # noqa: E501

        Read NSX Search service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_search_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_search_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_search_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_search_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read NSX Search service properties  # noqa: E501

        Read NSX Search service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_search_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_search_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/search', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_search_service_status(self, **kwargs):  # noqa: E501
        """Read NSX Search service status  # noqa: E501

        Read NSX Search service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_search_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_search_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_search_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_search_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read NSX Search service status  # noqa: E501

        Read NSX Search service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_search_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_search_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/search/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_snmp_service(self, **kwargs):  # noqa: E501
        """Read SNMP service properties  # noqa: E501

        Read SNMP service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_snmp_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeSnmpServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_snmp_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_snmp_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_snmp_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read SNMP service properties  # noqa: E501

        Read SNMP service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_snmp_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeSnmpServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_snmp_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/snmp', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeSnmpServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_snmp_service_status(self, **kwargs):  # noqa: E501
        """Read SNMP service status  # noqa: E501

        Read SNMP service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_snmp_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_snmp_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_snmp_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_snmp_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read SNMP service status  # noqa: E501

        Read SNMP service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_snmp_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_snmp_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/snmp/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_snmpv3_engine_id(self, **kwargs):  # noqa: E501
        """Read SNMP V3 Engine ID  # noqa: E501

        Read SNMP V3 Engine ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_snmpv3_engine_id(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeSnmpV3EngineID
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_snmpv3_engine_id_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_snmpv3_engine_id_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_snmpv3_engine_id_with_http_info(self, **kwargs):  # noqa: E501
        """Read SNMP V3 Engine ID  # noqa: E501

        Read SNMP V3 Engine ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_snmpv3_engine_id_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeSnmpV3EngineID
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_snmpv3_engine_id" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/snmp/v3-engine-id', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeSnmpV3EngineID',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_ssh_service(self, **kwargs):  # noqa: E501
        """Read ssh service properties  # noqa: E501

        Read ssh service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_ssh_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeSshServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_ssh_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_ssh_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_ssh_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read ssh service properties  # noqa: E501

        Read ssh service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_ssh_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeSshServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_ssh_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ssh', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeSshServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_ssh_service_status(self, **kwargs):  # noqa: E501
        """Read ssh service status  # noqa: E501

        Read ssh service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_ssh_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_ssh_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_ssh_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_ssh_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read ssh service status  # noqa: E501

        Read ssh service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_ssh_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_ssh_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ssh/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_syslog_service(self, **kwargs):  # noqa: E501
        """Read syslog service properties  # noqa: E501

        Read syslog service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_syslog_service(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_syslog_service_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_syslog_service_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_syslog_service_with_http_info(self, **kwargs):  # noqa: E501
        """Read syslog service properties  # noqa: E501

        Read syslog service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_syslog_service_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_syslog_service" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_syslog_service_status(self, **kwargs):  # noqa: E501
        """Read syslog service status  # noqa: E501

        Read syslog service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_syslog_service_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_syslog_service_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_syslog_service_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_syslog_service_status_with_http_info(self, **kwargs):  # noqa: E501
        """Read syslog service status  # noqa: E501

        Read syslog service status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_syslog_service_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeServiceStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_syslog_service_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeServiceStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_policy_service_logging_level_action_reset_manager_logging_levels(self, **kwargs):  # noqa: E501
        """Reset the logging levels to default values  # noqa: E501

        Reset the logging levels to default values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_policy_service_logging_level_action_reset_manager_logging_levels(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_policy_service_logging_level_action_reset_manager_logging_levels_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.reset_policy_service_logging_level_action_reset_manager_logging_levels_with_http_info(**kwargs)  # noqa: E501
            return data

    def reset_policy_service_logging_level_action_reset_manager_logging_levels_with_http_info(self, **kwargs):  # noqa: E501
        """Reset the logging levels to default values  # noqa: E501

        Reset the logging levels to default values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_policy_service_logging_level_action_reset_manager_logging_levels_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_policy_service_logging_level_action_reset_manager_logging_levels" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/policy?action=reset-manager-logging-levels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_proton_service_logging_level_action_reset_manager_logging_levels(self, **kwargs):  # noqa: E501
        """Reset the logging levels to default values  # noqa: E501

        Reset the logging levels to default values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_proton_service_logging_level_action_reset_manager_logging_levels(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_proton_service_logging_level_action_reset_manager_logging_levels_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.reset_proton_service_logging_level_action_reset_manager_logging_levels_with_http_info(**kwargs)  # noqa: E501
            return data

    def reset_proton_service_logging_level_action_reset_manager_logging_levels_with_http_info(self, **kwargs):  # noqa: E501
        """Reset the logging levels to default values  # noqa: E501

        Reset the logging levels to default values  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_proton_service_logging_level_action_reset_manager_logging_levels_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_proton_service_logging_level_action_reset_manager_logging_levels" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/manager?action=reset-manager-logging-levels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restart_or_shutdown_node_restart(self, **kwargs):  # noqa: E501
        """Restart or shutdown node  # noqa: E501

        Restarts or shuts down the NSX appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_or_shutdown_node_restart(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restart_or_shutdown_node_restart_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.restart_or_shutdown_node_restart_with_http_info(**kwargs)  # noqa: E501
            return data

    def restart_or_shutdown_node_restart_with_http_info(self, **kwargs):  # noqa: E501
        """Restart or shutdown node  # noqa: E501

        Restarts or shuts down the NSX appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_or_shutdown_node_restart_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restart_or_shutdown_node_restart" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node?action=restart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restart_or_shutdown_node_shutdown(self, **kwargs):  # noqa: E501
        """Restart or shutdown node  # noqa: E501

        Restarts or shuts down the NSX appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_or_shutdown_node_shutdown(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restart_or_shutdown_node_shutdown_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.restart_or_shutdown_node_shutdown_with_http_info(**kwargs)  # noqa: E501
            return data

    def restart_or_shutdown_node_shutdown_with_http_info(self, **kwargs):  # noqa: E501
        """Restart or shutdown node  # noqa: E501

        Restarts or shuts down the NSX appliance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restart_or_shutdown_node_shutdown_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restart_or_shutdown_node_shutdown" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node?action=shutdown', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_controller_profiler(self, body, **kwargs):  # noqa: E501
        """Enable or disable controller profiler  # noqa: E501

        Enable or disable controller profiler  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_controller_profiler(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ControllerProfilerProperties body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_controller_profiler_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.set_controller_profiler_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def set_controller_profiler_with_http_info(self, body, **kwargs):  # noqa: E501
        """Enable or disable controller profiler  # noqa: E501

        Enable or disable controller profiler  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_controller_profiler_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ControllerProfilerProperties body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_controller_profiler" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_controller_profiler`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/controller/profiler', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_node_mandatory_access_control(self, body, **kwargs):  # noqa: E501
        """Enable or disable  Mandatory Access Control  # noqa: E501

        Enable or disable  Mandatory Access Control  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_node_mandatory_access_control(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MandatoryAccessControlProperties body: (required)
        :return: MandatoryAccessControlProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_node_mandatory_access_control_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.set_node_mandatory_access_control_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def set_node_mandatory_access_control_with_http_info(self, body, **kwargs):  # noqa: E501
        """Enable or disable  Mandatory Access Control  # noqa: E501

        Enable or disable  Mandatory Access Control  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_node_mandatory_access_control_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MandatoryAccessControlProperties body: (required)
        :return: MandatoryAccessControlProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_node_mandatory_access_control" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_node_mandatory_access_control`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/hardening-policy/mandatory-access-control', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MandatoryAccessControlProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_rabbit_mq_management_port(self, **kwargs):  # noqa: E501
        """Set RabbitMQ management port  # noqa: E501

        Set RabbitMQ management port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_rabbit_mq_management_port(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_rabbit_mq_management_port_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.set_rabbit_mq_management_port_with_http_info(**kwargs)  # noqa: E501
            return data

    def set_rabbit_mq_management_port_with_http_info(self, **kwargs):  # noqa: E501
        """Set RabbitMQ management port  # noqa: E501

        Set RabbitMQ management port  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_rabbit_mq_management_port_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_rabbit_mq_management_port" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/rabbitmq-management-port', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_appliance_node_status_clear_bootup_error(self, **kwargs):  # noqa: E501
        """Update node status  # noqa: E501

        Clear node bootup status   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_appliance_node_status_clear_bootup_error(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_appliance_node_status_clear_bootup_error_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.update_appliance_node_status_clear_bootup_error_with_http_info(**kwargs)  # noqa: E501
            return data

    def update_appliance_node_status_clear_bootup_error_with_http_info(self, **kwargs):  # noqa: E501
        """Update node status  # noqa: E501

        Clear node bootup status   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_appliance_node_status_clear_bootup_error_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: NodeStatusProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_appliance_node_status_clear_bootup_error" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/status?action=clear_bootup_error', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeStatusProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_auth_provider_vidm(self, body, **kwargs):  # noqa: E501
        """Update AAA provider vIDM properties  # noqa: E501

        Update AAA provider vIDM properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_auth_provider_vidm(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeAuthProviderVidmProperties body: (required)
        :return: NodeAuthProviderVidmProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_auth_provider_vidm_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_auth_provider_vidm_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_auth_provider_vidm_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update AAA provider vIDM properties  # noqa: E501

        Update AAA provider vIDM properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_auth_provider_vidm_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeAuthProviderVidmProperties body: (required)
        :return: NodeAuthProviderVidmProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_auth_provider_vidm" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_auth_provider_vidm`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/aaa/providers/vidm', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeAuthProviderVidmProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_file(self, file_name, **kwargs):  # noqa: E501
        """Replace file contents  # noqa: E501

        Replace file contents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_file(file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: Name of the file to replace (required)
        :return: FileProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_file_with_http_info(file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_file_with_http_info(file_name, **kwargs)  # noqa: E501
            return data

    def update_file_with_http_info(self, file_name, **kwargs):  # noqa: E501
        """Replace file contents  # noqa: E501

        Replace file contents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_file_with_http_info(file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file_name: Name of the file to replace (required)
        :return: FileProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `update_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'file_name' in params:
            path_params['file-name'] = params['file_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/file-store/{file-name}/data', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_node_interface(self, body, interface_id, **kwargs):  # noqa: E501
        """Update the NSX Manager's Network Interface  # noqa: E501

        Updates the specified interface properties. You cannot change the properties <code>ip_configuration</code>, <code>ip_addresses</code>, or <code>plane</code>. NSX Manager must have a static IP address. You must use NSX CLI to configure a controller or an edge node.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_interface(body, interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeNetworkInterfaceProperties body: (required)
        :param str interface_id: ID of interface to update (required)
        :return: NodeNetworkInterfaceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_node_interface_with_http_info(body, interface_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_node_interface_with_http_info(body, interface_id, **kwargs)  # noqa: E501
            return data

    def update_node_interface_with_http_info(self, body, interface_id, **kwargs):  # noqa: E501
        """Update the NSX Manager's Network Interface  # noqa: E501

        Updates the specified interface properties. You cannot change the properties <code>ip_configuration</code>, <code>ip_addresses</code>, or <code>plane</code>. NSX Manager must have a static IP address. You must use NSX CLI to configure a controller or an edge node.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_interface_with_http_info(body, interface_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeNetworkInterfaceProperties body: (required)
        :param str interface_id: ID of interface to update (required)
        :return: NodeNetworkInterfaceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'interface_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_node_interface" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_node_interface`")  # noqa: E501
        # verify the required parameter 'interface_id' is set
        if ('interface_id' not in params or
                params['interface_id'] is None):
            raise ValueError("Missing the required parameter `interface_id` when calling `update_node_interface`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'interface_id' in params:
            path_params['interface-id'] = params['interface_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/network/interfaces/{interface-id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeNetworkInterfaceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_node_name_servers(self, body, **kwargs):  # noqa: E501
        """Update the NSX Manager's Name Servers  # noqa: E501

        Modifies the list of servers that the NSX Manager node uses to look up IP addresses associated with given domain names. If DHCP is configured, this method returns a 409 CONFLICT error, because DHCP manages the list of name servers.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_name_servers(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeNameServersProperties body: (required)
        :return: NodeNameServersProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_node_name_servers_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_node_name_servers_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_node_name_servers_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update the NSX Manager's Name Servers  # noqa: E501

        Modifies the list of servers that the NSX Manager node uses to look up IP addresses associated with given domain names. If DHCP is configured, this method returns a 409 CONFLICT error, because DHCP manages the list of name servers.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_name_servers_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeNameServersProperties body: (required)
        :return: NodeNameServersProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_node_name_servers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_node_name_servers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/network/name-servers', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeNameServersProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_node_properties(self, body, **kwargs):  # noqa: E501
        """Update node properties  # noqa: E501

        Modifies NSX appliance properties. Modifiable properties include the timezone, message of the day (motd), and hostname. The NSX appliance node_version, system_time, and kernel_version are read only and cannot be modified with this method.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_properties(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeProperties body: (required)
        :return: NodeProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_node_properties_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_node_properties_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_node_properties_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update node properties  # noqa: E501

        Modifies NSX appliance properties. Modifiable properties include the timezone, message of the day (motd), and hostname. The NSX appliance node_version, system_time, and kernel_version are read only and cannot be modified with this method.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_properties_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeProperties body: (required)
        :return: NodeProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_node_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_node_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_node_search_domains(self, body, **kwargs):  # noqa: E501
        """Update the NSX Manager's Search Domains  # noqa: E501

        Modifies the list of domain names that the NSX Manager node uses to complete unqualified host names. If DHCP is configured, this method returns a 409 CONFLICT error, because DHCP manages the list of name servers.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_search_domains(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeSearchDomainsProperties body: (required)
        :return: NodeSearchDomainsProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_node_search_domains_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_node_search_domains_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_node_search_domains_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update the NSX Manager's Search Domains  # noqa: E501

        Modifies the list of domain names that the NSX Manager node uses to complete unqualified host names. If DHCP is configured, this method returns a 409 CONFLICT error, because DHCP manages the list of name servers.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_search_domains_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeSearchDomainsProperties body: (required)
        :return: NodeSearchDomainsProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_node_search_domains" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_node_search_domains`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/network/search-domains', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeSearchDomainsProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_node_user(self, body, userid, **kwargs):  # noqa: E501
        """Update node user  # noqa: E501

        Updates attributes of an existing NSX appliance user. This method cannot be used to add a new user. Modifiable attributes include the username, full name of the user, and password. If you specify a password in a PUT request, it is not returned in the response. Nor is it returned in a GET request. The specified password does not meet the following complexity requirements: - minimum 12 characters in length - minimum 1 uppercase character - minimum 1 lowercase character - minimum 1 numeric character - minimum 1 special character - minimum 5 unique characters - default password complexity rules as enforced by the Linux PAM module   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_user(body, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeUserProperties body: (required)
        :param str userid: User id of the user (required)
        :return: NodeUserProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_node_user_with_http_info(body, userid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_node_user_with_http_info(body, userid, **kwargs)  # noqa: E501
            return data

    def update_node_user_with_http_info(self, body, userid, **kwargs):  # noqa: E501
        """Update node user  # noqa: E501

        Updates attributes of an existing NSX appliance user. This method cannot be used to add a new user. Modifiable attributes include the username, full name of the user, and password. If you specify a password in a PUT request, it is not returned in the response. Nor is it returned in a GET request. The specified password does not meet the following complexity requirements: - minimum 12 characters in length - minimum 1 uppercase character - minimum 1 lowercase character - minimum 1 numeric character - minimum 1 special character - minimum 5 unique characters - default password complexity rules as enforced by the Linux PAM module   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_node_user_with_http_info(body, userid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeUserProperties body: (required)
        :param str userid: User id of the user (required)
        :return: NodeUserProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'userid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_node_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_node_user`")  # noqa: E501
        # verify the required parameter 'userid' is set
        if ('userid' not in params or
                params['userid'] is None):
            raise ValueError("Missing the required parameter `userid` when calling `update_node_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'userid' in params:
            path_params['userid'] = params['userid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/users/{userid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeUserProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ntp_service(self, body, **kwargs):  # noqa: E501
        """Update NTP service properties  # noqa: E501

        Update NTP service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ntp_service(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeNtpServiceProperties body: (required)
        :return: NodeNtpServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ntp_service_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ntp_service_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_ntp_service_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update NTP service properties  # noqa: E501

        Update NTP service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ntp_service_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeNtpServiceProperties body: (required)
        :return: NodeNtpServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ntp_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_ntp_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ntp', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeNtpServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_policy_service(self, body, **kwargs):  # noqa: E501
        """Update service properties  # noqa: E501

        Update service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_policy_service(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodePolicyServiceProperties body: (required)
        :return: NodePolicyServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_policy_service_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_policy_service_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_policy_service_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update service properties  # noqa: E501

        Update service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_policy_service_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodePolicyServiceProperties body: (required)
        :return: NodePolicyServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_policy_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_policy_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/policy', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodePolicyServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_proton_service(self, body, **kwargs):  # noqa: E501
        """Update service properties  # noqa: E501

        Update service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_proton_service(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeProtonServiceProperties body: (required)
        :return: NodeProtonServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_proton_service_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_proton_service_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_proton_service_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update service properties  # noqa: E501

        Update service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_proton_service_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeProtonServiceProperties body: (required)
        :return: NodeProtonServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_proton_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_proton_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/manager', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeProtonServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_proxy_service(self, body, **kwargs):  # noqa: E501
        """Update http service properties  # noqa: E501

        This API is deprecated.  Make changes to the http service configuration by calling the PUT /api/v1/cluster/api-service API.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_proxy_service(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeHttpServiceProperties body: (required)
        :return: NodeHttpServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_proxy_service_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_proxy_service_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_proxy_service_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update http service properties  # noqa: E501

        This API is deprecated.  Make changes to the http service configuration by calling the PUT /api/v1/cluster/api-service API.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_proxy_service_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeHttpServiceProperties body: (required)
        :return: NodeHttpServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_proxy_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_proxy_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/http', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeHttpServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_repository_service(self, body, **kwargs):  # noqa: E501
        """Update NSX install-upgrade service properties  # noqa: E501

        Update NSX install-upgrade service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository_service(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeInstallUpgradeServiceProperties body: (required)
        :return: NodeInstallUpgradeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_repository_service_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_repository_service_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_repository_service_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update NSX install-upgrade service properties  # noqa: E501

        Update NSX install-upgrade service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_repository_service_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeInstallUpgradeServiceProperties body: (required)
        :return: NodeInstallUpgradeServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_repository_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_repository_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/install-upgrade', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeInstallUpgradeServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_snmp_service(self, body, **kwargs):  # noqa: E501
        """Update SNMP service properties  # noqa: E501

        Update SNMP service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_snmp_service(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeSnmpServiceProperties body: (required)
        :return: NodeSnmpServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_snmp_service_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_snmp_service_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_snmp_service_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update SNMP service properties  # noqa: E501

        Update SNMP service properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_snmp_service_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeSnmpServiceProperties body: (required)
        :return: NodeSnmpServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_snmp_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_snmp_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/snmp', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeSnmpServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_snmpv3_engine_id(self, body, **kwargs):  # noqa: E501
        """Update SNMP V3 Engine ID  # noqa: E501

        Update SNMP V3 Engine ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_snmpv3_engine_id(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeSnmpV3EngineID body: (required)
        :return: NodeSnmpV3EngineID
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_snmpv3_engine_id_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_snmpv3_engine_id_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_snmpv3_engine_id_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update SNMP V3 Engine ID  # noqa: E501

        Update SNMP V3 Engine ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_snmpv3_engine_id_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeSnmpV3EngineID body: (required)
        :return: NodeSnmpV3EngineID
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_snmpv3_engine_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_snmpv3_engine_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/snmp/v3-engine-id', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeSnmpV3EngineID',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ssh_service(self, body, **kwargs):  # noqa: E501
        """Update ssh service properties  # noqa: E501

        Update ssh service properties. If the start_on_boot property is updated to true, existing ssh sessions if any are stopped and the ssh service is restarted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ssh_service(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeSshServiceProperties body: (required)
        :return: NodeSshServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ssh_service_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ssh_service_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_ssh_service_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update ssh service properties  # noqa: E501

        Update ssh service properties. If the start_on_boot property is updated to true, existing ssh sessions if any are stopped and the ssh service is restarted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ssh_service_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NodeSshServiceProperties body: (required)
        :return: NodeSshServiceProperties
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ssh_service" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_ssh_service`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/ssh', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NodeSshServiceProperties',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_uc_state(self, body, **kwargs):  # noqa: E501
        """Update UC state properties  # noqa: E501

        Update UC state properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_uc_state(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UcStateProperties body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_uc_state_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_uc_state_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_uc_state_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update UC state properties  # noqa: E501

        Update UC state properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_uc_state_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UcStateProperties body: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_uc_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_uc_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/install-upgrade/uc-state', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def verify_node_syslog_exporter_verify(self, **kwargs):  # noqa: E501
        """Verify node syslog exporter  # noqa: E501

        Collect iptables rules needed for all existing syslog exporters and verify if the existing iptables rules are the same. If not, remove the stale rules and add the new rules to make sure all exporters work properly.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_node_syslog_exporter_verify(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.verify_node_syslog_exporter_verify_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.verify_node_syslog_exporter_verify_with_http_info(**kwargs)  # noqa: E501
            return data

    def verify_node_syslog_exporter_verify_with_http_info(self, **kwargs):  # noqa: E501
        """Verify node syslog exporter  # noqa: E501

        Collect iptables rules needed for all existing syslog exporters and verify if the existing iptables rules are the same. If not, remove the stale rules and add the new rules to make sure all exporters work properly.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.verify_node_syslog_exporter_verify_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_node_syslog_exporter_verify" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/node/services/syslog/exporters?action=verify', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
