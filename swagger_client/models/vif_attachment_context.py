# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class VifAttachmentContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allocate_addresses': 'str',
        'resource_type': 'str',
        'vif_type': 'str',
        'parent_vif_id': 'str',
        'app_id': 'str',
        'traffic_tag': 'int',
        'transport_node_uuid': 'str'
    }
    if hasattr(AttachmentContext, "swagger_types"):
        swagger_types.update(AttachmentContext.swagger_types)

    attribute_map = {
        'allocate_addresses': 'allocate_addresses',
        'resource_type': 'resource_type',
        'vif_type': 'vif_type',
        'parent_vif_id': 'parent_vif_id',
        'app_id': 'app_id',
        'traffic_tag': 'traffic_tag',
        'transport_node_uuid': 'transport_node_uuid'
    }
    if hasattr(AttachmentContext, "attribute_map"):
        attribute_map.update(AttachmentContext.attribute_map)

    def __init__(self, allocate_addresses=None, resource_type=None, vif_type=None, parent_vif_id=None, app_id=None, traffic_tag=None, transport_node_uuid=None, *args, **kwargs):  # noqa: E501
        """VifAttachmentContext - a model defined in Swagger"""  # noqa: E501
        self._allocate_addresses = None
        self._resource_type = None
        self._vif_type = None
        self._parent_vif_id = None
        self._app_id = None
        self._traffic_tag = None
        self._transport_node_uuid = None
        self.discriminator = None
        if allocate_addresses is not None:
            self.allocate_addresses = allocate_addresses
        self.resource_type = resource_type
        self.vif_type = vif_type
        if parent_vif_id is not None:
            self.parent_vif_id = parent_vif_id
        if app_id is not None:
            self.app_id = app_id
        if traffic_tag is not None:
            self.traffic_tag = traffic_tag
        if transport_node_uuid is not None:
            self.transport_node_uuid = transport_node_uuid
        AttachmentContext.__init__(self, *args, **kwargs)

    @property
    def allocate_addresses(self):
        """Gets the allocate_addresses of this VifAttachmentContext.  # noqa: E501

        A flag to indicate whether to allocate addresses from allocation     pools bound to the parent logical switch.   # noqa: E501

        :return: The allocate_addresses of this VifAttachmentContext.  # noqa: E501
        :rtype: str
        """
        return self._allocate_addresses

    @allocate_addresses.setter
    def allocate_addresses(self, allocate_addresses):
        """Sets the allocate_addresses of this VifAttachmentContext.

        A flag to indicate whether to allocate addresses from allocation     pools bound to the parent logical switch.   # noqa: E501

        :param allocate_addresses: The allocate_addresses of this VifAttachmentContext.  # noqa: E501
        :type: str
        """
        allowed_values = ["IpPool", "MacPool", "Both", "None"]  # noqa: E501
        if allocate_addresses not in allowed_values:
            raise ValueError(
                "Invalid value for `allocate_addresses` ({0}), must be one of {1}"  # noqa: E501
                .format(allocate_addresses, allowed_values)
            )

        self._allocate_addresses = allocate_addresses

    @property
    def resource_type(self):
        """Gets the resource_type of this VifAttachmentContext.  # noqa: E501

        Used to identify which concrete class it is  # noqa: E501

        :return: The resource_type of this VifAttachmentContext.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this VifAttachmentContext.

        Used to identify which concrete class it is  # noqa: E501

        :param resource_type: The resource_type of this VifAttachmentContext.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def vif_type(self):
        """Gets the vif_type of this VifAttachmentContext.  # noqa: E501

        Type of the VIF attached to logical port  # noqa: E501

        :return: The vif_type of this VifAttachmentContext.  # noqa: E501
        :rtype: str
        """
        return self._vif_type

    @vif_type.setter
    def vif_type(self, vif_type):
        """Sets the vif_type of this VifAttachmentContext.

        Type of the VIF attached to logical port  # noqa: E501

        :param vif_type: The vif_type of this VifAttachmentContext.  # noqa: E501
        :type: str
        """
        if vif_type is None:
            raise ValueError("Invalid value for `vif_type`, must not be `None`")  # noqa: E501
        allowed_values = ["PARENT", "CHILD", "INDEPENDENT"]  # noqa: E501
        if vif_type not in allowed_values:
            raise ValueError(
                "Invalid value for `vif_type` ({0}), must be one of {1}"  # noqa: E501
                .format(vif_type, allowed_values)
            )

        self._vif_type = vif_type

    @property
    def parent_vif_id(self):
        """Gets the parent_vif_id of this VifAttachmentContext.  # noqa: E501

        VIF ID of the parent VIF if vif_type is CHILD  # noqa: E501

        :return: The parent_vif_id of this VifAttachmentContext.  # noqa: E501
        :rtype: str
        """
        return self._parent_vif_id

    @parent_vif_id.setter
    def parent_vif_id(self, parent_vif_id):
        """Sets the parent_vif_id of this VifAttachmentContext.

        VIF ID of the parent VIF if vif_type is CHILD  # noqa: E501

        :param parent_vif_id: The parent_vif_id of this VifAttachmentContext.  # noqa: E501
        :type: str
        """

        self._parent_vif_id = parent_vif_id

    @property
    def app_id(self):
        """Gets the app_id of this VifAttachmentContext.  # noqa: E501

        An application ID used to identify / look up a child VIF behind a parent VIF. Only effective when vif_type is CHILD.   # noqa: E501

        :return: The app_id of this VifAttachmentContext.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this VifAttachmentContext.

        An application ID used to identify / look up a child VIF behind a parent VIF. Only effective when vif_type is CHILD.   # noqa: E501

        :param app_id: The app_id of this VifAttachmentContext.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def traffic_tag(self):
        """Gets the traffic_tag of this VifAttachmentContext.  # noqa: E501

        Current we use VLAN id as the traffic tag. Only effective when vif_type is CHILD. Each logical port inside a container must have a unique traffic tag. If the traffic_tag is not unique, no error is generated, but traffic will not be delivered to any port with a non-unique tag.   # noqa: E501

        :return: The traffic_tag of this VifAttachmentContext.  # noqa: E501
        :rtype: int
        """
        return self._traffic_tag

    @traffic_tag.setter
    def traffic_tag(self, traffic_tag):
        """Sets the traffic_tag of this VifAttachmentContext.

        Current we use VLAN id as the traffic tag. Only effective when vif_type is CHILD. Each logical port inside a container must have a unique traffic tag. If the traffic_tag is not unique, no error is generated, but traffic will not be delivered to any port with a non-unique tag.   # noqa: E501

        :param traffic_tag: The traffic_tag of this VifAttachmentContext.  # noqa: E501
        :type: int
        """

        self._traffic_tag = traffic_tag

    @property
    def transport_node_uuid(self):
        """Gets the transport_node_uuid of this VifAttachmentContext.  # noqa: E501

        Only effective when vif_type is INDEPENDENT. Each logical port inside a bare metal server or container must have a transport node UUID. We use transport node ID as transport node UUID.   # noqa: E501

        :return: The transport_node_uuid of this VifAttachmentContext.  # noqa: E501
        :rtype: str
        """
        return self._transport_node_uuid

    @transport_node_uuid.setter
    def transport_node_uuid(self, transport_node_uuid):
        """Sets the transport_node_uuid of this VifAttachmentContext.

        Only effective when vif_type is INDEPENDENT. Each logical port inside a bare metal server or container must have a transport node UUID. We use transport node ID as transport node UUID.   # noqa: E501

        :param transport_node_uuid: The transport_node_uuid of this VifAttachmentContext.  # noqa: E501
        :type: str
        """

        self._transport_node_uuid = transport_node_uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VifAttachmentContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VifAttachmentContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
