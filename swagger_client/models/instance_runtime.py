# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InstanceRuntime(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system_owned': 'bool',
        'display_name': 'str',
        'description': 'str',
        'tags': 'list[Tag]',
        'create_user': 'str',
        'protection': 'str',
        'create_time': 'int',
        'last_modified_time': 'int',
        'last_modified_user': 'str',
        'id': 'str',
        'resource_type': 'str',
        'service_vm_id': 'str',
        'deployment_status': 'str',
        'vm_nic_info': 'VmNicInfo',
        'maintenance_mode': 'str',
        'runtime_status': 'str',
        'error_message': 'str',
        'service_instance_id': 'str',
        'runtime_health_status_by_partner': 'str',
        'unhealthy_reason': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'system_owned': '_system_owned',
        'display_name': 'display_name',
        'description': 'description',
        'tags': 'tags',
        'create_user': '_create_user',
        'protection': '_protection',
        'create_time': '_create_time',
        'last_modified_time': '_last_modified_time',
        'last_modified_user': '_last_modified_user',
        'id': 'id',
        'resource_type': 'resource_type',
        'service_vm_id': 'service_vm_id',
        'deployment_status': 'deployment_status',
        'vm_nic_info': 'vm_nic_info',
        'maintenance_mode': 'maintenance_mode',
        'runtime_status': 'runtime_status',
        'error_message': 'error_message',
        'service_instance_id': 'service_instance_id',
        'runtime_health_status_by_partner': 'runtime_health_status_by_partner',
        'unhealthy_reason': 'unhealthy_reason'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, system_owned=None, display_name=None, description=None, tags=None, create_user=None, protection=None, create_time=None, last_modified_time=None, last_modified_user=None, id=None, resource_type=None, service_vm_id=None, deployment_status=None, vm_nic_info=None, maintenance_mode=None, runtime_status=None, error_message=None, service_instance_id=None, runtime_health_status_by_partner=None, unhealthy_reason=None, *args, **kwargs):  # noqa: E501
        """InstanceRuntime - a model defined in Swagger"""  # noqa: E501
        self._system_owned = None
        self._display_name = None
        self._description = None
        self._tags = None
        self._create_user = None
        self._protection = None
        self._create_time = None
        self._last_modified_time = None
        self._last_modified_user = None
        self._id = None
        self._resource_type = None
        self._service_vm_id = None
        self._deployment_status = None
        self._vm_nic_info = None
        self._maintenance_mode = None
        self._runtime_status = None
        self._error_message = None
        self._service_instance_id = None
        self._runtime_health_status_by_partner = None
        self._unhealthy_reason = None
        self.discriminator = None
        if system_owned is not None:
            self.system_owned = system_owned
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if create_user is not None:
            self.create_user = create_user
        if protection is not None:
            self.protection = protection
        if create_time is not None:
            self.create_time = create_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if last_modified_user is not None:
            self.last_modified_user = last_modified_user
        if id is not None:
            self.id = id
        if resource_type is not None:
            self.resource_type = resource_type
        if service_vm_id is not None:
            self.service_vm_id = service_vm_id
        if deployment_status is not None:
            self.deployment_status = deployment_status
        if vm_nic_info is not None:
            self.vm_nic_info = vm_nic_info
        if maintenance_mode is not None:
            self.maintenance_mode = maintenance_mode
        if runtime_status is not None:
            self.runtime_status = runtime_status
        if error_message is not None:
            self.error_message = error_message
        if service_instance_id is not None:
            self.service_instance_id = service_instance_id
        if runtime_health_status_by_partner is not None:
            self.runtime_health_status_by_partner = runtime_health_status_by_partner
        if unhealthy_reason is not None:
            self.unhealthy_reason = unhealthy_reason
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def system_owned(self):
        """Gets the system_owned of this InstanceRuntime.  # noqa: E501

        Indicates system owned resource  # noqa: E501

        :return: The system_owned of this InstanceRuntime.  # noqa: E501
        :rtype: bool
        """
        return self._system_owned

    @system_owned.setter
    def system_owned(self, system_owned):
        """Sets the system_owned of this InstanceRuntime.

        Indicates system owned resource  # noqa: E501

        :param system_owned: The system_owned of this InstanceRuntime.  # noqa: E501
        :type: bool
        """

        self._system_owned = system_owned

    @property
    def display_name(self):
        """Gets the display_name of this InstanceRuntime.  # noqa: E501

        Defaults to ID if not set  # noqa: E501

        :return: The display_name of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InstanceRuntime.

        Defaults to ID if not set  # noqa: E501

        :param display_name: The display_name of this InstanceRuntime.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this InstanceRuntime.  # noqa: E501

        Description of this resource  # noqa: E501

        :return: The description of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InstanceRuntime.

        Description of this resource  # noqa: E501

        :param description: The description of this InstanceRuntime.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this InstanceRuntime.  # noqa: E501

        Opaque identifiers meaningful to the API user  # noqa: E501

        :return: The tags of this InstanceRuntime.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this InstanceRuntime.

        Opaque identifiers meaningful to the API user  # noqa: E501

        :param tags: The tags of this InstanceRuntime.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def create_user(self):
        """Gets the create_user of this InstanceRuntime.  # noqa: E501

        ID of the user who created this resource  # noqa: E501

        :return: The create_user of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._create_user

    @create_user.setter
    def create_user(self, create_user):
        """Sets the create_user of this InstanceRuntime.

        ID of the user who created this resource  # noqa: E501

        :param create_user: The create_user of this InstanceRuntime.  # noqa: E501
        :type: str
        """

        self._create_user = create_user

    @property
    def protection(self):
        """Gets the protection of this InstanceRuntime.  # noqa: E501

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :return: The protection of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this InstanceRuntime.

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :param protection: The protection of this InstanceRuntime.  # noqa: E501
        :type: str
        """

        self._protection = protection

    @property
    def create_time(self):
        """Gets the create_time of this InstanceRuntime.  # noqa: E501

        Timestamp of resource creation  # noqa: E501

        :return: The create_time of this InstanceRuntime.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this InstanceRuntime.

        Timestamp of resource creation  # noqa: E501

        :param create_time: The create_time of this InstanceRuntime.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this InstanceRuntime.  # noqa: E501

        Timestamp of last modification  # noqa: E501

        :return: The last_modified_time of this InstanceRuntime.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this InstanceRuntime.

        Timestamp of last modification  # noqa: E501

        :param last_modified_time: The last_modified_time of this InstanceRuntime.  # noqa: E501
        :type: int
        """

        self._last_modified_time = last_modified_time

    @property
    def last_modified_user(self):
        """Gets the last_modified_user of this InstanceRuntime.  # noqa: E501

        ID of the user who last modified this resource  # noqa: E501

        :return: The last_modified_user of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_user

    @last_modified_user.setter
    def last_modified_user(self, last_modified_user):
        """Sets the last_modified_user of this InstanceRuntime.

        ID of the user who last modified this resource  # noqa: E501

        :param last_modified_user: The last_modified_user of this InstanceRuntime.  # noqa: E501
        :type: str
        """

        self._last_modified_user = last_modified_user

    @property
    def id(self):
        """Gets the id of this InstanceRuntime.  # noqa: E501

        Unique identifier of this resource  # noqa: E501

        :return: The id of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InstanceRuntime.

        Unique identifier of this resource  # noqa: E501

        :param id: The id of this InstanceRuntime.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resource_type(self):
        """Gets the resource_type of this InstanceRuntime.  # noqa: E501

        The type of this resource.  # noqa: E501

        :return: The resource_type of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this InstanceRuntime.

        The type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this InstanceRuntime.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def service_vm_id(self):
        """Gets the service_vm_id of this InstanceRuntime.  # noqa: E501

        Service-VM/SVM id of deployed virtual-machine.  # noqa: E501

        :return: The service_vm_id of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._service_vm_id

    @service_vm_id.setter
    def service_vm_id(self, service_vm_id):
        """Sets the service_vm_id of this InstanceRuntime.

        Service-VM/SVM id of deployed virtual-machine.  # noqa: E501

        :param service_vm_id: The service_vm_id of this InstanceRuntime.  # noqa: E501
        :type: str
        """

        self._service_vm_id = service_vm_id

    @property
    def deployment_status(self):
        """Gets the deployment_status of this InstanceRuntime.  # noqa: E501

        Service-Instance Runtime deployment status of the Service-VM. It shows the latest status during the process of deployment, redeploy, upgrade, and un-deployment of VM.  # noqa: E501

        :return: The deployment_status of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._deployment_status

    @deployment_status.setter
    def deployment_status(self, deployment_status):
        """Sets the deployment_status of this InstanceRuntime.

        Service-Instance Runtime deployment status of the Service-VM. It shows the latest status during the process of deployment, redeploy, upgrade, and un-deployment of VM.  # noqa: E501

        :param deployment_status: The deployment_status of this InstanceRuntime.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEPLOYMENT_IN_PROGRESS", "DEPLOYMENT_FAILED", "DEPLOYMENT_SUCCESSFUL", "UPGRADE_IN_PROGRESS", "UPGRADE_FAILED", "UNDEPLOYMENT_IN_PROGRESS", "UNDEPLOYMENT_FAILED", "UNDEPLOYMENT_SUCCESSFUL", "UNKNOWN"]  # noqa: E501
        if deployment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(deployment_status, allowed_values)
            )

        self._deployment_status = deployment_status

    @property
    def vm_nic_info(self):
        """Gets the vm_nic_info of this InstanceRuntime.  # noqa: E501


        :return: The vm_nic_info of this InstanceRuntime.  # noqa: E501
        :rtype: VmNicInfo
        """
        return self._vm_nic_info

    @vm_nic_info.setter
    def vm_nic_info(self, vm_nic_info):
        """Sets the vm_nic_info of this InstanceRuntime.


        :param vm_nic_info: The vm_nic_info of this InstanceRuntime.  # noqa: E501
        :type: VmNicInfo
        """

        self._vm_nic_info = vm_nic_info

    @property
    def maintenance_mode(self):
        """Gets the maintenance_mode of this InstanceRuntime.  # noqa: E501

        The maintenance mode indicates whether the corresponding service VM is in maintenance mode. The service VM will not be used to service new requests if it is in maintenance mode.   # noqa: E501

        :return: The maintenance_mode of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_mode

    @maintenance_mode.setter
    def maintenance_mode(self, maintenance_mode):
        """Sets the maintenance_mode of this InstanceRuntime.

        The maintenance mode indicates whether the corresponding service VM is in maintenance mode. The service VM will not be used to service new requests if it is in maintenance mode.   # noqa: E501

        :param maintenance_mode: The maintenance_mode of this InstanceRuntime.  # noqa: E501
        :type: str
        """
        allowed_values = ["OFF", "ENTERING", "ON", "EXITING"]  # noqa: E501
        if maintenance_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `maintenance_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(maintenance_mode, allowed_values)
            )

        self._maintenance_mode = maintenance_mode

    @property
    def runtime_status(self):
        """Gets the runtime_status of this InstanceRuntime.  # noqa: E501

        Service-Instance Runtime status of the deployed Service-VM.  # noqa: E501

        :return: The runtime_status of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._runtime_status

    @runtime_status.setter
    def runtime_status(self, runtime_status):
        """Sets the runtime_status of this InstanceRuntime.

        Service-Instance Runtime status of the deployed Service-VM.  # noqa: E501

        :param runtime_status: The runtime_status of this InstanceRuntime.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_SERVICE", "OUT_OF_SERVICE", "NEEDS_ATTENTION", "NOT_AVAILABLE"]  # noqa: E501
        if runtime_status not in allowed_values:
            raise ValueError(
                "Invalid value for `runtime_status` ({0}), must be one of {1}"  # noqa: E501
                .format(runtime_status, allowed_values)
            )

        self._runtime_status = runtime_status

    @property
    def error_message(self):
        """Gets the error_message of this InstanceRuntime.  # noqa: E501

        Error message for the Service Instance Runtime if any.  # noqa: E501

        :return: The error_message of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this InstanceRuntime.

        Error message for the Service Instance Runtime if any.  # noqa: E501

        :param error_message: The error_message of this InstanceRuntime.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def service_instance_id(self):
        """Gets the service_instance_id of this InstanceRuntime.  # noqa: E501

        Id of an instantiation of a registered service.  # noqa: E501

        :return: The service_instance_id of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._service_instance_id

    @service_instance_id.setter
    def service_instance_id(self, service_instance_id):
        """Sets the service_instance_id of this InstanceRuntime.

        Id of an instantiation of a registered service.  # noqa: E501

        :param service_instance_id: The service_instance_id of this InstanceRuntime.  # noqa: E501
        :type: str
        """

        self._service_instance_id = service_instance_id

    @property
    def runtime_health_status_by_partner(self):
        """Gets the runtime_health_status_by_partner of this InstanceRuntime.  # noqa: E501

        Service-Instance runtime health status set by partner to indicate whether the service is running properly or not.   # noqa: E501

        :return: The runtime_health_status_by_partner of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._runtime_health_status_by_partner

    @runtime_health_status_by_partner.setter
    def runtime_health_status_by_partner(self, runtime_health_status_by_partner):
        """Sets the runtime_health_status_by_partner of this InstanceRuntime.

        Service-Instance runtime health status set by partner to indicate whether the service is running properly or not.   # noqa: E501

        :param runtime_health_status_by_partner: The runtime_health_status_by_partner of this InstanceRuntime.  # noqa: E501
        :type: str
        """
        allowed_values = ["HEALTHY", "STOPPED", "NOT_RESPONDING"]  # noqa: E501
        if runtime_health_status_by_partner not in allowed_values:
            raise ValueError(
                "Invalid value for `runtime_health_status_by_partner` ({0}), must be one of {1}"  # noqa: E501
                .format(runtime_health_status_by_partner, allowed_values)
            )

        self._runtime_health_status_by_partner = runtime_health_status_by_partner

    @property
    def unhealthy_reason(self):
        """Gets the unhealthy_reason of this InstanceRuntime.  # noqa: E501

        Reason provided by partner for the service being unhealthy. This could be due to various reasons such as connectivity lost as an example.   # noqa: E501

        :return: The unhealthy_reason of this InstanceRuntime.  # noqa: E501
        :rtype: str
        """
        return self._unhealthy_reason

    @unhealthy_reason.setter
    def unhealthy_reason(self, unhealthy_reason):
        """Sets the unhealthy_reason of this InstanceRuntime.

        Reason provided by partner for the service being unhealthy. This could be due to various reasons such as connectivity lost as an example.   # noqa: E501

        :param unhealthy_reason: The unhealthy_reason of this InstanceRuntime.  # noqa: E501
        :type: str
        """

        self._unhealthy_reason = unhealthy_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstanceRuntime, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceRuntime):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
