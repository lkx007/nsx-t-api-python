# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ManagementNodeAggregateInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_interface_properties': 'list[NodeInterfaceProperties]',
        'node_status': 'ClusterNodeStatus',
        'node_interface_statistics': 'list[NodeInterfaceStatisticsProperties]',
        'display_name': 'str',
        'node_status_properties': 'list[NodeStatusProperties]',
        'id': 'str',
        'transport_nodes_connected': 'int',
        'role_config': 'ManagementClusterRoleConfig'
    }
    if hasattr(BaseNodeAggregateInfo, "swagger_types"):
        swagger_types.update(BaseNodeAggregateInfo.swagger_types)

    attribute_map = {
        'node_interface_properties': 'node_interface_properties',
        'node_status': 'node_status',
        'node_interface_statistics': 'node_interface_statistics',
        'display_name': 'display_name',
        'node_status_properties': 'node_status_properties',
        'id': 'id',
        'transport_nodes_connected': 'transport_nodes_connected',
        'role_config': 'role_config'
    }
    if hasattr(BaseNodeAggregateInfo, "attribute_map"):
        attribute_map.update(BaseNodeAggregateInfo.attribute_map)

    def __init__(self, node_interface_properties=None, node_status=None, node_interface_statistics=None, display_name=None, node_status_properties=None, id=None, transport_nodes_connected=None, role_config=None, *args, **kwargs):  # noqa: E501
        """ManagementNodeAggregateInfo - a model defined in Swagger"""  # noqa: E501
        self._node_interface_properties = None
        self._node_status = None
        self._node_interface_statistics = None
        self._display_name = None
        self._node_status_properties = None
        self._id = None
        self._transport_nodes_connected = None
        self._role_config = None
        self.discriminator = None
        if node_interface_properties is not None:
            self.node_interface_properties = node_interface_properties
        if node_status is not None:
            self.node_status = node_status
        if node_interface_statistics is not None:
            self.node_interface_statistics = node_interface_statistics
        if display_name is not None:
            self.display_name = display_name
        if node_status_properties is not None:
            self.node_status_properties = node_status_properties
        if id is not None:
            self.id = id
        if transport_nodes_connected is not None:
            self.transport_nodes_connected = transport_nodes_connected
        if role_config is not None:
            self.role_config = role_config
        BaseNodeAggregateInfo.__init__(self, *args, **kwargs)

    @property
    def node_interface_properties(self):
        """Gets the node_interface_properties of this ManagementNodeAggregateInfo.  # noqa: E501

        Array of Node interface statistic properties  # noqa: E501

        :return: The node_interface_properties of this ManagementNodeAggregateInfo.  # noqa: E501
        :rtype: list[NodeInterfaceProperties]
        """
        return self._node_interface_properties

    @node_interface_properties.setter
    def node_interface_properties(self, node_interface_properties):
        """Sets the node_interface_properties of this ManagementNodeAggregateInfo.

        Array of Node interface statistic properties  # noqa: E501

        :param node_interface_properties: The node_interface_properties of this ManagementNodeAggregateInfo.  # noqa: E501
        :type: list[NodeInterfaceProperties]
        """

        self._node_interface_properties = node_interface_properties

    @property
    def node_status(self):
        """Gets the node_status of this ManagementNodeAggregateInfo.  # noqa: E501


        :return: The node_status of this ManagementNodeAggregateInfo.  # noqa: E501
        :rtype: ClusterNodeStatus
        """
        return self._node_status

    @node_status.setter
    def node_status(self, node_status):
        """Sets the node_status of this ManagementNodeAggregateInfo.


        :param node_status: The node_status of this ManagementNodeAggregateInfo.  # noqa: E501
        :type: ClusterNodeStatus
        """

        self._node_status = node_status

    @property
    def node_interface_statistics(self):
        """Gets the node_interface_statistics of this ManagementNodeAggregateInfo.  # noqa: E501

        Array of Node network interface statistic properties  # noqa: E501

        :return: The node_interface_statistics of this ManagementNodeAggregateInfo.  # noqa: E501
        :rtype: list[NodeInterfaceStatisticsProperties]
        """
        return self._node_interface_statistics

    @node_interface_statistics.setter
    def node_interface_statistics(self, node_interface_statistics):
        """Sets the node_interface_statistics of this ManagementNodeAggregateInfo.

        Array of Node network interface statistic properties  # noqa: E501

        :param node_interface_statistics: The node_interface_statistics of this ManagementNodeAggregateInfo.  # noqa: E501
        :type: list[NodeInterfaceStatisticsProperties]
        """

        self._node_interface_statistics = node_interface_statistics

    @property
    def display_name(self):
        """Gets the display_name of this ManagementNodeAggregateInfo.  # noqa: E501

        Defaults to ID if not set  # noqa: E501

        :return: The display_name of this ManagementNodeAggregateInfo.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ManagementNodeAggregateInfo.

        Defaults to ID if not set  # noqa: E501

        :param display_name: The display_name of this ManagementNodeAggregateInfo.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def node_status_properties(self):
        """Gets the node_status_properties of this ManagementNodeAggregateInfo.  # noqa: E501

        Time series of the node's system properties  # noqa: E501

        :return: The node_status_properties of this ManagementNodeAggregateInfo.  # noqa: E501
        :rtype: list[NodeStatusProperties]
        """
        return self._node_status_properties

    @node_status_properties.setter
    def node_status_properties(self, node_status_properties):
        """Sets the node_status_properties of this ManagementNodeAggregateInfo.

        Time series of the node's system properties  # noqa: E501

        :param node_status_properties: The node_status_properties of this ManagementNodeAggregateInfo.  # noqa: E501
        :type: list[NodeStatusProperties]
        """

        self._node_status_properties = node_status_properties

    @property
    def id(self):
        """Gets the id of this ManagementNodeAggregateInfo.  # noqa: E501

        Unique identifier of this resource  # noqa: E501

        :return: The id of this ManagementNodeAggregateInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ManagementNodeAggregateInfo.

        Unique identifier of this resource  # noqa: E501

        :param id: The id of this ManagementNodeAggregateInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def transport_nodes_connected(self):
        """Gets the transport_nodes_connected of this ManagementNodeAggregateInfo.  # noqa: E501


        :return: The transport_nodes_connected of this ManagementNodeAggregateInfo.  # noqa: E501
        :rtype: int
        """
        return self._transport_nodes_connected

    @transport_nodes_connected.setter
    def transport_nodes_connected(self, transport_nodes_connected):
        """Sets the transport_nodes_connected of this ManagementNodeAggregateInfo.


        :param transport_nodes_connected: The transport_nodes_connected of this ManagementNodeAggregateInfo.  # noqa: E501
        :type: int
        """

        self._transport_nodes_connected = transport_nodes_connected

    @property
    def role_config(self):
        """Gets the role_config of this ManagementNodeAggregateInfo.  # noqa: E501


        :return: The role_config of this ManagementNodeAggregateInfo.  # noqa: E501
        :rtype: ManagementClusterRoleConfig
        """
        return self._role_config

    @role_config.setter
    def role_config(self, role_config):
        """Sets the role_config of this ManagementNodeAggregateInfo.


        :param role_config: The role_config of this ManagementNodeAggregateInfo.  # noqa: E501
        :type: ManagementClusterRoleConfig
        """

        self._role_config = role_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ManagementNodeAggregateInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManagementNodeAggregateInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
