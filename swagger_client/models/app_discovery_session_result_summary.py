# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AppDiscoverySessionResultSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'end_timestamp': 'int',
        'start_timestamp': 'int',
        'failed_reason': 'str',
        'reclassification': 'str',
        'app_profile_summary_list': 'list[AppDiscoveryAppProfileResultSummary]',
        'ns_groups': 'list[NSGroupMetaInfo]',
        'app_profiles': 'list[AppProfileMetaInfo]'
    }
    if hasattr(AppDiscoverySession, "swagger_types"):
        swagger_types.update(AppDiscoverySession.swagger_types)

    attribute_map = {
        'status': 'status',
        'end_timestamp': 'end_timestamp',
        'start_timestamp': 'start_timestamp',
        'failed_reason': 'failed_reason',
        'reclassification': 'reclassification',
        'app_profile_summary_list': 'app_profile_summary_list',
        'ns_groups': 'ns_groups',
        'app_profiles': 'app_profiles'
    }
    if hasattr(AppDiscoverySession, "attribute_map"):
        attribute_map.update(AppDiscoverySession.attribute_map)

    def __init__(self, status=None, end_timestamp=None, start_timestamp=None, failed_reason=None, reclassification=None, app_profile_summary_list=None, ns_groups=None, app_profiles=None, *args, **kwargs):  # noqa: E501
        """AppDiscoverySessionResultSummary - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._end_timestamp = None
        self._start_timestamp = None
        self._failed_reason = None
        self._reclassification = None
        self._app_profile_summary_list = None
        self._ns_groups = None
        self._app_profiles = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if end_timestamp is not None:
            self.end_timestamp = end_timestamp
        if start_timestamp is not None:
            self.start_timestamp = start_timestamp
        if failed_reason is not None:
            self.failed_reason = failed_reason
        if reclassification is not None:
            self.reclassification = reclassification
        if app_profile_summary_list is not None:
            self.app_profile_summary_list = app_profile_summary_list
        if ns_groups is not None:
            self.ns_groups = ns_groups
        if app_profiles is not None:
            self.app_profiles = app_profiles
        AppDiscoverySession.__init__(self, *args, **kwargs)

    @property
    def status(self):
        """Gets the status of this AppDiscoverySessionResultSummary.  # noqa: E501

        The status of the session  # noqa: E501

        :return: The status of this AppDiscoverySessionResultSummary.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AppDiscoverySessionResultSummary.

        The status of the session  # noqa: E501

        :param status: The status of this AppDiscoverySessionResultSummary.  # noqa: E501
        :type: str
        """
        allowed_values = ["FAILED", "RUNNING", "FINISHED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def end_timestamp(self):
        """Gets the end_timestamp of this AppDiscoverySessionResultSummary.  # noqa: E501

        End time of the session expressed in milliseconds since epoch  # noqa: E501

        :return: The end_timestamp of this AppDiscoverySessionResultSummary.  # noqa: E501
        :rtype: int
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """Sets the end_timestamp of this AppDiscoverySessionResultSummary.

        End time of the session expressed in milliseconds since epoch  # noqa: E501

        :param end_timestamp: The end_timestamp of this AppDiscoverySessionResultSummary.  # noqa: E501
        :type: int
        """

        self._end_timestamp = end_timestamp

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this AppDiscoverySessionResultSummary.  # noqa: E501

        Start time of the session expressed in milliseconds since epoch  # noqa: E501

        :return: The start_timestamp of this AppDiscoverySessionResultSummary.  # noqa: E501
        :rtype: int
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this AppDiscoverySessionResultSummary.

        Start time of the session expressed in milliseconds since epoch  # noqa: E501

        :param start_timestamp: The start_timestamp of this AppDiscoverySessionResultSummary.  # noqa: E501
        :type: int
        """

        self._start_timestamp = start_timestamp

    @property
    def failed_reason(self):
        """Gets the failed_reason of this AppDiscoverySessionResultSummary.  # noqa: E501

        The reason for the session status failure.  # noqa: E501

        :return: The failed_reason of this AppDiscoverySessionResultSummary.  # noqa: E501
        :rtype: str
        """
        return self._failed_reason

    @failed_reason.setter
    def failed_reason(self, failed_reason):
        """Sets the failed_reason of this AppDiscoverySessionResultSummary.

        The reason for the session status failure.  # noqa: E501

        :param failed_reason: The failed_reason of this AppDiscoverySessionResultSummary.  # noqa: E501
        :type: str
        """

        self._failed_reason = failed_reason

    @property
    def reclassification(self):
        """Gets the reclassification of this AppDiscoverySessionResultSummary.  # noqa: E501

        Some App Profiles that were part of the discovery session could be modified or deleted | after the session has been completed. NOT_REQUIRED status denotes that there were no such modifications. | REQUIRED status denotes some App Profiles that were part of the session has been modified/deleted and some | and some applications might not have been classfifed correctly. Use /session/<session-id>/reclassify API to| re-classfy the applications discovered based on app profiles.   # noqa: E501

        :return: The reclassification of this AppDiscoverySessionResultSummary.  # noqa: E501
        :rtype: str
        """
        return self._reclassification

    @reclassification.setter
    def reclassification(self, reclassification):
        """Sets the reclassification of this AppDiscoverySessionResultSummary.

        Some App Profiles that were part of the discovery session could be modified or deleted | after the session has been completed. NOT_REQUIRED status denotes that there were no such modifications. | REQUIRED status denotes some App Profiles that were part of the session has been modified/deleted and some | and some applications might not have been classfifed correctly. Use /session/<session-id>/reclassify API to| re-classfy the applications discovered based on app profiles.   # noqa: E501

        :param reclassification: The reclassification of this AppDiscoverySessionResultSummary.  # noqa: E501
        :type: str
        """
        allowed_values = ["NOT_REQUIRED", "REQUIRED"]  # noqa: E501
        if reclassification not in allowed_values:
            raise ValueError(
                "Invalid value for `reclassification` ({0}), must be one of {1}"  # noqa: E501
                .format(reclassification, allowed_values)
            )

        self._reclassification = reclassification

    @property
    def app_profile_summary_list(self):
        """Gets the app_profile_summary_list of this AppDiscoverySessionResultSummary.  # noqa: E501

        List of App Profiles summary discovered in this session  # noqa: E501

        :return: The app_profile_summary_list of this AppDiscoverySessionResultSummary.  # noqa: E501
        :rtype: list[AppDiscoveryAppProfileResultSummary]
        """
        return self._app_profile_summary_list

    @app_profile_summary_list.setter
    def app_profile_summary_list(self, app_profile_summary_list):
        """Sets the app_profile_summary_list of this AppDiscoverySessionResultSummary.

        List of App Profiles summary discovered in this session  # noqa: E501

        :param app_profile_summary_list: The app_profile_summary_list of this AppDiscoverySessionResultSummary.  # noqa: E501
        :type: list[AppDiscoveryAppProfileResultSummary]
        """

        self._app_profile_summary_list = app_profile_summary_list

    @property
    def ns_groups(self):
        """Gets the ns_groups of this AppDiscoverySessionResultSummary.  # noqa: E501

        List of NSGroups provided for discovery for this session  # noqa: E501

        :return: The ns_groups of this AppDiscoverySessionResultSummary.  # noqa: E501
        :rtype: list[NSGroupMetaInfo]
        """
        return self._ns_groups

    @ns_groups.setter
    def ns_groups(self, ns_groups):
        """Sets the ns_groups of this AppDiscoverySessionResultSummary.

        List of NSGroups provided for discovery for this session  # noqa: E501

        :param ns_groups: The ns_groups of this AppDiscoverySessionResultSummary.  # noqa: E501
        :type: list[NSGroupMetaInfo]
        """

        self._ns_groups = ns_groups

    @property
    def app_profiles(self):
        """Gets the app_profiles of this AppDiscoverySessionResultSummary.  # noqa: E501

        List of app profiles targeted to be classified for this session  # noqa: E501

        :return: The app_profiles of this AppDiscoverySessionResultSummary.  # noqa: E501
        :rtype: list[AppProfileMetaInfo]
        """
        return self._app_profiles

    @app_profiles.setter
    def app_profiles(self, app_profiles):
        """Sets the app_profiles of this AppDiscoverySessionResultSummary.

        List of app profiles targeted to be classified for this session  # noqa: E501

        :param app_profiles: The app_profiles of this AppDiscoverySessionResultSummary.  # noqa: E501
        :type: list[AppProfileMetaInfo]
        """

        self._app_profiles = app_profiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppDiscoverySessionResultSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppDiscoverySessionResultSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
