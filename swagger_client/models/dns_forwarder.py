# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DnsForwarder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system_owned': 'bool',
        'display_name': 'str',
        'description': 'str',
        'tags': 'list[Tag]',
        'create_user': 'str',
        'protection': 'str',
        'create_time': 'int',
        'last_modified_time': 'int',
        'last_modified_user': 'str',
        'id': 'str',
        'resource_type': 'str',
        'conditional_forwarders': 'list[ConditionalForwarderZone]',
        'logical_router_id': 'str',
        'cache_size': 'int',
        'default_forwarder': 'ForwarderZone',
        'log_level': 'str',
        'enabled': 'bool',
        'listener_ip': 'str'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'system_owned': '_system_owned',
        'display_name': 'display_name',
        'description': 'description',
        'tags': 'tags',
        'create_user': '_create_user',
        'protection': '_protection',
        'create_time': '_create_time',
        'last_modified_time': '_last_modified_time',
        'last_modified_user': '_last_modified_user',
        'id': 'id',
        'resource_type': 'resource_type',
        'conditional_forwarders': 'conditional_forwarders',
        'logical_router_id': 'logical_router_id',
        'cache_size': 'cache_size',
        'default_forwarder': 'default_forwarder',
        'log_level': 'log_level',
        'enabled': 'enabled',
        'listener_ip': 'listener_ip'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, system_owned=None, display_name=None, description=None, tags=None, create_user=None, protection=None, create_time=None, last_modified_time=None, last_modified_user=None, id=None, resource_type=None, conditional_forwarders=None, logical_router_id=None, cache_size=1024, default_forwarder=None, log_level='INFO', enabled=True, listener_ip=None, *args, **kwargs):  # noqa: E501
        """DnsForwarder - a model defined in Swagger"""  # noqa: E501
        self._system_owned = None
        self._display_name = None
        self._description = None
        self._tags = None
        self._create_user = None
        self._protection = None
        self._create_time = None
        self._last_modified_time = None
        self._last_modified_user = None
        self._id = None
        self._resource_type = None
        self._conditional_forwarders = None
        self._logical_router_id = None
        self._cache_size = None
        self._default_forwarder = None
        self._log_level = None
        self._enabled = None
        self._listener_ip = None
        self.discriminator = None
        if system_owned is not None:
            self.system_owned = system_owned
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if create_user is not None:
            self.create_user = create_user
        if protection is not None:
            self.protection = protection
        if create_time is not None:
            self.create_time = create_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if last_modified_user is not None:
            self.last_modified_user = last_modified_user
        if id is not None:
            self.id = id
        if resource_type is not None:
            self.resource_type = resource_type
        if conditional_forwarders is not None:
            self.conditional_forwarders = conditional_forwarders
        self.logical_router_id = logical_router_id
        if cache_size is not None:
            self.cache_size = cache_size
        self.default_forwarder = default_forwarder
        if log_level is not None:
            self.log_level = log_level
        if enabled is not None:
            self.enabled = enabled
        self.listener_ip = listener_ip
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def system_owned(self):
        """Gets the system_owned of this DnsForwarder.  # noqa: E501

        Indicates system owned resource  # noqa: E501

        :return: The system_owned of this DnsForwarder.  # noqa: E501
        :rtype: bool
        """
        return self._system_owned

    @system_owned.setter
    def system_owned(self, system_owned):
        """Sets the system_owned of this DnsForwarder.

        Indicates system owned resource  # noqa: E501

        :param system_owned: The system_owned of this DnsForwarder.  # noqa: E501
        :type: bool
        """

        self._system_owned = system_owned

    @property
    def display_name(self):
        """Gets the display_name of this DnsForwarder.  # noqa: E501

        Defaults to ID if not set  # noqa: E501

        :return: The display_name of this DnsForwarder.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DnsForwarder.

        Defaults to ID if not set  # noqa: E501

        :param display_name: The display_name of this DnsForwarder.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this DnsForwarder.  # noqa: E501

        Description of this resource  # noqa: E501

        :return: The description of this DnsForwarder.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DnsForwarder.

        Description of this resource  # noqa: E501

        :param description: The description of this DnsForwarder.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this DnsForwarder.  # noqa: E501

        Opaque identifiers meaningful to the API user  # noqa: E501

        :return: The tags of this DnsForwarder.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DnsForwarder.

        Opaque identifiers meaningful to the API user  # noqa: E501

        :param tags: The tags of this DnsForwarder.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def create_user(self):
        """Gets the create_user of this DnsForwarder.  # noqa: E501

        ID of the user who created this resource  # noqa: E501

        :return: The create_user of this DnsForwarder.  # noqa: E501
        :rtype: str
        """
        return self._create_user

    @create_user.setter
    def create_user(self, create_user):
        """Sets the create_user of this DnsForwarder.

        ID of the user who created this resource  # noqa: E501

        :param create_user: The create_user of this DnsForwarder.  # noqa: E501
        :type: str
        """

        self._create_user = create_user

    @property
    def protection(self):
        """Gets the protection of this DnsForwarder.  # noqa: E501

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :return: The protection of this DnsForwarder.  # noqa: E501
        :rtype: str
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this DnsForwarder.

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :param protection: The protection of this DnsForwarder.  # noqa: E501
        :type: str
        """

        self._protection = protection

    @property
    def create_time(self):
        """Gets the create_time of this DnsForwarder.  # noqa: E501

        Timestamp of resource creation  # noqa: E501

        :return: The create_time of this DnsForwarder.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this DnsForwarder.

        Timestamp of resource creation  # noqa: E501

        :param create_time: The create_time of this DnsForwarder.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this DnsForwarder.  # noqa: E501

        Timestamp of last modification  # noqa: E501

        :return: The last_modified_time of this DnsForwarder.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this DnsForwarder.

        Timestamp of last modification  # noqa: E501

        :param last_modified_time: The last_modified_time of this DnsForwarder.  # noqa: E501
        :type: int
        """

        self._last_modified_time = last_modified_time

    @property
    def last_modified_user(self):
        """Gets the last_modified_user of this DnsForwarder.  # noqa: E501

        ID of the user who last modified this resource  # noqa: E501

        :return: The last_modified_user of this DnsForwarder.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_user

    @last_modified_user.setter
    def last_modified_user(self, last_modified_user):
        """Sets the last_modified_user of this DnsForwarder.

        ID of the user who last modified this resource  # noqa: E501

        :param last_modified_user: The last_modified_user of this DnsForwarder.  # noqa: E501
        :type: str
        """

        self._last_modified_user = last_modified_user

    @property
    def id(self):
        """Gets the id of this DnsForwarder.  # noqa: E501

        Unique identifier of this resource  # noqa: E501

        :return: The id of this DnsForwarder.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DnsForwarder.

        Unique identifier of this resource  # noqa: E501

        :param id: The id of this DnsForwarder.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resource_type(self):
        """Gets the resource_type of this DnsForwarder.  # noqa: E501

        The type of this resource.  # noqa: E501

        :return: The resource_type of this DnsForwarder.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this DnsForwarder.

        The type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this DnsForwarder.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def conditional_forwarders(self):
        """Gets the conditional_forwarders of this DnsForwarder.  # noqa: E501

        The conditional zone forwarders. During matching a zone forwarder, the DNS forwarder will use the conditional fowarder with the longest domain name that matches the query.   # noqa: E501

        :return: The conditional_forwarders of this DnsForwarder.  # noqa: E501
        :rtype: list[ConditionalForwarderZone]
        """
        return self._conditional_forwarders

    @conditional_forwarders.setter
    def conditional_forwarders(self, conditional_forwarders):
        """Sets the conditional_forwarders of this DnsForwarder.

        The conditional zone forwarders. During matching a zone forwarder, the DNS forwarder will use the conditional fowarder with the longest domain name that matches the query.   # noqa: E501

        :param conditional_forwarders: The conditional_forwarders of this DnsForwarder.  # noqa: E501
        :type: list[ConditionalForwarderZone]
        """

        self._conditional_forwarders = conditional_forwarders

    @property
    def logical_router_id(self):
        """Gets the logical_router_id of this DnsForwarder.  # noqa: E501

        Specify the LogicalRouter where the DnsForwarder runs. The HA mode of the hosting LogicalRouter must be Active/Standby.   # noqa: E501

        :return: The logical_router_id of this DnsForwarder.  # noqa: E501
        :rtype: str
        """
        return self._logical_router_id

    @logical_router_id.setter
    def logical_router_id(self, logical_router_id):
        """Sets the logical_router_id of this DnsForwarder.

        Specify the LogicalRouter where the DnsForwarder runs. The HA mode of the hosting LogicalRouter must be Active/Standby.   # noqa: E501

        :param logical_router_id: The logical_router_id of this DnsForwarder.  # noqa: E501
        :type: str
        """
        if logical_router_id is None:
            raise ValueError("Invalid value for `logical_router_id`, must not be `None`")  # noqa: E501

        self._logical_router_id = logical_router_id

    @property
    def cache_size(self):
        """Gets the cache_size of this DnsForwarder.  # noqa: E501

        One DNS answer cache entry will consume ~120 bytes. Hence 1 KB cache size can cache ~8 DNS answer entries, and the default 1024 KB cache size can hold ~8k DNS answer entries.   # noqa: E501

        :return: The cache_size of this DnsForwarder.  # noqa: E501
        :rtype: int
        """
        return self._cache_size

    @cache_size.setter
    def cache_size(self, cache_size):
        """Sets the cache_size of this DnsForwarder.

        One DNS answer cache entry will consume ~120 bytes. Hence 1 KB cache size can cache ~8 DNS answer entries, and the default 1024 KB cache size can hold ~8k DNS answer entries.   # noqa: E501

        :param cache_size: The cache_size of this DnsForwarder.  # noqa: E501
        :type: int
        """

        self._cache_size = cache_size

    @property
    def default_forwarder(self):
        """Gets the default_forwarder of this DnsForwarder.  # noqa: E501


        :return: The default_forwarder of this DnsForwarder.  # noqa: E501
        :rtype: ForwarderZone
        """
        return self._default_forwarder

    @default_forwarder.setter
    def default_forwarder(self, default_forwarder):
        """Sets the default_forwarder of this DnsForwarder.


        :param default_forwarder: The default_forwarder of this DnsForwarder.  # noqa: E501
        :type: ForwarderZone
        """
        if default_forwarder is None:
            raise ValueError("Invalid value for `default_forwarder`, must not be `None`")  # noqa: E501

        self._default_forwarder = default_forwarder

    @property
    def log_level(self):
        """Gets the log_level of this DnsForwarder.  # noqa: E501

        Log level of the DNS forwarder  # noqa: E501

        :return: The log_level of this DnsForwarder.  # noqa: E501
        :rtype: str
        """
        return self._log_level

    @log_level.setter
    def log_level(self, log_level):
        """Sets the log_level of this DnsForwarder.

        Log level of the DNS forwarder  # noqa: E501

        :param log_level: The log_level of this DnsForwarder.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEBUG", "INFO", "WARNING", "ERROR", "FATAL"]  # noqa: E501
        if log_level not in allowed_values:
            raise ValueError(
                "Invalid value for `log_level` ({0}), must be one of {1}"  # noqa: E501
                .format(log_level, allowed_values)
            )

        self._log_level = log_level

    @property
    def enabled(self):
        """Gets the enabled of this DnsForwarder.  # noqa: E501

        Flag to enable/disable the forwarder  # noqa: E501

        :return: The enabled of this DnsForwarder.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this DnsForwarder.

        Flag to enable/disable the forwarder  # noqa: E501

        :param enabled: The enabled of this DnsForwarder.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def listener_ip(self):
        """Gets the listener_ip of this DnsForwarder.  # noqa: E501

        The ip address the DNS forwarder listens on. It can be an ip address already owned by the logical-router uplink port or router-link, or a loopback port ip address. But it can not be a downlink port address. User needs to ensure the address is reachable via router or NAT from both client VMs and upstream servers. User will need to create Firewall rules if needed to allow such traffic on a Tier-1 or Tier-0.   # noqa: E501

        :return: The listener_ip of this DnsForwarder.  # noqa: E501
        :rtype: str
        """
        return self._listener_ip

    @listener_ip.setter
    def listener_ip(self, listener_ip):
        """Sets the listener_ip of this DnsForwarder.

        The ip address the DNS forwarder listens on. It can be an ip address already owned by the logical-router uplink port or router-link, or a loopback port ip address. But it can not be a downlink port address. User needs to ensure the address is reachable via router or NAT from both client VMs and upstream servers. User will need to create Firewall rules if needed to allow such traffic on a Tier-1 or Tier-0.   # noqa: E501

        :param listener_ip: The listener_ip of this DnsForwarder.  # noqa: E501
        :type: str
        """
        if listener_ip is None:
            raise ValueError("Invalid value for `listener_ip`, must not be `None`")  # noqa: E501

        self._listener_ip = listener_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DnsForwarder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DnsForwarder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
