# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RoutingGlobalConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'logical_uplink_mtu': 'int',
        'l3_forwarding_mode': 'str'
    }
    if hasattr(GlobalConfigs, "swagger_types"):
        swagger_types.update(GlobalConfigs.swagger_types)

    attribute_map = {
        'resource_type': 'resource_type',
        'logical_uplink_mtu': 'logical_uplink_mtu',
        'l3_forwarding_mode': 'l3_forwarding_mode'
    }
    if hasattr(GlobalConfigs, "attribute_map"):
        attribute_map.update(GlobalConfigs.attribute_map)

    def __init__(self, resource_type=None, logical_uplink_mtu=1500, l3_forwarding_mode='IPV4_ONLY', *args, **kwargs):  # noqa: E501
        """RoutingGlobalConfig - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._logical_uplink_mtu = None
        self._l3_forwarding_mode = None
        self.discriminator = None
        self.resource_type = resource_type
        if logical_uplink_mtu is not None:
            self.logical_uplink_mtu = logical_uplink_mtu
        self.l3_forwarding_mode = l3_forwarding_mode
        GlobalConfigs.__init__(self, *args, **kwargs)

    @property
    def resource_type(self):
        """Gets the resource_type of this RoutingGlobalConfig.  # noqa: E501

        Valid Global configuration types  # noqa: E501

        :return: The resource_type of this RoutingGlobalConfig.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this RoutingGlobalConfig.

        Valid Global configuration types  # noqa: E501

        :param resource_type: The resource_type of this RoutingGlobalConfig.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501
        allowed_values = ["SwitchingGlobalConfig", "RoutingGlobalConfig", "OperationCollectorGlobalConfig", "FirewallGlobalConfig", "EsxGlobalOpaqueConfig", "SecurityGlobalConfig", "FipsGlobalConfig"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def logical_uplink_mtu(self):
        """Gets the logical_uplink_mtu of this RoutingGlobalConfig.  # noqa: E501

        This is the global default MTU for all the logical uplinks in a NSX domain. Currently logical uplink MTU can only be set globally and applies to the entire NSX domain. There is no option to override this value at transport zone level or transport node level. If this value is not set, the default value of 1500 will be used.  # noqa: E501

        :return: The logical_uplink_mtu of this RoutingGlobalConfig.  # noqa: E501
        :rtype: int
        """
        return self._logical_uplink_mtu

    @logical_uplink_mtu.setter
    def logical_uplink_mtu(self, logical_uplink_mtu):
        """Sets the logical_uplink_mtu of this RoutingGlobalConfig.

        This is the global default MTU for all the logical uplinks in a NSX domain. Currently logical uplink MTU can only be set globally and applies to the entire NSX domain. There is no option to override this value at transport zone level or transport node level. If this value is not set, the default value of 1500 will be used.  # noqa: E501

        :param logical_uplink_mtu: The logical_uplink_mtu of this RoutingGlobalConfig.  # noqa: E501
        :type: int
        """

        self._logical_uplink_mtu = logical_uplink_mtu

    @property
    def l3_forwarding_mode(self):
        """Gets the l3_forwarding_mode of this RoutingGlobalConfig.  # noqa: E501

        This setting does not restrict configuration as per other modes. But the forwarding will only work as per the mode set here.  # noqa: E501

        :return: The l3_forwarding_mode of this RoutingGlobalConfig.  # noqa: E501
        :rtype: str
        """
        return self._l3_forwarding_mode

    @l3_forwarding_mode.setter
    def l3_forwarding_mode(self, l3_forwarding_mode):
        """Sets the l3_forwarding_mode of this RoutingGlobalConfig.

        This setting does not restrict configuration as per other modes. But the forwarding will only work as per the mode set here.  # noqa: E501

        :param l3_forwarding_mode: The l3_forwarding_mode of this RoutingGlobalConfig.  # noqa: E501
        :type: str
        """
        if l3_forwarding_mode is None:
            raise ValueError("Invalid value for `l3_forwarding_mode`, must not be `None`")  # noqa: E501
        allowed_values = ["IPV4_ONLY", "IPV4_AND_IPV6"]  # noqa: E501
        if l3_forwarding_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `l3_forwarding_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(l3_forwarding_mode, allowed_values)
            )

        self._l3_forwarding_mode = l3_forwarding_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoutingGlobalConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoutingGlobalConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
