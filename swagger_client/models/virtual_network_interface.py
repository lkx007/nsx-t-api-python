# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class VirtualNetworkInterface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_sync_time': 'int',
        'display_name': 'str',
        'description': 'str',
        'resource_type': 'str',
        'tags': 'list[Tag]',
        'mac_address': 'str',
        'owner_vm_type': 'str',
        'device_key': 'str',
        'host_id': 'str',
        'owner_vm_id': 'str',
        'vm_local_id_on_host': 'str',
        'external_id': 'str',
        'lport_attachment_id': 'str',
        'ip_address_info': 'list[IpAddressInfo]',
        'device_name': 'str'
    }
    if hasattr(DiscoveredResource, "swagger_types"):
        swagger_types.update(DiscoveredResource.swagger_types)

    attribute_map = {
        'last_sync_time': '_last_sync_time',
        'display_name': 'display_name',
        'description': 'description',
        'resource_type': 'resource_type',
        'tags': 'tags',
        'mac_address': 'mac_address',
        'owner_vm_type': 'owner_vm_type',
        'device_key': 'device_key',
        'host_id': 'host_id',
        'owner_vm_id': 'owner_vm_id',
        'vm_local_id_on_host': 'vm_local_id_on_host',
        'external_id': 'external_id',
        'lport_attachment_id': 'lport_attachment_id',
        'ip_address_info': 'ip_address_info',
        'device_name': 'device_name'
    }
    if hasattr(DiscoveredResource, "attribute_map"):
        attribute_map.update(DiscoveredResource.attribute_map)

    def __init__(self, last_sync_time=None, display_name=None, description=None, resource_type=None, tags=None, mac_address=None, owner_vm_type=None, device_key=None, host_id=None, owner_vm_id=None, vm_local_id_on_host=None, external_id=None, lport_attachment_id=None, ip_address_info=None, device_name=None, *args, **kwargs):  # noqa: E501
        """VirtualNetworkInterface - a model defined in Swagger"""  # noqa: E501
        self._last_sync_time = None
        self._display_name = None
        self._description = None
        self._resource_type = None
        self._tags = None
        self._mac_address = None
        self._owner_vm_type = None
        self._device_key = None
        self._host_id = None
        self._owner_vm_id = None
        self._vm_local_id_on_host = None
        self._external_id = None
        self._lport_attachment_id = None
        self._ip_address_info = None
        self._device_name = None
        self.discriminator = None
        if last_sync_time is not None:
            self.last_sync_time = last_sync_time
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        self.resource_type = resource_type
        if tags is not None:
            self.tags = tags
        self.mac_address = mac_address
        if owner_vm_type is not None:
            self.owner_vm_type = owner_vm_type
        self.device_key = device_key
        self.host_id = host_id
        self.owner_vm_id = owner_vm_id
        self.vm_local_id_on_host = vm_local_id_on_host
        self.external_id = external_id
        if lport_attachment_id is not None:
            self.lport_attachment_id = lport_attachment_id
        if ip_address_info is not None:
            self.ip_address_info = ip_address_info
        if device_name is not None:
            self.device_name = device_name
        DiscoveredResource.__init__(self, *args, **kwargs)

    @property
    def last_sync_time(self):
        """Gets the last_sync_time of this VirtualNetworkInterface.  # noqa: E501

        Timestamp of last modification  # noqa: E501

        :return: The last_sync_time of this VirtualNetworkInterface.  # noqa: E501
        :rtype: int
        """
        return self._last_sync_time

    @last_sync_time.setter
    def last_sync_time(self, last_sync_time):
        """Sets the last_sync_time of this VirtualNetworkInterface.

        Timestamp of last modification  # noqa: E501

        :param last_sync_time: The last_sync_time of this VirtualNetworkInterface.  # noqa: E501
        :type: int
        """

        self._last_sync_time = last_sync_time

    @property
    def display_name(self):
        """Gets the display_name of this VirtualNetworkInterface.  # noqa: E501

        Defaults to ID if not set  # noqa: E501

        :return: The display_name of this VirtualNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this VirtualNetworkInterface.

        Defaults to ID if not set  # noqa: E501

        :param display_name: The display_name of this VirtualNetworkInterface.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this VirtualNetworkInterface.  # noqa: E501

        Description of this resource  # noqa: E501

        :return: The description of this VirtualNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VirtualNetworkInterface.

        Description of this resource  # noqa: E501

        :param description: The description of this VirtualNetworkInterface.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def resource_type(self):
        """Gets the resource_type of this VirtualNetworkInterface.  # noqa: E501

        The type of this resource.  # noqa: E501

        :return: The resource_type of this VirtualNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this VirtualNetworkInterface.

        The type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this VirtualNetworkInterface.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def tags(self):
        """Gets the tags of this VirtualNetworkInterface.  # noqa: E501

        Opaque identifiers meaningful to the API user  # noqa: E501

        :return: The tags of this VirtualNetworkInterface.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VirtualNetworkInterface.

        Opaque identifiers meaningful to the API user  # noqa: E501

        :param tags: The tags of this VirtualNetworkInterface.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def mac_address(self):
        """Gets the mac_address of this VirtualNetworkInterface.  # noqa: E501

        MAC address of the virtual network interface.  # noqa: E501

        :return: The mac_address of this VirtualNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this VirtualNetworkInterface.

        MAC address of the virtual network interface.  # noqa: E501

        :param mac_address: The mac_address of this VirtualNetworkInterface.  # noqa: E501
        :type: str
        """
        if mac_address is None:
            raise ValueError("Invalid value for `mac_address`, must not be `None`")  # noqa: E501

        self._mac_address = mac_address

    @property
    def owner_vm_type(self):
        """Gets the owner_vm_type of this VirtualNetworkInterface.  # noqa: E501

        Owner virtual machine type; Edge, Service VM or other.  # noqa: E501

        :return: The owner_vm_type of this VirtualNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._owner_vm_type

    @owner_vm_type.setter
    def owner_vm_type(self, owner_vm_type):
        """Sets the owner_vm_type of this VirtualNetworkInterface.

        Owner virtual machine type; Edge, Service VM or other.  # noqa: E501

        :param owner_vm_type: The owner_vm_type of this VirtualNetworkInterface.  # noqa: E501
        :type: str
        """
        allowed_values = ["EDGE", "SERVICE", "REGULAR"]  # noqa: E501
        if owner_vm_type not in allowed_values:
            raise ValueError(
                "Invalid value for `owner_vm_type` ({0}), must be one of {1}"  # noqa: E501
                .format(owner_vm_type, allowed_values)
            )

        self._owner_vm_type = owner_vm_type

    @property
    def device_key(self):
        """Gets the device_key of this VirtualNetworkInterface.  # noqa: E501

        Device key of the virtual network interface.  # noqa: E501

        :return: The device_key of this VirtualNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._device_key

    @device_key.setter
    def device_key(self, device_key):
        """Sets the device_key of this VirtualNetworkInterface.

        Device key of the virtual network interface.  # noqa: E501

        :param device_key: The device_key of this VirtualNetworkInterface.  # noqa: E501
        :type: str
        """
        if device_key is None:
            raise ValueError("Invalid value for `device_key`, must not be `None`")  # noqa: E501

        self._device_key = device_key

    @property
    def host_id(self):
        """Gets the host_id of this VirtualNetworkInterface.  # noqa: E501

        Id of the host on which the vm exists.  # noqa: E501

        :return: The host_id of this VirtualNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._host_id

    @host_id.setter
    def host_id(self, host_id):
        """Sets the host_id of this VirtualNetworkInterface.

        Id of the host on which the vm exists.  # noqa: E501

        :param host_id: The host_id of this VirtualNetworkInterface.  # noqa: E501
        :type: str
        """
        if host_id is None:
            raise ValueError("Invalid value for `host_id`, must not be `None`")  # noqa: E501

        self._host_id = host_id

    @property
    def owner_vm_id(self):
        """Gets the owner_vm_id of this VirtualNetworkInterface.  # noqa: E501

        Id of the vm to which this virtual network interface belongs.  # noqa: E501

        :return: The owner_vm_id of this VirtualNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._owner_vm_id

    @owner_vm_id.setter
    def owner_vm_id(self, owner_vm_id):
        """Sets the owner_vm_id of this VirtualNetworkInterface.

        Id of the vm to which this virtual network interface belongs.  # noqa: E501

        :param owner_vm_id: The owner_vm_id of this VirtualNetworkInterface.  # noqa: E501
        :type: str
        """
        if owner_vm_id is None:
            raise ValueError("Invalid value for `owner_vm_id`, must not be `None`")  # noqa: E501

        self._owner_vm_id = owner_vm_id

    @property
    def vm_local_id_on_host(self):
        """Gets the vm_local_id_on_host of this VirtualNetworkInterface.  # noqa: E501

        Id of the vm unique within the host.  # noqa: E501

        :return: The vm_local_id_on_host of this VirtualNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._vm_local_id_on_host

    @vm_local_id_on_host.setter
    def vm_local_id_on_host(self, vm_local_id_on_host):
        """Sets the vm_local_id_on_host of this VirtualNetworkInterface.

        Id of the vm unique within the host.  # noqa: E501

        :param vm_local_id_on_host: The vm_local_id_on_host of this VirtualNetworkInterface.  # noqa: E501
        :type: str
        """
        if vm_local_id_on_host is None:
            raise ValueError("Invalid value for `vm_local_id_on_host`, must not be `None`")  # noqa: E501

        self._vm_local_id_on_host = vm_local_id_on_host

    @property
    def external_id(self):
        """Gets the external_id of this VirtualNetworkInterface.  # noqa: E501

        External Id of the virtual network inferface.  # noqa: E501

        :return: The external_id of this VirtualNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this VirtualNetworkInterface.

        External Id of the virtual network inferface.  # noqa: E501

        :param external_id: The external_id of this VirtualNetworkInterface.  # noqa: E501
        :type: str
        """
        if external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")  # noqa: E501

        self._external_id = external_id

    @property
    def lport_attachment_id(self):
        """Gets the lport_attachment_id of this VirtualNetworkInterface.  # noqa: E501

        LPort Attachment Id of the virtual network interface.  # noqa: E501

        :return: The lport_attachment_id of this VirtualNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._lport_attachment_id

    @lport_attachment_id.setter
    def lport_attachment_id(self, lport_attachment_id):
        """Sets the lport_attachment_id of this VirtualNetworkInterface.

        LPort Attachment Id of the virtual network interface.  # noqa: E501

        :param lport_attachment_id: The lport_attachment_id of this VirtualNetworkInterface.  # noqa: E501
        :type: str
        """

        self._lport_attachment_id = lport_attachment_id

    @property
    def ip_address_info(self):
        """Gets the ip_address_info of this VirtualNetworkInterface.  # noqa: E501

        IP Addresses of the the virtual network interface, from various sources.  # noqa: E501

        :return: The ip_address_info of this VirtualNetworkInterface.  # noqa: E501
        :rtype: list[IpAddressInfo]
        """
        return self._ip_address_info

    @ip_address_info.setter
    def ip_address_info(self, ip_address_info):
        """Sets the ip_address_info of this VirtualNetworkInterface.

        IP Addresses of the the virtual network interface, from various sources.  # noqa: E501

        :param ip_address_info: The ip_address_info of this VirtualNetworkInterface.  # noqa: E501
        :type: list[IpAddressInfo]
        """

        self._ip_address_info = ip_address_info

    @property
    def device_name(self):
        """Gets the device_name of this VirtualNetworkInterface.  # noqa: E501

        Device name of the virtual network interface.  # noqa: E501

        :return: The device_name of this VirtualNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this VirtualNetworkInterface.

        Device name of the virtual network interface.  # noqa: E501

        :param device_name: The device_name of this VirtualNetworkInterface.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VirtualNetworkInterface, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VirtualNetworkInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
