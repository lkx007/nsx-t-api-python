# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Alarm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sources': 'AlarmSource',
        'state': 'str',
        'source_comp': 'str',
        'severity': 'str',
        'source_comp_id': 'str',
        'timestamp': 'int',
        'message': 'str',
        'id': 'str',
        'source_subcomp': 'str'
    }

    attribute_map = {
        'sources': 'sources',
        'state': 'state',
        'source_comp': 'source_comp',
        'severity': 'severity',
        'source_comp_id': 'source_comp_id',
        'timestamp': 'timestamp',
        'message': 'message',
        'id': 'id',
        'source_subcomp': 'source_subcomp'
    }

    def __init__(self, sources=None, state=None, source_comp=None, severity=None, source_comp_id=None, timestamp=None, message=None, id=None, source_subcomp=None):  # noqa: E501
        """Alarm - a model defined in Swagger"""  # noqa: E501
        self._sources = None
        self._state = None
        self._source_comp = None
        self._severity = None
        self._source_comp_id = None
        self._timestamp = None
        self._message = None
        self._id = None
        self._source_subcomp = None
        self.discriminator = None
        if sources is not None:
            self.sources = sources
        self.state = state
        if source_comp is not None:
            self.source_comp = source_comp
        if severity is not None:
            self.severity = severity
        if source_comp_id is not None:
            self.source_comp_id = source_comp_id
        if timestamp is not None:
            self.timestamp = timestamp
        self.message = message
        if id is not None:
            self.id = id
        if source_subcomp is not None:
            self.source_subcomp = source_subcomp

    @property
    def sources(self):
        """Gets the sources of this Alarm.  # noqa: E501


        :return: The sources of this Alarm.  # noqa: E501
        :rtype: AlarmSource
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this Alarm.


        :param sources: The sources of this Alarm.  # noqa: E501
        :type: AlarmSource
        """

        self._sources = sources

    @property
    def state(self):
        """Gets the state of this Alarm.  # noqa: E501

        Alarm state  # noqa: E501

        :return: The state of this Alarm.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Alarm.

        Alarm state  # noqa: E501

        :param state: The state of this Alarm.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["UNKNOWN", "ACTIVE", "ACKNOWLEDGED", "RESOLVED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def source_comp(self):
        """Gets the source_comp of this Alarm.  # noqa: E501

        Alarm source component like nsx-manager, nsx-edge etc  # noqa: E501

        :return: The source_comp of this Alarm.  # noqa: E501
        :rtype: str
        """
        return self._source_comp

    @source_comp.setter
    def source_comp(self, source_comp):
        """Sets the source_comp of this Alarm.

        Alarm source component like nsx-manager, nsx-edge etc  # noqa: E501

        :param source_comp: The source_comp of this Alarm.  # noqa: E501
        :type: str
        """

        self._source_comp = source_comp

    @property
    def severity(self):
        """Gets the severity of this Alarm.  # noqa: E501

        Severity of an Alarm  # noqa: E501

        :return: The severity of this Alarm.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Alarm.

        Severity of an Alarm  # noqa: E501

        :param severity: The severity of this Alarm.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "MINOR", "MAJOR", "CRITICAL"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"  # noqa: E501
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def source_comp_id(self):
        """Gets the source_comp_id of this Alarm.  # noqa: E501

        Unique identifier(like UUID) for the node sending the Alarm  # noqa: E501

        :return: The source_comp_id of this Alarm.  # noqa: E501
        :rtype: str
        """
        return self._source_comp_id

    @source_comp_id.setter
    def source_comp_id(self, source_comp_id):
        """Sets the source_comp_id of this Alarm.

        Unique identifier(like UUID) for the node sending the Alarm  # noqa: E501

        :param source_comp_id: The source_comp_id of this Alarm.  # noqa: E501
        :type: str
        """

        self._source_comp_id = source_comp_id

    @property
    def timestamp(self):
        """Gets the timestamp of this Alarm.  # noqa: E501

        Date and time in UTC of the Alarm  # noqa: E501

        :return: The timestamp of this Alarm.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Alarm.

        Date and time in UTC of the Alarm  # noqa: E501

        :param timestamp: The timestamp of this Alarm.  # noqa: E501
        :type: int
        """

        self._timestamp = timestamp

    @property
    def message(self):
        """Gets the message of this Alarm.  # noqa: E501

        Description of the Alarm  # noqa: E501

        :return: The message of this Alarm.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Alarm.

        Description of the Alarm  # noqa: E501

        :param message: The message of this Alarm.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def id(self):
        """Gets the id of this Alarm.  # noqa: E501

        Unique identifier for an NSX Alarm  # noqa: E501

        :return: The id of this Alarm.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Alarm.

        Unique identifier for an NSX Alarm  # noqa: E501

        :param id: The id of this Alarm.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def source_subcomp(self):
        """Gets the source_subcomp of this Alarm.  # noqa: E501

        Alarm source sub component like nsx-mpa etc  # noqa: E501

        :return: The source_subcomp of this Alarm.  # noqa: E501
        :rtype: str
        """
        return self._source_subcomp

    @source_subcomp.setter
    def source_subcomp(self, source_subcomp):
        """Sets the source_subcomp of this Alarm.

        Alarm source sub component like nsx-mpa etc  # noqa: E501

        :param source_subcomp: The source_subcomp of this Alarm.  # noqa: E501
        :type: str
        """

        self._source_subcomp = source_subcomp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Alarm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Alarm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
