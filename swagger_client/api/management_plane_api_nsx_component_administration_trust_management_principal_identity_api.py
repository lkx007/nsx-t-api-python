# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ManagementPlaneApiNsxComponentAdministrationTrustManagementPrincipalIdentityApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_principal_identity(self, principal_identity_id, **kwargs):  # noqa: E501
        """Delete a principal identity  # noqa: E501

        Delete a principal identity. It does not delete the certificate.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_principal_identity(principal_identity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str principal_identity_id: Unique id of the principal identity to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_principal_identity_with_http_info(principal_identity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_principal_identity_with_http_info(principal_identity_id, **kwargs)  # noqa: E501
            return data

    def delete_principal_identity_with_http_info(self, principal_identity_id, **kwargs):  # noqa: E501
        """Delete a principal identity  # noqa: E501

        Delete a principal identity. It does not delete the certificate.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_principal_identity_with_http_info(principal_identity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str principal_identity_id: Unique id of the principal identity to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['principal_identity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_principal_identity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'principal_identity_id' is set
        if ('principal_identity_id' not in params or
                params['principal_identity_id'] is None):
            raise ValueError("Missing the required parameter `principal_identity_id` when calling `delete_principal_identity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'principal_identity_id' in params:
            path_params['principal-identity-id'] = params['principal_identity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/trust-management/principal-identities/{principal-identity-id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_principal_identities(self, **kwargs):  # noqa: E501
        """Return the list of principal identities  # noqa: E501

        Returns the list of principals registered with a certificate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_principal_identities(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PrincipalIdentityList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_principal_identities_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_principal_identities_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_principal_identities_with_http_info(self, **kwargs):  # noqa: E501
        """Return the list of principal identities  # noqa: E501

        Returns the list of principals registered with a certificate.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_principal_identities_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: PrincipalIdentityList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_principal_identities" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/trust-management/principal-identities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrincipalIdentityList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_principal_identity(self, principal_identity_id, **kwargs):  # noqa: E501
        """Get a Principal Identity  # noqa: E501

        Get a stored principal identity   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_principal_identity(principal_identity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str principal_identity_id: ID of Principal Identity to get (required)
        :return: PrincipalIdentity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_principal_identity_with_http_info(principal_identity_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_principal_identity_with_http_info(principal_identity_id, **kwargs)  # noqa: E501
            return data

    def get_principal_identity_with_http_info(self, principal_identity_id, **kwargs):  # noqa: E501
        """Get a Principal Identity  # noqa: E501

        Get a stored principal identity   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_principal_identity_with_http_info(principal_identity_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str principal_identity_id: ID of Principal Identity to get (required)
        :return: PrincipalIdentity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['principal_identity_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_principal_identity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'principal_identity_id' is set
        if ('principal_identity_id' not in params or
                params['principal_identity_id'] is None):
            raise ValueError("Missing the required parameter `principal_identity_id` when calling `get_principal_identity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'principal_identity_id' in params:
            path_params['principal-identity-id'] = params['principal_identity_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/trust-management/principal-identities/{principal-identity-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrincipalIdentity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_principal_identity(self, body, **kwargs):  # noqa: E501
        """Register a name-certificate combination.  # noqa: E501

        Associates a principal's name with a certificate that is used to authenticate. Deprecated, use POST /trust-management/principal-identities/with-certificate instead.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_principal_identity(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrincipalIdentity body: (required)
        :return: PrincipalIdentity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_principal_identity_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.register_principal_identity_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def register_principal_identity_with_http_info(self, body, **kwargs):  # noqa: E501
        """Register a name-certificate combination.  # noqa: E501

        Associates a principal's name with a certificate that is used to authenticate. Deprecated, use POST /trust-management/principal-identities/with-certificate instead.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_principal_identity_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrincipalIdentity body: (required)
        :return: PrincipalIdentity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_principal_identity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_principal_identity`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/trust-management/principal-identities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrincipalIdentity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_principal_identity_with_certificate(self, body, **kwargs):  # noqa: E501
        """Register a name-certificate combination.  # noqa: E501

        Create a Principal Identity with a new, unused, certificate.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_principal_identity_with_certificate(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrincipalIdentityWithCertificate body: (required)
        :return: PrincipalIdentity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_principal_identity_with_certificate_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.register_principal_identity_with_certificate_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def register_principal_identity_with_certificate_with_http_info(self, body, **kwargs):  # noqa: E501
        """Register a name-certificate combination.  # noqa: E501

        Create a Principal Identity with a new, unused, certificate.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_principal_identity_with_certificate_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PrincipalIdentityWithCertificate body: (required)
        :return: PrincipalIdentity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_principal_identity_with_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `register_principal_identity_with_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/trust-management/principal-identities/with-certificate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrincipalIdentity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_principal_identity_certificate_update_certificate(self, body, **kwargs):  # noqa: E501
        """Update a Principal Identity's certificate  # noqa: E501

        Update a principal identity's certificate   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_principal_identity_certificate_update_certificate(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdatePrincipalIdentityCertificateRequest body: (required)
        :return: PrincipalIdentity
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_principal_identity_certificate_update_certificate_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_principal_identity_certificate_update_certificate_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def update_principal_identity_certificate_update_certificate_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update a Principal Identity's certificate  # noqa: E501

        Update a principal identity's certificate   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_principal_identity_certificate_update_certificate_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdatePrincipalIdentityCertificateRequest body: (required)
        :return: PrincipalIdentity
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_principal_identity_certificate_update_certificate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_principal_identity_certificate_update_certificate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/trust-management/principal-identities?action=update_certificate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PrincipalIdentity',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
