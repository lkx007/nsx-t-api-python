# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LbTcpHeaderCondition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inverse': 'bool',
        'type': 'str',
        'source_port': 'str'
    }
    if hasattr(LbRuleCondition, "swagger_types"):
        swagger_types.update(LbRuleCondition.swagger_types)

    attribute_map = {
        'inverse': 'inverse',
        'type': 'type',
        'source_port': 'source_port'
    }
    if hasattr(LbRuleCondition, "attribute_map"):
        attribute_map.update(LbRuleCondition.attribute_map)

    def __init__(self, inverse=False, type=None, source_port=None, *args, **kwargs):  # noqa: E501
        """LbTcpHeaderCondition - a model defined in Swagger"""  # noqa: E501
        self._inverse = None
        self._type = None
        self._source_port = None
        self.discriminator = None
        if inverse is not None:
            self.inverse = inverse
        self.type = type
        self.source_port = source_port
        LbRuleCondition.__init__(self, *args, **kwargs)

    @property
    def inverse(self):
        """Gets the inverse of this LbTcpHeaderCondition.  # noqa: E501

        A flag to indicate whether reverse the match result of this condition  # noqa: E501

        :return: The inverse of this LbTcpHeaderCondition.  # noqa: E501
        :rtype: bool
        """
        return self._inverse

    @inverse.setter
    def inverse(self, inverse):
        """Sets the inverse of this LbTcpHeaderCondition.

        A flag to indicate whether reverse the match result of this condition  # noqa: E501

        :param inverse: The inverse of this LbTcpHeaderCondition.  # noqa: E501
        :type: bool
        """

        self._inverse = inverse

    @property
    def type(self):
        """Gets the type of this LbTcpHeaderCondition.  # noqa: E501

        Type of load balancer rule condition  # noqa: E501

        :return: The type of this LbTcpHeaderCondition.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LbTcpHeaderCondition.

        Type of load balancer rule condition  # noqa: E501

        :param type: The type of this LbTcpHeaderCondition.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["LbHttpRequestMethodCondition", "LbHttpRequestUriCondition", "LbHttpRequestUriArgumentsCondition", "LbHttpRequestVersionCondition", "LbHttpRequestHeaderCondition", "LbHttpRequestCookieCondition", "LbHttpRequestBodyCondition", "LbHttpResponseHeaderCondition", "LbTcpHeaderCondition", "LbIpHeaderCondition", "LbVariableCondition", "LbHttpSslCondition"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def source_port(self):
        """Gets the source_port of this LbTcpHeaderCondition.  # noqa: E501

        TCP source port of HTTP message  # noqa: E501

        :return: The source_port of this LbTcpHeaderCondition.  # noqa: E501
        :rtype: str
        """
        return self._source_port

    @source_port.setter
    def source_port(self, source_port):
        """Sets the source_port of this LbTcpHeaderCondition.

        TCP source port of HTTP message  # noqa: E501

        :param source_port: The source_port of this LbTcpHeaderCondition.  # noqa: E501
        :type: str
        """
        if source_port is None:
            raise ValueError("Invalid value for `source_port`, must not be `None`")  # noqa: E501

        self._source_port = source_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbTcpHeaderCondition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbTcpHeaderCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
