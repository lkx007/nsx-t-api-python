# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LbHttpProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'response_timeout': 'int',
        'idle_timeout': 'int',
        'request_body_size': 'int',
        'response_header_size': 'int',
        'ntlm': 'bool',
        'request_header_size': 'int',
        'http_redirect_to': 'str',
        'x_forwarded_for': 'str',
        'http_redirect_to_https': 'bool'
    }
    if hasattr(LbAppProfile, "swagger_types"):
        swagger_types.update(LbAppProfile.swagger_types)

    attribute_map = {
        'resource_type': 'resource_type',
        'response_timeout': 'response_timeout',
        'idle_timeout': 'idle_timeout',
        'request_body_size': 'request_body_size',
        'response_header_size': 'response_header_size',
        'ntlm': 'ntlm',
        'request_header_size': 'request_header_size',
        'http_redirect_to': 'http_redirect_to',
        'x_forwarded_for': 'x_forwarded_for',
        'http_redirect_to_https': 'http_redirect_to_https'
    }
    if hasattr(LbAppProfile, "attribute_map"):
        attribute_map.update(LbAppProfile.attribute_map)

    def __init__(self, resource_type=None, response_timeout=60, idle_timeout=15, request_body_size=None, response_header_size=4096, ntlm=False, request_header_size=1024, http_redirect_to=None, x_forwarded_for=None, http_redirect_to_https=False, *args, **kwargs):  # noqa: E501
        """LbHttpProfile - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._response_timeout = None
        self._idle_timeout = None
        self._request_body_size = None
        self._response_header_size = None
        self._ntlm = None
        self._request_header_size = None
        self._http_redirect_to = None
        self._x_forwarded_for = None
        self._http_redirect_to_https = None
        self.discriminator = None
        self.resource_type = resource_type
        if response_timeout is not None:
            self.response_timeout = response_timeout
        if idle_timeout is not None:
            self.idle_timeout = idle_timeout
        if request_body_size is not None:
            self.request_body_size = request_body_size
        if response_header_size is not None:
            self.response_header_size = response_header_size
        if ntlm is not None:
            self.ntlm = ntlm
        if request_header_size is not None:
            self.request_header_size = request_header_size
        if http_redirect_to is not None:
            self.http_redirect_to = http_redirect_to
        if x_forwarded_for is not None:
            self.x_forwarded_for = x_forwarded_for
        if http_redirect_to_https is not None:
            self.http_redirect_to_https = http_redirect_to_https
        LbAppProfile.__init__(self, *args, **kwargs)

    @property
    def resource_type(self):
        """Gets the resource_type of this LbHttpProfile.  # noqa: E501

        An application profile can be bound to a virtual server to specify the application protocol characteristics. It is used to influence how load balancing is performed. Currently, three types of application profiles are supported: LbFastTCPProfile, LbFastUDPProfile and LbHttpProfile. LbFastTCPProfile or LbFastUDPProfile is typically used when the application is using a custom protocol or a standard protocol not supported by the load balancer. It is also used in cases where the user only wants L4 load balancing mainly because L4 load balancing has much higher performance and scalability, and/or supports connection mirroring. LbHttpProfile is used for both HTTP and HTTPS applications. Though application rules, if bound to the virtual server, can be used to accomplish the same goal, LbHttpProfile is intended to simplify enabling certain common use cases.   # noqa: E501

        :return: The resource_type of this LbHttpProfile.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this LbHttpProfile.

        An application profile can be bound to a virtual server to specify the application protocol characteristics. It is used to influence how load balancing is performed. Currently, three types of application profiles are supported: LbFastTCPProfile, LbFastUDPProfile and LbHttpProfile. LbFastTCPProfile or LbFastUDPProfile is typically used when the application is using a custom protocol or a standard protocol not supported by the load balancer. It is also used in cases where the user only wants L4 load balancing mainly because L4 load balancing has much higher performance and scalability, and/or supports connection mirroring. LbHttpProfile is used for both HTTP and HTTPS applications. Though application rules, if bound to the virtual server, can be used to accomplish the same goal, LbHttpProfile is intended to simplify enabling certain common use cases.   # noqa: E501

        :param resource_type: The resource_type of this LbHttpProfile.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501
        allowed_values = ["LbHttpProfile", "LbFastTcpProfile", "LbFastUdpProfile"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def response_timeout(self):
        """Gets the response_timeout of this LbHttpProfile.  # noqa: E501

        If server doesn't send any packet within this time, the connection is closed.   # noqa: E501

        :return: The response_timeout of this LbHttpProfile.  # noqa: E501
        :rtype: int
        """
        return self._response_timeout

    @response_timeout.setter
    def response_timeout(self, response_timeout):
        """Sets the response_timeout of this LbHttpProfile.

        If server doesn't send any packet within this time, the connection is closed.   # noqa: E501

        :param response_timeout: The response_timeout of this LbHttpProfile.  # noqa: E501
        :type: int
        """

        self._response_timeout = response_timeout

    @property
    def idle_timeout(self):
        """Gets the idle_timeout of this LbHttpProfile.  # noqa: E501

        It is used to specify the HTTP application idle timeout, it means that how long the load balancer will keep the connection idle to wait for the client to send the next keep-alive request. It is not a TCP socket setting.   # noqa: E501

        :return: The idle_timeout of this LbHttpProfile.  # noqa: E501
        :rtype: int
        """
        return self._idle_timeout

    @idle_timeout.setter
    def idle_timeout(self, idle_timeout):
        """Sets the idle_timeout of this LbHttpProfile.

        It is used to specify the HTTP application idle timeout, it means that how long the load balancer will keep the connection idle to wait for the client to send the next keep-alive request. It is not a TCP socket setting.   # noqa: E501

        :param idle_timeout: The idle_timeout of this LbHttpProfile.  # noqa: E501
        :type: int
        """

        self._idle_timeout = idle_timeout

    @property
    def request_body_size(self):
        """Gets the request_body_size of this LbHttpProfile.  # noqa: E501

        If it is not specified, it means that request body size is unlimited.   # noqa: E501

        :return: The request_body_size of this LbHttpProfile.  # noqa: E501
        :rtype: int
        """
        return self._request_body_size

    @request_body_size.setter
    def request_body_size(self, request_body_size):
        """Sets the request_body_size of this LbHttpProfile.

        If it is not specified, it means that request body size is unlimited.   # noqa: E501

        :param request_body_size: The request_body_size of this LbHttpProfile.  # noqa: E501
        :type: int
        """

        self._request_body_size = request_body_size

    @property
    def response_header_size(self):
        """Gets the response_header_size of this LbHttpProfile.  # noqa: E501

        A response with header larger than response_header_size will be dropped.   # noqa: E501

        :return: The response_header_size of this LbHttpProfile.  # noqa: E501
        :rtype: int
        """
        return self._response_header_size

    @response_header_size.setter
    def response_header_size(self, response_header_size):
        """Sets the response_header_size of this LbHttpProfile.

        A response with header larger than response_header_size will be dropped.   # noqa: E501

        :param response_header_size: The response_header_size of this LbHttpProfile.  # noqa: E501
        :type: int
        """

        self._response_header_size = response_header_size

    @property
    def ntlm(self):
        """Gets the ntlm of this LbHttpProfile.  # noqa: E501

        NTLM is an authentication protocol that can be used over HTTP. If the flag is set to true, LB will use NTLM challenge/response methodology.   # noqa: E501

        :return: The ntlm of this LbHttpProfile.  # noqa: E501
        :rtype: bool
        """
        return self._ntlm

    @ntlm.setter
    def ntlm(self, ntlm):
        """Sets the ntlm of this LbHttpProfile.

        NTLM is an authentication protocol that can be used over HTTP. If the flag is set to true, LB will use NTLM challenge/response methodology.   # noqa: E501

        :param ntlm: The ntlm of this LbHttpProfile.  # noqa: E501
        :type: bool
        """

        self._ntlm = ntlm

    @property
    def request_header_size(self):
        """Gets the request_header_size of this LbHttpProfile.  # noqa: E501

        A request with header larger than request_header_size will be processed as best effort whereas a request with header below this specified size is guaranteed to be processed.   # noqa: E501

        :return: The request_header_size of this LbHttpProfile.  # noqa: E501
        :rtype: int
        """
        return self._request_header_size

    @request_header_size.setter
    def request_header_size(self, request_header_size):
        """Sets the request_header_size of this LbHttpProfile.

        A request with header larger than request_header_size will be processed as best effort whereas a request with header below this specified size is guaranteed to be processed.   # noqa: E501

        :param request_header_size: The request_header_size of this LbHttpProfile.  # noqa: E501
        :type: int
        """

        self._request_header_size = request_header_size

    @property
    def http_redirect_to(self):
        """Gets the http_redirect_to of this LbHttpProfile.  # noqa: E501

        If a website is temporarily down or has moved, incoming requests for that virtual server can be temporarily redirected to a URL   # noqa: E501

        :return: The http_redirect_to of this LbHttpProfile.  # noqa: E501
        :rtype: str
        """
        return self._http_redirect_to

    @http_redirect_to.setter
    def http_redirect_to(self, http_redirect_to):
        """Sets the http_redirect_to of this LbHttpProfile.

        If a website is temporarily down or has moved, incoming requests for that virtual server can be temporarily redirected to a URL   # noqa: E501

        :param http_redirect_to: The http_redirect_to of this LbHttpProfile.  # noqa: E501
        :type: str
        """

        self._http_redirect_to = http_redirect_to

    @property
    def x_forwarded_for(self):
        """Gets the x_forwarded_for of this LbHttpProfile.  # noqa: E501

        insert or replace x_forwarded_for  # noqa: E501

        :return: The x_forwarded_for of this LbHttpProfile.  # noqa: E501
        :rtype: str
        """
        return self._x_forwarded_for

    @x_forwarded_for.setter
    def x_forwarded_for(self, x_forwarded_for):
        """Sets the x_forwarded_for of this LbHttpProfile.

        insert or replace x_forwarded_for  # noqa: E501

        :param x_forwarded_for: The x_forwarded_for of this LbHttpProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["INSERT", "REPLACE"]  # noqa: E501
        if x_forwarded_for not in allowed_values:
            raise ValueError(
                "Invalid value for `x_forwarded_for` ({0}), must be one of {1}"  # noqa: E501
                .format(x_forwarded_for, allowed_values)
            )

        self._x_forwarded_for = x_forwarded_for

    @property
    def http_redirect_to_https(self):
        """Gets the http_redirect_to_https of this LbHttpProfile.  # noqa: E501

        Certain secure applications may want to force communication over SSL, but instead of rejecting non-SSL connections, they may choose to redirect the client automatically to use SSL.   # noqa: E501

        :return: The http_redirect_to_https of this LbHttpProfile.  # noqa: E501
        :rtype: bool
        """
        return self._http_redirect_to_https

    @http_redirect_to_https.setter
    def http_redirect_to_https(self, http_redirect_to_https):
        """Sets the http_redirect_to_https of this LbHttpProfile.

        Certain secure applications may want to force communication over SSL, but instead of rejecting non-SSL connections, they may choose to redirect the client automatically to use SSL.   # noqa: E501

        :param http_redirect_to_https: The http_redirect_to_https of this LbHttpProfile.  # noqa: E501
        :type: bool
        """

        self._http_redirect_to_https = http_redirect_to_https

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LbHttpProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LbHttpProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
