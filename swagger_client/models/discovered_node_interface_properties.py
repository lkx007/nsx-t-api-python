# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DiscoveredNodeInterfaceProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'physical_address': 'str',
        'connected_switch': 'str',
        'interface_id': 'str'
    }

    attribute_map = {
        'physical_address': 'physical_address',
        'connected_switch': 'connected_switch',
        'interface_id': 'interface_id'
    }

    def __init__(self, physical_address=None, connected_switch=None, interface_id=None):  # noqa: E501
        """DiscoveredNodeInterfaceProperties - a model defined in Swagger"""  # noqa: E501
        self._physical_address = None
        self._connected_switch = None
        self._interface_id = None
        self.discriminator = None
        if physical_address is not None:
            self.physical_address = physical_address
        if connected_switch is not None:
            self.connected_switch = connected_switch
        if interface_id is not None:
            self.interface_id = interface_id

    @property
    def physical_address(self):
        """Gets the physical_address of this DiscoveredNodeInterfaceProperties.  # noqa: E501

        Mac address of the interface  # noqa: E501

        :return: The physical_address of this DiscoveredNodeInterfaceProperties.  # noqa: E501
        :rtype: str
        """
        return self._physical_address

    @physical_address.setter
    def physical_address(self, physical_address):
        """Sets the physical_address of this DiscoveredNodeInterfaceProperties.

        Mac address of the interface  # noqa: E501

        :param physical_address: The physical_address of this DiscoveredNodeInterfaceProperties.  # noqa: E501
        :type: str
        """

        self._physical_address = physical_address

    @property
    def connected_switch(self):
        """Gets the connected_switch of this DiscoveredNodeInterfaceProperties.  # noqa: E501

        Switch name which is connected to nic, switch can be opaque, proxyHostSwitch or virtual  # noqa: E501

        :return: The connected_switch of this DiscoveredNodeInterfaceProperties.  # noqa: E501
        :rtype: str
        """
        return self._connected_switch

    @connected_switch.setter
    def connected_switch(self, connected_switch):
        """Sets the connected_switch of this DiscoveredNodeInterfaceProperties.

        Switch name which is connected to nic, switch can be opaque, proxyHostSwitch or virtual  # noqa: E501

        :param connected_switch: The connected_switch of this DiscoveredNodeInterfaceProperties.  # noqa: E501
        :type: str
        """

        self._connected_switch = connected_switch

    @property
    def interface_id(self):
        """Gets the interface_id of this DiscoveredNodeInterfaceProperties.  # noqa: E501

        Id of the network interface  # noqa: E501

        :return: The interface_id of this DiscoveredNodeInterfaceProperties.  # noqa: E501
        :rtype: str
        """
        return self._interface_id

    @interface_id.setter
    def interface_id(self, interface_id):
        """Sets the interface_id of this DiscoveredNodeInterfaceProperties.

        Id of the network interface  # noqa: E501

        :param interface_id: The interface_id of this DiscoveredNodeInterfaceProperties.  # noqa: E501
        :type: str
        """

        self._interface_id = interface_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiscoveredNodeInterfaceProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscoveredNodeInterfaceProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
