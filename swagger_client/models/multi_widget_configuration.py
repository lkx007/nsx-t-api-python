# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MultiWidgetConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'display_name': 'str',
        'datasources': 'list[Datasource]',
        'weight': 'int',
        'icons': 'list[Icon]',
        'shared': 'bool',
        'footer': 'Footer',
        'drilldown_id': 'str',
        'is_drilldown': 'bool',
        'legend': 'Legend',
        'widgets': 'list[WidgetItem]',
        'navigation': 'str'
    }
    if hasattr(WidgetConfiguration, "swagger_types"):
        swagger_types.update(WidgetConfiguration.swagger_types)

    attribute_map = {
        'resource_type': 'resource_type',
        'display_name': 'display_name',
        'datasources': 'datasources',
        'weight': 'weight',
        'icons': 'icons',
        'shared': 'shared',
        'footer': 'footer',
        'drilldown_id': 'drilldown_id',
        'is_drilldown': 'is_drilldown',
        'legend': 'legend',
        'widgets': 'widgets',
        'navigation': 'navigation'
    }
    if hasattr(WidgetConfiguration, "attribute_map"):
        attribute_map.update(WidgetConfiguration.attribute_map)

    def __init__(self, resource_type=None, display_name=None, datasources=None, weight=None, icons=None, shared=None, footer=None, drilldown_id=None, is_drilldown=False, legend=None, widgets=None, navigation=None, *args, **kwargs):  # noqa: E501
        """MultiWidgetConfiguration - a model defined in Swagger"""  # noqa: E501
        self._resource_type = None
        self._display_name = None
        self._datasources = None
        self._weight = None
        self._icons = None
        self._shared = None
        self._footer = None
        self._drilldown_id = None
        self._is_drilldown = None
        self._legend = None
        self._widgets = None
        self._navigation = None
        self.discriminator = None
        self.resource_type = resource_type
        if display_name is not None:
            self.display_name = display_name
        if datasources is not None:
            self.datasources = datasources
        if weight is not None:
            self.weight = weight
        if icons is not None:
            self.icons = icons
        if shared is not None:
            self.shared = shared
        if footer is not None:
            self.footer = footer
        if drilldown_id is not None:
            self.drilldown_id = drilldown_id
        if is_drilldown is not None:
            self.is_drilldown = is_drilldown
        if legend is not None:
            self.legend = legend
        self.widgets = widgets
        if navigation is not None:
            self.navigation = navigation
        WidgetConfiguration.__init__(self, *args, **kwargs)

    @property
    def resource_type(self):
        """Gets the resource_type of this MultiWidgetConfiguration.  # noqa: E501

        Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration and ContainerConfiguration.  # noqa: E501

        :return: The resource_type of this MultiWidgetConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this MultiWidgetConfiguration.

        Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration and ContainerConfiguration.  # noqa: E501

        :param resource_type: The resource_type of this MultiWidgetConfiguration.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501
        allowed_values = ["LabelValueConfiguration", "DonutConfiguration", "MultiWidgetConfiguration", "ContainerConfiguration", "StatsConfiguration", "GridConfiguration", "GraphConfiguration"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def display_name(self):
        """Gets the display_name of this MultiWidgetConfiguration.  # noqa: E501

        Title of the widget. If display_name is omitted, the widget will be shown without a title.  # noqa: E501

        :return: The display_name of this MultiWidgetConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this MultiWidgetConfiguration.

        Title of the widget. If display_name is omitted, the widget will be shown without a title.  # noqa: E501

        :param display_name: The display_name of this MultiWidgetConfiguration.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def datasources(self):
        """Gets the datasources of this MultiWidgetConfiguration.  # noqa: E501

        The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.  # noqa: E501

        :return: The datasources of this MultiWidgetConfiguration.  # noqa: E501
        :rtype: list[Datasource]
        """
        return self._datasources

    @datasources.setter
    def datasources(self, datasources):
        """Sets the datasources of this MultiWidgetConfiguration.

        The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.  # noqa: E501

        :param datasources: The datasources of this MultiWidgetConfiguration.  # noqa: E501
        :type: list[Datasource]
        """

        self._datasources = datasources

    @property
    def weight(self):
        """Gets the weight of this MultiWidgetConfiguration.  # noqa: E501

        Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.  # noqa: E501

        :return: The weight of this MultiWidgetConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this MultiWidgetConfiguration.

        Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.  # noqa: E501

        :param weight: The weight of this MultiWidgetConfiguration.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def icons(self):
        """Gets the icons of this MultiWidgetConfiguration.  # noqa: E501

        Icons to be applied at dashboard for widgets and UI elements.  # noqa: E501

        :return: The icons of this MultiWidgetConfiguration.  # noqa: E501
        :rtype: list[Icon]
        """
        return self._icons

    @icons.setter
    def icons(self, icons):
        """Sets the icons of this MultiWidgetConfiguration.

        Icons to be applied at dashboard for widgets and UI elements.  # noqa: E501

        :param icons: The icons of this MultiWidgetConfiguration.  # noqa: E501
        :type: list[Icon]
        """

        self._icons = icons

    @property
    def shared(self):
        """Gets the shared of this MultiWidgetConfiguration.  # noqa: E501

        Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.  # noqa: E501

        :return: The shared of this MultiWidgetConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this MultiWidgetConfiguration.

        Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.  # noqa: E501

        :param shared: The shared of this MultiWidgetConfiguration.  # noqa: E501
        :type: bool
        """

        self._shared = shared

    @property
    def footer(self):
        """Gets the footer of this MultiWidgetConfiguration.  # noqa: E501


        :return: The footer of this MultiWidgetConfiguration.  # noqa: E501
        :rtype: Footer
        """
        return self._footer

    @footer.setter
    def footer(self, footer):
        """Sets the footer of this MultiWidgetConfiguration.


        :param footer: The footer of this MultiWidgetConfiguration.  # noqa: E501
        :type: Footer
        """

        self._footer = footer

    @property
    def drilldown_id(self):
        """Gets the drilldown_id of this MultiWidgetConfiguration.  # noqa: E501

        Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.  # noqa: E501

        :return: The drilldown_id of this MultiWidgetConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._drilldown_id

    @drilldown_id.setter
    def drilldown_id(self, drilldown_id):
        """Sets the drilldown_id of this MultiWidgetConfiguration.

        Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.  # noqa: E501

        :param drilldown_id: The drilldown_id of this MultiWidgetConfiguration.  # noqa: E501
        :type: str
        """

        self._drilldown_id = drilldown_id

    @property
    def is_drilldown(self):
        """Gets the is_drilldown of this MultiWidgetConfiguration.  # noqa: E501

        Set to true if this widget should be used as a drilldown.  # noqa: E501

        :return: The is_drilldown of this MultiWidgetConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._is_drilldown

    @is_drilldown.setter
    def is_drilldown(self, is_drilldown):
        """Sets the is_drilldown of this MultiWidgetConfiguration.

        Set to true if this widget should be used as a drilldown.  # noqa: E501

        :param is_drilldown: The is_drilldown of this MultiWidgetConfiguration.  # noqa: E501
        :type: bool
        """

        self._is_drilldown = is_drilldown

    @property
    def legend(self):
        """Gets the legend of this MultiWidgetConfiguration.  # noqa: E501


        :return: The legend of this MultiWidgetConfiguration.  # noqa: E501
        :rtype: Legend
        """
        return self._legend

    @legend.setter
    def legend(self, legend):
        """Sets the legend of this MultiWidgetConfiguration.


        :param legend: The legend of this MultiWidgetConfiguration.  # noqa: E501
        :type: Legend
        """

        self._legend = legend

    @property
    def widgets(self):
        """Gets the widgets of this MultiWidgetConfiguration.  # noqa: E501

        Array of widgets that are part of the multi-widget.  # noqa: E501

        :return: The widgets of this MultiWidgetConfiguration.  # noqa: E501
        :rtype: list[WidgetItem]
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets):
        """Sets the widgets of this MultiWidgetConfiguration.

        Array of widgets that are part of the multi-widget.  # noqa: E501

        :param widgets: The widgets of this MultiWidgetConfiguration.  # noqa: E501
        :type: list[WidgetItem]
        """
        if widgets is None:
            raise ValueError("Invalid value for `widgets`, must not be `None`")  # noqa: E501

        self._widgets = widgets

    @property
    def navigation(self):
        """Gets the navigation of this MultiWidgetConfiguration.  # noqa: E501

        Hyperlink of the specified UI page that provides details.  # noqa: E501

        :return: The navigation of this MultiWidgetConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._navigation

    @navigation.setter
    def navigation(self, navigation):
        """Sets the navigation of this MultiWidgetConfiguration.

        Hyperlink of the specified UI page that provides details.  # noqa: E501

        :param navigation: The navigation of this MultiWidgetConfiguration.  # noqa: E501
        :type: str
        """

        self._navigation = navigation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MultiWidgetConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MultiWidgetConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
