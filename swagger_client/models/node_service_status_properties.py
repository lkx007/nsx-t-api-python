# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class NodeServiceStatusProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_self': 'SelfResourceLink',
        'links': 'list[ResourceLink]',
        'schema': 'str',
        'health': 'str',
        'pids': 'list[int]',
        'runtime_state': 'str',
        'monitor_runtime_state': 'str',
        'monitor_pid': 'int'
    }
    if hasattr(Resource, "swagger_types"):
        swagger_types.update(Resource.swagger_types)

    attribute_map = {
        '_self': '_self',
        'links': '_links',
        'schema': '_schema',
        'health': 'health',
        'pids': 'pids',
        'runtime_state': 'runtime_state',
        'monitor_runtime_state': 'monitor_runtime_state',
        'monitor_pid': 'monitor_pid'
    }
    if hasattr(Resource, "attribute_map"):
        attribute_map.update(Resource.attribute_map)

    def __init__(self, _self=None, links=None, schema=None, health=None, pids=None, runtime_state=None, monitor_runtime_state=None, monitor_pid=None, *args, **kwargs):  # noqa: E501
        """NodeServiceStatusProperties - a model defined in Swagger"""  # noqa: E501
        self.__self = None
        self._links = None
        self._schema = None
        self._health = None
        self._pids = None
        self._runtime_state = None
        self._monitor_runtime_state = None
        self._monitor_pid = None
        self.discriminator = None
        if _self is not None:
            self._self = _self
        if links is not None:
            self.links = links
        if schema is not None:
            self.schema = schema
        if health is not None:
            self.health = health
        if pids is not None:
            self.pids = pids
        if runtime_state is not None:
            self.runtime_state = runtime_state
        if monitor_runtime_state is not None:
            self.monitor_runtime_state = monitor_runtime_state
        if monitor_pid is not None:
            self.monitor_pid = monitor_pid
        Resource.__init__(self, *args, **kwargs)

    @property
    def _self(self):
        """Gets the _self of this NodeServiceStatusProperties.  # noqa: E501


        :return: The _self of this NodeServiceStatusProperties.  # noqa: E501
        :rtype: SelfResourceLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this NodeServiceStatusProperties.


        :param _self: The _self of this NodeServiceStatusProperties.  # noqa: E501
        :type: SelfResourceLink
        """

        self.__self = _self

    @property
    def links(self):
        """Gets the links of this NodeServiceStatusProperties.  # noqa: E501

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :return: The links of this NodeServiceStatusProperties.  # noqa: E501
        :rtype: list[ResourceLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this NodeServiceStatusProperties.

        The server will populate this field when returing the resource. Ignored on PUT and POST.  # noqa: E501

        :param links: The links of this NodeServiceStatusProperties.  # noqa: E501
        :type: list[ResourceLink]
        """

        self._links = links

    @property
    def schema(self):
        """Gets the schema of this NodeServiceStatusProperties.  # noqa: E501

        Schema for this resource  # noqa: E501

        :return: The schema of this NodeServiceStatusProperties.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this NodeServiceStatusProperties.

        Schema for this resource  # noqa: E501

        :param schema: The schema of this NodeServiceStatusProperties.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def health(self):
        """Gets the health of this NodeServiceStatusProperties.  # noqa: E501

        Service health in addition to runtime_state  # noqa: E501

        :return: The health of this NodeServiceStatusProperties.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this NodeServiceStatusProperties.

        Service health in addition to runtime_state  # noqa: E501

        :param health: The health of this NodeServiceStatusProperties.  # noqa: E501
        :type: str
        """

        self._health = health

    @property
    def pids(self):
        """Gets the pids of this NodeServiceStatusProperties.  # noqa: E501

        Service process ids  # noqa: E501

        :return: The pids of this NodeServiceStatusProperties.  # noqa: E501
        :rtype: list[int]
        """
        return self._pids

    @pids.setter
    def pids(self, pids):
        """Sets the pids of this NodeServiceStatusProperties.

        Service process ids  # noqa: E501

        :param pids: The pids of this NodeServiceStatusProperties.  # noqa: E501
        :type: list[int]
        """

        self._pids = pids

    @property
    def runtime_state(self):
        """Gets the runtime_state of this NodeServiceStatusProperties.  # noqa: E501

        Service runtime state  # noqa: E501

        :return: The runtime_state of this NodeServiceStatusProperties.  # noqa: E501
        :rtype: str
        """
        return self._runtime_state

    @runtime_state.setter
    def runtime_state(self, runtime_state):
        """Sets the runtime_state of this NodeServiceStatusProperties.

        Service runtime state  # noqa: E501

        :param runtime_state: The runtime_state of this NodeServiceStatusProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["running", "stopped"]  # noqa: E501
        if runtime_state not in allowed_values:
            raise ValueError(
                "Invalid value for `runtime_state` ({0}), must be one of {1}"  # noqa: E501
                .format(runtime_state, allowed_values)
            )

        self._runtime_state = runtime_state

    @property
    def monitor_runtime_state(self):
        """Gets the monitor_runtime_state of this NodeServiceStatusProperties.  # noqa: E501

        Service monitor runtime state  # noqa: E501

        :return: The monitor_runtime_state of this NodeServiceStatusProperties.  # noqa: E501
        :rtype: str
        """
        return self._monitor_runtime_state

    @monitor_runtime_state.setter
    def monitor_runtime_state(self, monitor_runtime_state):
        """Sets the monitor_runtime_state of this NodeServiceStatusProperties.

        Service monitor runtime state  # noqa: E501

        :param monitor_runtime_state: The monitor_runtime_state of this NodeServiceStatusProperties.  # noqa: E501
        :type: str
        """
        allowed_values = ["running", "stopped"]  # noqa: E501
        if monitor_runtime_state not in allowed_values:
            raise ValueError(
                "Invalid value for `monitor_runtime_state` ({0}), must be one of {1}"  # noqa: E501
                .format(monitor_runtime_state, allowed_values)
            )

        self._monitor_runtime_state = monitor_runtime_state

    @property
    def monitor_pid(self):
        """Gets the monitor_pid of this NodeServiceStatusProperties.  # noqa: E501

        Service monitor process id  # noqa: E501

        :return: The monitor_pid of this NodeServiceStatusProperties.  # noqa: E501
        :rtype: int
        """
        return self._monitor_pid

    @monitor_pid.setter
    def monitor_pid(self, monitor_pid):
        """Sets the monitor_pid of this NodeServiceStatusProperties.

        Service monitor process id  # noqa: E501

        :param monitor_pid: The monitor_pid of this NodeServiceStatusProperties.  # noqa: E501
        :type: int
        """

        self._monitor_pid = monitor_pid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NodeServiceStatusProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NodeServiceStatusProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
