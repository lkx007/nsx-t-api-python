# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class HealthCheckResultOnHostSwitch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_switch_name': 'str',
        'results_per_uplink': 'list[HealthCheckResultPerUplink]'
    }

    attribute_map = {
        'host_switch_name': 'host_switch_name',
        'results_per_uplink': 'results_per_uplink'
    }

    def __init__(self, host_switch_name=None, results_per_uplink=None):  # noqa: E501
        """HealthCheckResultOnHostSwitch - a model defined in Swagger"""  # noqa: E501
        self._host_switch_name = None
        self._results_per_uplink = None
        self.discriminator = None
        if host_switch_name is not None:
            self.host_switch_name = host_switch_name
        if results_per_uplink is not None:
            self.results_per_uplink = results_per_uplink

    @property
    def host_switch_name(self):
        """Gets the host_switch_name of this HealthCheckResultOnHostSwitch.  # noqa: E501

        Name of the host switch.  # noqa: E501

        :return: The host_switch_name of this HealthCheckResultOnHostSwitch.  # noqa: E501
        :rtype: str
        """
        return self._host_switch_name

    @host_switch_name.setter
    def host_switch_name(self, host_switch_name):
        """Sets the host_switch_name of this HealthCheckResultOnHostSwitch.

        Name of the host switch.  # noqa: E501

        :param host_switch_name: The host_switch_name of this HealthCheckResultOnHostSwitch.  # noqa: E501
        :type: str
        """

        self._host_switch_name = host_switch_name

    @property
    def results_per_uplink(self):
        """Gets the results_per_uplink of this HealthCheckResultOnHostSwitch.  # noqa: E501

        List of health check results per uplink on current host switch of specific transport node.   # noqa: E501

        :return: The results_per_uplink of this HealthCheckResultOnHostSwitch.  # noqa: E501
        :rtype: list[HealthCheckResultPerUplink]
        """
        return self._results_per_uplink

    @results_per_uplink.setter
    def results_per_uplink(self, results_per_uplink):
        """Sets the results_per_uplink of this HealthCheckResultOnHostSwitch.

        List of health check results per uplink on current host switch of specific transport node.   # noqa: E501

        :param results_per_uplink: The results_per_uplink of this HealthCheckResultOnHostSwitch.  # noqa: E501
        :type: list[HealthCheckResultPerUplink]
        """

        self._results_per_uplink = results_per_uplink

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HealthCheckResultOnHostSwitch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthCheckResultOnHostSwitch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
