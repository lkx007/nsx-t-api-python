# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DirectoryAdDomain(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ldap_servers': 'list[DirectoryLdapServer]',
        'name': 'str',
        'resource_type': 'str',
        'base_distinguished_name': 'str',
        'sync_settings': 'DirectoryDomainSyncSettings',
        'netbios_name': 'str'
    }
    if hasattr(DirectoryDomain, "swagger_types"):
        swagger_types.update(DirectoryDomain.swagger_types)

    attribute_map = {
        'ldap_servers': 'ldap_servers',
        'name': 'name',
        'resource_type': 'resource_type',
        'base_distinguished_name': 'base_distinguished_name',
        'sync_settings': 'sync_settings',
        'netbios_name': 'netbios_name'
    }
    if hasattr(DirectoryDomain, "attribute_map"):
        attribute_map.update(DirectoryDomain.attribute_map)

    def __init__(self, ldap_servers=None, name=None, resource_type=None, base_distinguished_name=None, sync_settings=None, netbios_name=None, *args, **kwargs):  # noqa: E501
        """DirectoryAdDomain - a model defined in Swagger"""  # noqa: E501
        self._ldap_servers = None
        self._name = None
        self._resource_type = None
        self._base_distinguished_name = None
        self._sync_settings = None
        self._netbios_name = None
        self.discriminator = None
        self.ldap_servers = ldap_servers
        self.name = name
        self.resource_type = resource_type
        self.base_distinguished_name = base_distinguished_name
        if sync_settings is not None:
            self.sync_settings = sync_settings
        self.netbios_name = netbios_name
        DirectoryDomain.__init__(self, *args, **kwargs)

    @property
    def ldap_servers(self):
        """Gets the ldap_servers of this DirectoryAdDomain.  # noqa: E501

        Directory domain LDAP servers' information including host, name, port, protocol and so on.  # noqa: E501

        :return: The ldap_servers of this DirectoryAdDomain.  # noqa: E501
        :rtype: list[DirectoryLdapServer]
        """
        return self._ldap_servers

    @ldap_servers.setter
    def ldap_servers(self, ldap_servers):
        """Sets the ldap_servers of this DirectoryAdDomain.

        Directory domain LDAP servers' information including host, name, port, protocol and so on.  # noqa: E501

        :param ldap_servers: The ldap_servers of this DirectoryAdDomain.  # noqa: E501
        :type: list[DirectoryLdapServer]
        """
        if ldap_servers is None:
            raise ValueError("Invalid value for `ldap_servers`, must not be `None`")  # noqa: E501

        self._ldap_servers = ldap_servers

    @property
    def name(self):
        """Gets the name of this DirectoryAdDomain.  # noqa: E501

        Directory domain name which best describes the domain. It could be unique fqdn name or it could also be descriptive. There is no unique contraint for domain name among different domains.  # noqa: E501

        :return: The name of this DirectoryAdDomain.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DirectoryAdDomain.

        Directory domain name which best describes the domain. It could be unique fqdn name or it could also be descriptive. There is no unique contraint for domain name among different domains.  # noqa: E501

        :param name: The name of this DirectoryAdDomain.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def resource_type(self):
        """Gets the resource_type of this DirectoryAdDomain.  # noqa: E501

        Domain resource type comes from multiple sub-classes extending this base class. For example, DirectoryAdDomain is one accepted resource_type. If there are more sub-classes defined, they will also be accepted resource_type.  # noqa: E501

        :return: The resource_type of this DirectoryAdDomain.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this DirectoryAdDomain.

        Domain resource type comes from multiple sub-classes extending this base class. For example, DirectoryAdDomain is one accepted resource_type. If there are more sub-classes defined, they will also be accepted resource_type.  # noqa: E501

        :param resource_type: The resource_type of this DirectoryAdDomain.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def base_distinguished_name(self):
        """Gets the base_distinguished_name of this DirectoryAdDomain.  # noqa: E501

        Each active directory domain has a domain naming context (NC), which contains domain-specific data. The root of this naming context is represented by a domain's distinguished name (DN) and is typically referred to as the NC head.  # noqa: E501

        :return: The base_distinguished_name of this DirectoryAdDomain.  # noqa: E501
        :rtype: str
        """
        return self._base_distinguished_name

    @base_distinguished_name.setter
    def base_distinguished_name(self, base_distinguished_name):
        """Sets the base_distinguished_name of this DirectoryAdDomain.

        Each active directory domain has a domain naming context (NC), which contains domain-specific data. The root of this naming context is represented by a domain's distinguished name (DN) and is typically referred to as the NC head.  # noqa: E501

        :param base_distinguished_name: The base_distinguished_name of this DirectoryAdDomain.  # noqa: E501
        :type: str
        """
        if base_distinguished_name is None:
            raise ValueError("Invalid value for `base_distinguished_name`, must not be `None`")  # noqa: E501

        self._base_distinguished_name = base_distinguished_name

    @property
    def sync_settings(self):
        """Gets the sync_settings of this DirectoryAdDomain.  # noqa: E501


        :return: The sync_settings of this DirectoryAdDomain.  # noqa: E501
        :rtype: DirectoryDomainSyncSettings
        """
        return self._sync_settings

    @sync_settings.setter
    def sync_settings(self, sync_settings):
        """Sets the sync_settings of this DirectoryAdDomain.


        :param sync_settings: The sync_settings of this DirectoryAdDomain.  # noqa: E501
        :type: DirectoryDomainSyncSettings
        """

        self._sync_settings = sync_settings

    @property
    def netbios_name(self):
        """Gets the netbios_name of this DirectoryAdDomain.  # noqa: E501

        NetBIOS names can contain all alphanumeric characters except for the certain disallowed characters. Names can contain a period, but names cannot start with a period. NetBIOS is similar to DNS in that it can serve as a directory service, but more limited as it has no provisions for a name hierarchy and names are limited to 15 characters. The netbios name is case insensitive and is stored in upper case regardless of input case.  # noqa: E501

        :return: The netbios_name of this DirectoryAdDomain.  # noqa: E501
        :rtype: str
        """
        return self._netbios_name

    @netbios_name.setter
    def netbios_name(self, netbios_name):
        """Sets the netbios_name of this DirectoryAdDomain.

        NetBIOS names can contain all alphanumeric characters except for the certain disallowed characters. Names can contain a period, but names cannot start with a period. NetBIOS is similar to DNS in that it can serve as a directory service, but more limited as it has no provisions for a name hierarchy and names are limited to 15 characters. The netbios name is case insensitive and is stored in upper case regardless of input case.  # noqa: E501

        :param netbios_name: The netbios_name of this DirectoryAdDomain.  # noqa: E501
        :type: str
        """
        if netbios_name is None:
            raise ValueError("Invalid value for `netbios_name`, must not be `None`")  # noqa: E501

        self._netbios_name = netbios_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DirectoryAdDomain, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryAdDomain):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
