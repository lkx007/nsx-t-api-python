# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LogicalPort(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system_owned': 'bool',
        'display_name': 'str',
        'description': 'str',
        'tags': 'list[Tag]',
        'create_user': 'str',
        'protection': 'str',
        'create_time': 'int',
        'last_modified_time': 'int',
        'last_modified_user': 'str',
        'id': 'str',
        'resource_type': 'str',
        'logical_switch_id': 'str',
        'init_state': 'str',
        'switching_profile_ids': 'list[SwitchingProfileTypeIdEntry]',
        'attachment': 'LogicalPortAttachment',
        'admin_state': 'str',
        'extra_configs': 'list[ExtraConfig]',
        'address_bindings': 'list[PacketAddressClassifier]',
        'ignore_address_bindings': 'list[PacketAddressClassifier]'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'system_owned': '_system_owned',
        'display_name': 'display_name',
        'description': 'description',
        'tags': 'tags',
        'create_user': '_create_user',
        'protection': '_protection',
        'create_time': '_create_time',
        'last_modified_time': '_last_modified_time',
        'last_modified_user': '_last_modified_user',
        'id': 'id',
        'resource_type': 'resource_type',
        'logical_switch_id': 'logical_switch_id',
        'init_state': 'init_state',
        'switching_profile_ids': 'switching_profile_ids',
        'attachment': 'attachment',
        'admin_state': 'admin_state',
        'extra_configs': 'extra_configs',
        'address_bindings': 'address_bindings',
        'ignore_address_bindings': 'ignore_address_bindings'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    def __init__(self, system_owned=None, display_name=None, description=None, tags=None, create_user=None, protection=None, create_time=None, last_modified_time=None, last_modified_user=None, id=None, resource_type=None, logical_switch_id=None, init_state=None, switching_profile_ids=None, attachment=None, admin_state=None, extra_configs=None, address_bindings=None, ignore_address_bindings=None, *args, **kwargs):  # noqa: E501
        """LogicalPort - a model defined in Swagger"""  # noqa: E501
        self._system_owned = None
        self._display_name = None
        self._description = None
        self._tags = None
        self._create_user = None
        self._protection = None
        self._create_time = None
        self._last_modified_time = None
        self._last_modified_user = None
        self._id = None
        self._resource_type = None
        self._logical_switch_id = None
        self._init_state = None
        self._switching_profile_ids = None
        self._attachment = None
        self._admin_state = None
        self._extra_configs = None
        self._address_bindings = None
        self._ignore_address_bindings = None
        self.discriminator = None
        if system_owned is not None:
            self.system_owned = system_owned
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if create_user is not None:
            self.create_user = create_user
        if protection is not None:
            self.protection = protection
        if create_time is not None:
            self.create_time = create_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if last_modified_user is not None:
            self.last_modified_user = last_modified_user
        if id is not None:
            self.id = id
        if resource_type is not None:
            self.resource_type = resource_type
        self.logical_switch_id = logical_switch_id
        if init_state is not None:
            self.init_state = init_state
        if switching_profile_ids is not None:
            self.switching_profile_ids = switching_profile_ids
        if attachment is not None:
            self.attachment = attachment
        self.admin_state = admin_state
        if extra_configs is not None:
            self.extra_configs = extra_configs
        if address_bindings is not None:
            self.address_bindings = address_bindings
        if ignore_address_bindings is not None:
            self.ignore_address_bindings = ignore_address_bindings
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def system_owned(self):
        """Gets the system_owned of this LogicalPort.  # noqa: E501

        Indicates system owned resource  # noqa: E501

        :return: The system_owned of this LogicalPort.  # noqa: E501
        :rtype: bool
        """
        return self._system_owned

    @system_owned.setter
    def system_owned(self, system_owned):
        """Sets the system_owned of this LogicalPort.

        Indicates system owned resource  # noqa: E501

        :param system_owned: The system_owned of this LogicalPort.  # noqa: E501
        :type: bool
        """

        self._system_owned = system_owned

    @property
    def display_name(self):
        """Gets the display_name of this LogicalPort.  # noqa: E501

        Defaults to ID if not set  # noqa: E501

        :return: The display_name of this LogicalPort.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this LogicalPort.

        Defaults to ID if not set  # noqa: E501

        :param display_name: The display_name of this LogicalPort.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this LogicalPort.  # noqa: E501

        Description of this resource  # noqa: E501

        :return: The description of this LogicalPort.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LogicalPort.

        Description of this resource  # noqa: E501

        :param description: The description of this LogicalPort.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this LogicalPort.  # noqa: E501

        Opaque identifiers meaningful to the API user  # noqa: E501

        :return: The tags of this LogicalPort.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this LogicalPort.

        Opaque identifiers meaningful to the API user  # noqa: E501

        :param tags: The tags of this LogicalPort.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def create_user(self):
        """Gets the create_user of this LogicalPort.  # noqa: E501

        ID of the user who created this resource  # noqa: E501

        :return: The create_user of this LogicalPort.  # noqa: E501
        :rtype: str
        """
        return self._create_user

    @create_user.setter
    def create_user(self, create_user):
        """Sets the create_user of this LogicalPort.

        ID of the user who created this resource  # noqa: E501

        :param create_user: The create_user of this LogicalPort.  # noqa: E501
        :type: str
        """

        self._create_user = create_user

    @property
    def protection(self):
        """Gets the protection of this LogicalPort.  # noqa: E501

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :return: The protection of this LogicalPort.  # noqa: E501
        :rtype: str
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this LogicalPort.

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :param protection: The protection of this LogicalPort.  # noqa: E501
        :type: str
        """

        self._protection = protection

    @property
    def create_time(self):
        """Gets the create_time of this LogicalPort.  # noqa: E501

        Timestamp of resource creation  # noqa: E501

        :return: The create_time of this LogicalPort.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this LogicalPort.

        Timestamp of resource creation  # noqa: E501

        :param create_time: The create_time of this LogicalPort.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this LogicalPort.  # noqa: E501

        Timestamp of last modification  # noqa: E501

        :return: The last_modified_time of this LogicalPort.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this LogicalPort.

        Timestamp of last modification  # noqa: E501

        :param last_modified_time: The last_modified_time of this LogicalPort.  # noqa: E501
        :type: int
        """

        self._last_modified_time = last_modified_time

    @property
    def last_modified_user(self):
        """Gets the last_modified_user of this LogicalPort.  # noqa: E501

        ID of the user who last modified this resource  # noqa: E501

        :return: The last_modified_user of this LogicalPort.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_user

    @last_modified_user.setter
    def last_modified_user(self, last_modified_user):
        """Sets the last_modified_user of this LogicalPort.

        ID of the user who last modified this resource  # noqa: E501

        :param last_modified_user: The last_modified_user of this LogicalPort.  # noqa: E501
        :type: str
        """

        self._last_modified_user = last_modified_user

    @property
    def id(self):
        """Gets the id of this LogicalPort.  # noqa: E501

        Unique identifier of this resource  # noqa: E501

        :return: The id of this LogicalPort.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LogicalPort.

        Unique identifier of this resource  # noqa: E501

        :param id: The id of this LogicalPort.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resource_type(self):
        """Gets the resource_type of this LogicalPort.  # noqa: E501

        The type of this resource.  # noqa: E501

        :return: The resource_type of this LogicalPort.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this LogicalPort.

        The type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this LogicalPort.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def logical_switch_id(self):
        """Gets the logical_switch_id of this LogicalPort.  # noqa: E501

        Id of the Logical switch that this port belongs to.  # noqa: E501

        :return: The logical_switch_id of this LogicalPort.  # noqa: E501
        :rtype: str
        """
        return self._logical_switch_id

    @logical_switch_id.setter
    def logical_switch_id(self, logical_switch_id):
        """Sets the logical_switch_id of this LogicalPort.

        Id of the Logical switch that this port belongs to.  # noqa: E501

        :param logical_switch_id: The logical_switch_id of this LogicalPort.  # noqa: E501
        :type: str
        """
        if logical_switch_id is None:
            raise ValueError("Invalid value for `logical_switch_id`, must not be `None`")  # noqa: E501

        self._logical_switch_id = logical_switch_id

    @property
    def init_state(self):
        """Gets the init_state of this LogicalPort.  # noqa: E501

        Set initial state when a new logical port is created. 'UNBLOCKED_VLAN' means new port will be unblocked on traffic in creation, also VLAN will be set with corresponding logical switch setting. This port setting can only be configured at port creation (POST), and cannot be modified.   # noqa: E501

        :return: The init_state of this LogicalPort.  # noqa: E501
        :rtype: str
        """
        return self._init_state

    @init_state.setter
    def init_state(self, init_state):
        """Sets the init_state of this LogicalPort.

        Set initial state when a new logical port is created. 'UNBLOCKED_VLAN' means new port will be unblocked on traffic in creation, also VLAN will be set with corresponding logical switch setting. This port setting can only be configured at port creation (POST), and cannot be modified.   # noqa: E501

        :param init_state: The init_state of this LogicalPort.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNBLOCKED_VLAN"]  # noqa: E501
        if init_state not in allowed_values:
            raise ValueError(
                "Invalid value for `init_state` ({0}), must be one of {1}"  # noqa: E501
                .format(init_state, allowed_values)
            )

        self._init_state = init_state

    @property
    def switching_profile_ids(self):
        """Gets the switching_profile_ids of this LogicalPort.  # noqa: E501


        :return: The switching_profile_ids of this LogicalPort.  # noqa: E501
        :rtype: list[SwitchingProfileTypeIdEntry]
        """
        return self._switching_profile_ids

    @switching_profile_ids.setter
    def switching_profile_ids(self, switching_profile_ids):
        """Sets the switching_profile_ids of this LogicalPort.


        :param switching_profile_ids: The switching_profile_ids of this LogicalPort.  # noqa: E501
        :type: list[SwitchingProfileTypeIdEntry]
        """

        self._switching_profile_ids = switching_profile_ids

    @property
    def attachment(self):
        """Gets the attachment of this LogicalPort.  # noqa: E501


        :return: The attachment of this LogicalPort.  # noqa: E501
        :rtype: LogicalPortAttachment
        """
        return self._attachment

    @attachment.setter
    def attachment(self, attachment):
        """Sets the attachment of this LogicalPort.


        :param attachment: The attachment of this LogicalPort.  # noqa: E501
        :type: LogicalPortAttachment
        """

        self._attachment = attachment

    @property
    def admin_state(self):
        """Gets the admin_state of this LogicalPort.  # noqa: E501

        Represents Desired state of the logical port  # noqa: E501

        :return: The admin_state of this LogicalPort.  # noqa: E501
        :rtype: str
        """
        return self._admin_state

    @admin_state.setter
    def admin_state(self, admin_state):
        """Sets the admin_state of this LogicalPort.

        Represents Desired state of the logical port  # noqa: E501

        :param admin_state: The admin_state of this LogicalPort.  # noqa: E501
        :type: str
        """
        if admin_state is None:
            raise ValueError("Invalid value for `admin_state`, must not be `None`")  # noqa: E501
        allowed_values = ["UP", "DOWN"]  # noqa: E501
        if admin_state not in allowed_values:
            raise ValueError(
                "Invalid value for `admin_state` ({0}), must be one of {1}"  # noqa: E501
                .format(admin_state, allowed_values)
            )

        self._admin_state = admin_state

    @property
    def extra_configs(self):
        """Gets the extra_configs of this LogicalPort.  # noqa: E501

        This property could be used for vendor specific configuration in key value string pairs. Logical port setting will override logical switch setting if the same key was set on both logical switch and logical port.   # noqa: E501

        :return: The extra_configs of this LogicalPort.  # noqa: E501
        :rtype: list[ExtraConfig]
        """
        return self._extra_configs

    @extra_configs.setter
    def extra_configs(self, extra_configs):
        """Sets the extra_configs of this LogicalPort.

        This property could be used for vendor specific configuration in key value string pairs. Logical port setting will override logical switch setting if the same key was set on both logical switch and logical port.   # noqa: E501

        :param extra_configs: The extra_configs of this LogicalPort.  # noqa: E501
        :type: list[ExtraConfig]
        """

        self._extra_configs = extra_configs

    @property
    def address_bindings(self):
        """Gets the address_bindings of this LogicalPort.  # noqa: E501

        Each address binding must contain both an IPElement and MAC address. VLAN ID is optional. This binding configuration can be used by features such as spoof-guard and overrides any discovered bindings. Any non unique entries are deduplicated to generate a unique set of address bindings and then stored. For IPv6 addresses, a subnet address cannot have host bits set. A maximum of 128 unique address bindings is allowed per port.   # noqa: E501

        :return: The address_bindings of this LogicalPort.  # noqa: E501
        :rtype: list[PacketAddressClassifier]
        """
        return self._address_bindings

    @address_bindings.setter
    def address_bindings(self, address_bindings):
        """Sets the address_bindings of this LogicalPort.

        Each address binding must contain both an IPElement and MAC address. VLAN ID is optional. This binding configuration can be used by features such as spoof-guard and overrides any discovered bindings. Any non unique entries are deduplicated to generate a unique set of address bindings and then stored. For IPv6 addresses, a subnet address cannot have host bits set. A maximum of 128 unique address bindings is allowed per port.   # noqa: E501

        :param address_bindings: The address_bindings of this LogicalPort.  # noqa: E501
        :type: list[PacketAddressClassifier]
        """

        self._address_bindings = address_bindings

    @property
    def ignore_address_bindings(self):
        """Gets the ignore_address_bindings of this LogicalPort.  # noqa: E501

        IP Discovery module uses various mechanisms to discover address bindings being used on each port. If a user would like to ignore any specific discovered address bindings or prevent the discovery of a particular set of discovered bindings, then those address bindings can be provided here. Currently IP range in CIDR format is not supported.   # noqa: E501

        :return: The ignore_address_bindings of this LogicalPort.  # noqa: E501
        :rtype: list[PacketAddressClassifier]
        """
        return self._ignore_address_bindings

    @ignore_address_bindings.setter
    def ignore_address_bindings(self, ignore_address_bindings):
        """Sets the ignore_address_bindings of this LogicalPort.

        IP Discovery module uses various mechanisms to discover address bindings being used on each port. If a user would like to ignore any specific discovered address bindings or prevent the discovery of a particular set of discovered bindings, then those address bindings can be provided here. Currently IP range in CIDR format is not supported.   # noqa: E501

        :param ignore_address_bindings: The ignore_address_bindings of this LogicalPort.  # noqa: E501
        :type: list[PacketAddressClassifier]
        """

        self._ignore_address_bindings = ignore_address_bindings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogicalPort, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogicalPort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
