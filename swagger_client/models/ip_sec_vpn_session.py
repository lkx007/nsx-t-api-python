# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class IPSecVPNSession(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'system_owned': 'bool',
        'display_name': 'str',
        'description': 'str',
        'tags': 'list[Tag]',
        'create_user': 'str',
        'protection': 'str',
        'create_time': 'int',
        'last_modified_time': 'int',
        'last_modified_user': 'str',
        'id': 'str',
        'resource_type': 'str',
        'peer_endpoint_id': 'str',
        'ipsec_vpn_service_id': 'str',
        'local_endpoint_id': 'str',
        'tcp_mss_clamping': 'TcpMssClamping',
        'enabled': 'bool'
    }
    if hasattr(ManagedResource, "swagger_types"):
        swagger_types.update(ManagedResource.swagger_types)

    attribute_map = {
        'system_owned': '_system_owned',
        'display_name': 'display_name',
        'description': 'description',
        'tags': 'tags',
        'create_user': '_create_user',
        'protection': '_protection',
        'create_time': '_create_time',
        'last_modified_time': '_last_modified_time',
        'last_modified_user': '_last_modified_user',
        'id': 'id',
        'resource_type': 'resource_type',
        'peer_endpoint_id': 'peer_endpoint_id',
        'ipsec_vpn_service_id': 'ipsec_vpn_service_id',
        'local_endpoint_id': 'local_endpoint_id',
        'tcp_mss_clamping': 'tcp_mss_clamping',
        'enabled': 'enabled'
    }
    if hasattr(ManagedResource, "attribute_map"):
        attribute_map.update(ManagedResource.attribute_map)

    discriminator_value_class_map = {
          'RouteBasedIPSecVPNSession': 'RouteBasedIPSecVPNSession',
'PolicyBasedIPSecVPNSession': 'PolicyBasedIPSecVPNSession'    }

    def __init__(self, system_owned=None, display_name=None, description=None, tags=None, create_user=None, protection=None, create_time=None, last_modified_time=None, last_modified_user=None, id=None, resource_type=None, peer_endpoint_id=None, ipsec_vpn_service_id=None, local_endpoint_id=None, tcp_mss_clamping=None, enabled=True, *args, **kwargs):  # noqa: E501
        """IPSecVPNSession - a model defined in Swagger"""  # noqa: E501
        self._system_owned = None
        self._display_name = None
        self._description = None
        self._tags = None
        self._create_user = None
        self._protection = None
        self._create_time = None
        self._last_modified_time = None
        self._last_modified_user = None
        self._id = None
        self._resource_type = None
        self._peer_endpoint_id = None
        self._ipsec_vpn_service_id = None
        self._local_endpoint_id = None
        self._tcp_mss_clamping = None
        self._enabled = None
        self.discriminator = 'resource_type'
        if system_owned is not None:
            self.system_owned = system_owned
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if create_user is not None:
            self.create_user = create_user
        if protection is not None:
            self.protection = protection
        if create_time is not None:
            self.create_time = create_time
        if last_modified_time is not None:
            self.last_modified_time = last_modified_time
        if last_modified_user is not None:
            self.last_modified_user = last_modified_user
        if id is not None:
            self.id = id
        self.resource_type = resource_type
        self.peer_endpoint_id = peer_endpoint_id
        if ipsec_vpn_service_id is not None:
            self.ipsec_vpn_service_id = ipsec_vpn_service_id
        self.local_endpoint_id = local_endpoint_id
        if tcp_mss_clamping is not None:
            self.tcp_mss_clamping = tcp_mss_clamping
        if enabled is not None:
            self.enabled = enabled
        ManagedResource.__init__(self, *args, **kwargs)

    @property
    def system_owned(self):
        """Gets the system_owned of this IPSecVPNSession.  # noqa: E501

        Indicates system owned resource  # noqa: E501

        :return: The system_owned of this IPSecVPNSession.  # noqa: E501
        :rtype: bool
        """
        return self._system_owned

    @system_owned.setter
    def system_owned(self, system_owned):
        """Sets the system_owned of this IPSecVPNSession.

        Indicates system owned resource  # noqa: E501

        :param system_owned: The system_owned of this IPSecVPNSession.  # noqa: E501
        :type: bool
        """

        self._system_owned = system_owned

    @property
    def display_name(self):
        """Gets the display_name of this IPSecVPNSession.  # noqa: E501

        Defaults to ID if not set  # noqa: E501

        :return: The display_name of this IPSecVPNSession.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this IPSecVPNSession.

        Defaults to ID if not set  # noqa: E501

        :param display_name: The display_name of this IPSecVPNSession.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this IPSecVPNSession.  # noqa: E501

        Description of this resource  # noqa: E501

        :return: The description of this IPSecVPNSession.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IPSecVPNSession.

        Description of this resource  # noqa: E501

        :param description: The description of this IPSecVPNSession.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this IPSecVPNSession.  # noqa: E501

        Opaque identifiers meaningful to the API user  # noqa: E501

        :return: The tags of this IPSecVPNSession.  # noqa: E501
        :rtype: list[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this IPSecVPNSession.

        Opaque identifiers meaningful to the API user  # noqa: E501

        :param tags: The tags of this IPSecVPNSession.  # noqa: E501
        :type: list[Tag]
        """

        self._tags = tags

    @property
    def create_user(self):
        """Gets the create_user of this IPSecVPNSession.  # noqa: E501

        ID of the user who created this resource  # noqa: E501

        :return: The create_user of this IPSecVPNSession.  # noqa: E501
        :rtype: str
        """
        return self._create_user

    @create_user.setter
    def create_user(self, create_user):
        """Sets the create_user of this IPSecVPNSession.

        ID of the user who created this resource  # noqa: E501

        :param create_user: The create_user of this IPSecVPNSession.  # noqa: E501
        :type: str
        """

        self._create_user = create_user

    @property
    def protection(self):
        """Gets the protection of this IPSecVPNSession.  # noqa: E501

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :return: The protection of this IPSecVPNSession.  # noqa: E501
        :rtype: str
        """
        return self._protection

    @protection.setter
    def protection(self, protection):
        """Sets the protection of this IPSecVPNSession.

        Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.   # noqa: E501

        :param protection: The protection of this IPSecVPNSession.  # noqa: E501
        :type: str
        """

        self._protection = protection

    @property
    def create_time(self):
        """Gets the create_time of this IPSecVPNSession.  # noqa: E501

        Timestamp of resource creation  # noqa: E501

        :return: The create_time of this IPSecVPNSession.  # noqa: E501
        :rtype: int
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this IPSecVPNSession.

        Timestamp of resource creation  # noqa: E501

        :param create_time: The create_time of this IPSecVPNSession.  # noqa: E501
        :type: int
        """

        self._create_time = create_time

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this IPSecVPNSession.  # noqa: E501

        Timestamp of last modification  # noqa: E501

        :return: The last_modified_time of this IPSecVPNSession.  # noqa: E501
        :rtype: int
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this IPSecVPNSession.

        Timestamp of last modification  # noqa: E501

        :param last_modified_time: The last_modified_time of this IPSecVPNSession.  # noqa: E501
        :type: int
        """

        self._last_modified_time = last_modified_time

    @property
    def last_modified_user(self):
        """Gets the last_modified_user of this IPSecVPNSession.  # noqa: E501

        ID of the user who last modified this resource  # noqa: E501

        :return: The last_modified_user of this IPSecVPNSession.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_user

    @last_modified_user.setter
    def last_modified_user(self, last_modified_user):
        """Sets the last_modified_user of this IPSecVPNSession.

        ID of the user who last modified this resource  # noqa: E501

        :param last_modified_user: The last_modified_user of this IPSecVPNSession.  # noqa: E501
        :type: str
        """

        self._last_modified_user = last_modified_user

    @property
    def id(self):
        """Gets the id of this IPSecVPNSession.  # noqa: E501

        Unique identifier of this resource  # noqa: E501

        :return: The id of this IPSecVPNSession.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IPSecVPNSession.

        Unique identifier of this resource  # noqa: E501

        :param id: The id of this IPSecVPNSession.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def resource_type(self):
        """Gets the resource_type of this IPSecVPNSession.  # noqa: E501

        A Policy Based VPN requires to define protect rules that match   local and peer subnets. IPSec security associations is   negotiated for each pair of local and peer subnet. A Route Based VPN is more flexible, more powerful and recommended over   policy based VPN. IP Tunnel port is created and all traffic routed via   tunnel port is protected. Routes can be configured statically   or can be learned through BGP. A route based VPN is must for establishing   redundant VPN session to remote site.   # noqa: E501

        :return: The resource_type of this IPSecVPNSession.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this IPSecVPNSession.

        A Policy Based VPN requires to define protect rules that match   local and peer subnets. IPSec security associations is   negotiated for each pair of local and peer subnet. A Route Based VPN is more flexible, more powerful and recommended over   policy based VPN. IP Tunnel port is created and all traffic routed via   tunnel port is protected. Routes can be configured statically   or can be learned through BGP. A route based VPN is must for establishing   redundant VPN session to remote site.   # noqa: E501

        :param resource_type: The resource_type of this IPSecVPNSession.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501
        allowed_values = ["PolicyBasedIPSecVPNSession", "RouteBasedIPSecVPNSession"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def peer_endpoint_id(self):
        """Gets the peer_endpoint_id of this IPSecVPNSession.  # noqa: E501

        Peer endpoint identifier.  # noqa: E501

        :return: The peer_endpoint_id of this IPSecVPNSession.  # noqa: E501
        :rtype: str
        """
        return self._peer_endpoint_id

    @peer_endpoint_id.setter
    def peer_endpoint_id(self, peer_endpoint_id):
        """Sets the peer_endpoint_id of this IPSecVPNSession.

        Peer endpoint identifier.  # noqa: E501

        :param peer_endpoint_id: The peer_endpoint_id of this IPSecVPNSession.  # noqa: E501
        :type: str
        """
        if peer_endpoint_id is None:
            raise ValueError("Invalid value for `peer_endpoint_id`, must not be `None`")  # noqa: E501

        self._peer_endpoint_id = peer_endpoint_id

    @property
    def ipsec_vpn_service_id(self):
        """Gets the ipsec_vpn_service_id of this IPSecVPNSession.  # noqa: E501

        Identifier of VPN Service linked with local endpoint.  # noqa: E501

        :return: The ipsec_vpn_service_id of this IPSecVPNSession.  # noqa: E501
        :rtype: str
        """
        return self._ipsec_vpn_service_id

    @ipsec_vpn_service_id.setter
    def ipsec_vpn_service_id(self, ipsec_vpn_service_id):
        """Sets the ipsec_vpn_service_id of this IPSecVPNSession.

        Identifier of VPN Service linked with local endpoint.  # noqa: E501

        :param ipsec_vpn_service_id: The ipsec_vpn_service_id of this IPSecVPNSession.  # noqa: E501
        :type: str
        """

        self._ipsec_vpn_service_id = ipsec_vpn_service_id

    @property
    def local_endpoint_id(self):
        """Gets the local_endpoint_id of this IPSecVPNSession.  # noqa: E501

        Local endpoint identifier.  # noqa: E501

        :return: The local_endpoint_id of this IPSecVPNSession.  # noqa: E501
        :rtype: str
        """
        return self._local_endpoint_id

    @local_endpoint_id.setter
    def local_endpoint_id(self, local_endpoint_id):
        """Sets the local_endpoint_id of this IPSecVPNSession.

        Local endpoint identifier.  # noqa: E501

        :param local_endpoint_id: The local_endpoint_id of this IPSecVPNSession.  # noqa: E501
        :type: str
        """
        if local_endpoint_id is None:
            raise ValueError("Invalid value for `local_endpoint_id`, must not be `None`")  # noqa: E501

        self._local_endpoint_id = local_endpoint_id

    @property
    def tcp_mss_clamping(self):
        """Gets the tcp_mss_clamping of this IPSecVPNSession.  # noqa: E501


        :return: The tcp_mss_clamping of this IPSecVPNSession.  # noqa: E501
        :rtype: TcpMssClamping
        """
        return self._tcp_mss_clamping

    @tcp_mss_clamping.setter
    def tcp_mss_clamping(self, tcp_mss_clamping):
        """Sets the tcp_mss_clamping of this IPSecVPNSession.


        :param tcp_mss_clamping: The tcp_mss_clamping of this IPSecVPNSession.  # noqa: E501
        :type: TcpMssClamping
        """

        self._tcp_mss_clamping = tcp_mss_clamping

    @property
    def enabled(self):
        """Gets the enabled of this IPSecVPNSession.  # noqa: E501

        Enable/Disable IPSec VPN session.  # noqa: E501

        :return: The enabled of this IPSecVPNSession.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this IPSecVPNSession.

        Enable/Disable IPSec VPN session.  # noqa: E501

        :param enabled: The enabled of this IPSecVPNSession.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IPSecVPNSession, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IPSecVPNSession):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
