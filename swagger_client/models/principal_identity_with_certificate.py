# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PrincipalIdentityWithCertificate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_protected': 'bool',
        'role': 'str',
        'name': 'str',
        'permission_group': 'str',
        'certificate_id': 'str',
        'node_id': 'str',
        'certificate_pem': 'str'
    }
    if hasattr(PrincipalIdentity, "swagger_types"):
        swagger_types.update(PrincipalIdentity.swagger_types)

    attribute_map = {
        'is_protected': 'is_protected',
        'role': 'role',
        'name': 'name',
        'permission_group': 'permission_group',
        'certificate_id': 'certificate_id',
        'node_id': 'node_id',
        'certificate_pem': 'certificate_pem'
    }
    if hasattr(PrincipalIdentity, "attribute_map"):
        attribute_map.update(PrincipalIdentity.attribute_map)

    def __init__(self, is_protected=None, role=None, name=None, permission_group=None, certificate_id=None, node_id=None, certificate_pem=None, *args, **kwargs):  # noqa: E501
        """PrincipalIdentityWithCertificate - a model defined in Swagger"""  # noqa: E501
        self._is_protected = None
        self._role = None
        self._name = None
        self._permission_group = None
        self._certificate_id = None
        self._node_id = None
        self._certificate_pem = None
        self.discriminator = None
        if is_protected is not None:
            self.is_protected = is_protected
        if role is not None:
            self.role = role
        self.name = name
        if permission_group is not None:
            self.permission_group = permission_group
        if certificate_id is not None:
            self.certificate_id = certificate_id
        self.node_id = node_id
        self.certificate_pem = certificate_pem
        PrincipalIdentity.__init__(self, *args, **kwargs)

    @property
    def is_protected(self):
        """Gets the is_protected of this PrincipalIdentityWithCertificate.  # noqa: E501

        Indicator whether the entities created by this principal should be protected  # noqa: E501

        :return: The is_protected of this PrincipalIdentityWithCertificate.  # noqa: E501
        :rtype: bool
        """
        return self._is_protected

    @is_protected.setter
    def is_protected(self, is_protected):
        """Sets the is_protected of this PrincipalIdentityWithCertificate.

        Indicator whether the entities created by this principal should be protected  # noqa: E501

        :param is_protected: The is_protected of this PrincipalIdentityWithCertificate.  # noqa: E501
        :type: bool
        """

        self._is_protected = is_protected

    @property
    def role(self):
        """Gets the role of this PrincipalIdentityWithCertificate.  # noqa: E501

        Role  # noqa: E501

        :return: The role of this PrincipalIdentityWithCertificate.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this PrincipalIdentityWithCertificate.

        Role  # noqa: E501

        :param role: The role of this PrincipalIdentityWithCertificate.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def name(self):
        """Gets the name of this PrincipalIdentityWithCertificate.  # noqa: E501

        Name of the principal  # noqa: E501

        :return: The name of this PrincipalIdentityWithCertificate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PrincipalIdentityWithCertificate.

        Name of the principal  # noqa: E501

        :param name: The name of this PrincipalIdentityWithCertificate.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def permission_group(self):
        """Gets the permission_group of this PrincipalIdentityWithCertificate.  # noqa: E501

        Use the 'role' field instead and pass in 'auditor' for read_only_api_users or 'enterprise_admin' for the others.  # noqa: E501

        :return: The permission_group of this PrincipalIdentityWithCertificate.  # noqa: E501
        :rtype: str
        """
        return self._permission_group

    @permission_group.setter
    def permission_group(self, permission_group):
        """Sets the permission_group of this PrincipalIdentityWithCertificate.

        Use the 'role' field instead and pass in 'auditor' for read_only_api_users or 'enterprise_admin' for the others.  # noqa: E501

        :param permission_group: The permission_group of this PrincipalIdentityWithCertificate.  # noqa: E501
        :type: str
        """
        allowed_values = ["read_only_api_users", "read_write_api_users", "superusers", "undefined"]  # noqa: E501
        if permission_group not in allowed_values:
            raise ValueError(
                "Invalid value for `permission_group` ({0}), must be one of {1}"  # noqa: E501
                .format(permission_group, allowed_values)
            )

        self._permission_group = permission_group

    @property
    def certificate_id(self):
        """Gets the certificate_id of this PrincipalIdentityWithCertificate.  # noqa: E501

        Id of the stored certificate. When used with the deprecated POST /trust-management/principal-identities API this field is required.  # noqa: E501

        :return: The certificate_id of this PrincipalIdentityWithCertificate.  # noqa: E501
        :rtype: str
        """
        return self._certificate_id

    @certificate_id.setter
    def certificate_id(self, certificate_id):
        """Sets the certificate_id of this PrincipalIdentityWithCertificate.

        Id of the stored certificate. When used with the deprecated POST /trust-management/principal-identities API this field is required.  # noqa: E501

        :param certificate_id: The certificate_id of this PrincipalIdentityWithCertificate.  # noqa: E501
        :type: str
        """

        self._certificate_id = certificate_id

    @property
    def node_id(self):
        """Gets the node_id of this PrincipalIdentityWithCertificate.  # noqa: E501

        Unique node-id of a principal  # noqa: E501

        :return: The node_id of this PrincipalIdentityWithCertificate.  # noqa: E501
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this PrincipalIdentityWithCertificate.

        Unique node-id of a principal  # noqa: E501

        :param node_id: The node_id of this PrincipalIdentityWithCertificate.  # noqa: E501
        :type: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")  # noqa: E501

        self._node_id = node_id

    @property
    def certificate_pem(self):
        """Gets the certificate_pem of this PrincipalIdentityWithCertificate.  # noqa: E501

        PEM encoding of the new certificate  # noqa: E501

        :return: The certificate_pem of this PrincipalIdentityWithCertificate.  # noqa: E501
        :rtype: str
        """
        return self._certificate_pem

    @certificate_pem.setter
    def certificate_pem(self, certificate_pem):
        """Sets the certificate_pem of this PrincipalIdentityWithCertificate.

        PEM encoding of the new certificate  # noqa: E501

        :param certificate_pem: The certificate_pem of this PrincipalIdentityWithCertificate.  # noqa: E501
        :type: str
        """
        if certificate_pem is None:
            raise ValueError("Invalid value for `certificate_pem`, must not be `None`")  # noqa: E501

        self._certificate_pem = certificate_pem

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PrincipalIdentityWithCertificate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrincipalIdentityWithCertificate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
