# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class UplinkHostSwitchProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'required_capabilities': 'list[str]',
        'resource_type': 'str',
        'lags': 'list[Lag]',
        'transport_vlan': 'int',
        'teaming': 'TeamingPolicy',
        'overlay_encap': 'str',
        'named_teamings': 'list[NamedTeamingPolicy]',
        'mtu': 'int'
    }
    if hasattr(BaseHostSwitchProfile, "swagger_types"):
        swagger_types.update(BaseHostSwitchProfile.swagger_types)

    attribute_map = {
        'required_capabilities': 'required_capabilities',
        'resource_type': 'resource_type',
        'lags': 'lags',
        'transport_vlan': 'transport_vlan',
        'teaming': 'teaming',
        'overlay_encap': 'overlay_encap',
        'named_teamings': 'named_teamings',
        'mtu': 'mtu'
    }
    if hasattr(BaseHostSwitchProfile, "attribute_map"):
        attribute_map.update(BaseHostSwitchProfile.attribute_map)

    def __init__(self, required_capabilities=None, resource_type=None, lags=None, transport_vlan=0, teaming=None, overlay_encap='GENEVE', named_teamings=None, mtu=None, *args, **kwargs):  # noqa: E501
        """UplinkHostSwitchProfile - a model defined in Swagger"""  # noqa: E501
        self._required_capabilities = None
        self._resource_type = None
        self._lags = None
        self._transport_vlan = None
        self._teaming = None
        self._overlay_encap = None
        self._named_teamings = None
        self._mtu = None
        self.discriminator = None
        if required_capabilities is not None:
            self.required_capabilities = required_capabilities
        self.resource_type = resource_type
        if lags is not None:
            self.lags = lags
        if transport_vlan is not None:
            self.transport_vlan = transport_vlan
        self.teaming = teaming
        if overlay_encap is not None:
            self.overlay_encap = overlay_encap
        if named_teamings is not None:
            self.named_teamings = named_teamings
        if mtu is not None:
            self.mtu = mtu
        BaseHostSwitchProfile.__init__(self, *args, **kwargs)

    @property
    def required_capabilities(self):
        """Gets the required_capabilities of this UplinkHostSwitchProfile.  # noqa: E501


        :return: The required_capabilities of this UplinkHostSwitchProfile.  # noqa: E501
        :rtype: list[str]
        """
        return self._required_capabilities

    @required_capabilities.setter
    def required_capabilities(self, required_capabilities):
        """Sets the required_capabilities of this UplinkHostSwitchProfile.


        :param required_capabilities: The required_capabilities of this UplinkHostSwitchProfile.  # noqa: E501
        :type: list[str]
        """

        self._required_capabilities = required_capabilities

    @property
    def resource_type(self):
        """Gets the resource_type of this UplinkHostSwitchProfile.  # noqa: E501

        Supported HostSwitch profiles.  # noqa: E501

        :return: The resource_type of this UplinkHostSwitchProfile.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this UplinkHostSwitchProfile.

        Supported HostSwitch profiles.  # noqa: E501

        :param resource_type: The resource_type of this UplinkHostSwitchProfile.  # noqa: E501
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501
        allowed_values = ["UplinkHostSwitchProfile", "LldpHostSwitchProfile", "NiocProfile", "ExtraConfigHostSwitchProfile"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def lags(self):
        """Gets the lags of this UplinkHostSwitchProfile.  # noqa: E501

        list of LACP group  # noqa: E501

        :return: The lags of this UplinkHostSwitchProfile.  # noqa: E501
        :rtype: list[Lag]
        """
        return self._lags

    @lags.setter
    def lags(self, lags):
        """Sets the lags of this UplinkHostSwitchProfile.

        list of LACP group  # noqa: E501

        :param lags: The lags of this UplinkHostSwitchProfile.  # noqa: E501
        :type: list[Lag]
        """

        self._lags = lags

    @property
    def transport_vlan(self):
        """Gets the transport_vlan of this UplinkHostSwitchProfile.  # noqa: E501

        VLAN used for tagging Overlay traffic of associated HostSwitch  # noqa: E501

        :return: The transport_vlan of this UplinkHostSwitchProfile.  # noqa: E501
        :rtype: int
        """
        return self._transport_vlan

    @transport_vlan.setter
    def transport_vlan(self, transport_vlan):
        """Sets the transport_vlan of this UplinkHostSwitchProfile.

        VLAN used for tagging Overlay traffic of associated HostSwitch  # noqa: E501

        :param transport_vlan: The transport_vlan of this UplinkHostSwitchProfile.  # noqa: E501
        :type: int
        """

        self._transport_vlan = transport_vlan

    @property
    def teaming(self):
        """Gets the teaming of this UplinkHostSwitchProfile.  # noqa: E501


        :return: The teaming of this UplinkHostSwitchProfile.  # noqa: E501
        :rtype: TeamingPolicy
        """
        return self._teaming

    @teaming.setter
    def teaming(self, teaming):
        """Sets the teaming of this UplinkHostSwitchProfile.


        :param teaming: The teaming of this UplinkHostSwitchProfile.  # noqa: E501
        :type: TeamingPolicy
        """
        if teaming is None:
            raise ValueError("Invalid value for `teaming`, must not be `None`")  # noqa: E501

        self._teaming = teaming

    @property
    def overlay_encap(self):
        """Gets the overlay_encap of this UplinkHostSwitchProfile.  # noqa: E501

        The protocol used to encapsulate overlay traffic  # noqa: E501

        :return: The overlay_encap of this UplinkHostSwitchProfile.  # noqa: E501
        :rtype: str
        """
        return self._overlay_encap

    @overlay_encap.setter
    def overlay_encap(self, overlay_encap):
        """Sets the overlay_encap of this UplinkHostSwitchProfile.

        The protocol used to encapsulate overlay traffic  # noqa: E501

        :param overlay_encap: The overlay_encap of this UplinkHostSwitchProfile.  # noqa: E501
        :type: str
        """
        allowed_values = ["VXLAN", "GENEVE"]  # noqa: E501
        if overlay_encap not in allowed_values:
            raise ValueError(
                "Invalid value for `overlay_encap` ({0}), must be one of {1}"  # noqa: E501
                .format(overlay_encap, allowed_values)
            )

        self._overlay_encap = overlay_encap

    @property
    def named_teamings(self):
        """Gets the named_teamings of this UplinkHostSwitchProfile.  # noqa: E501

        List of named uplink teaming policies that can be used by logical switches  # noqa: E501

        :return: The named_teamings of this UplinkHostSwitchProfile.  # noqa: E501
        :rtype: list[NamedTeamingPolicy]
        """
        return self._named_teamings

    @named_teamings.setter
    def named_teamings(self, named_teamings):
        """Sets the named_teamings of this UplinkHostSwitchProfile.

        List of named uplink teaming policies that can be used by logical switches  # noqa: E501

        :param named_teamings: The named_teamings of this UplinkHostSwitchProfile.  # noqa: E501
        :type: list[NamedTeamingPolicy]
        """

        self._named_teamings = named_teamings

    @property
    def mtu(self):
        """Gets the mtu of this UplinkHostSwitchProfile.  # noqa: E501

        Maximum Transmission Unit used for uplinks  # noqa: E501

        :return: The mtu of this UplinkHostSwitchProfile.  # noqa: E501
        :rtype: int
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this UplinkHostSwitchProfile.

        Maximum Transmission Unit used for uplinks  # noqa: E501

        :param mtu: The mtu of this UplinkHostSwitchProfile.  # noqa: E501
        :type: int
        """

        self._mtu = mtu

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UplinkHostSwitchProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UplinkHostSwitchProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
