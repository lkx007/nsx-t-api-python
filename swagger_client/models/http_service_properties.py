# coding: utf-8

"""
    NSX-T Manager API

    VMware NSX-T Manager REST API  # noqa: E501

    OpenAPI spec version: 2.5.1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class HttpServiceProperties(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'global_api_concurrency_limit': 'int',
        'client_api_concurrency_limit': 'int',
        'session_timeout': 'int',
        'client_api_rate_limit': 'int',
        'certificate': 'Certificate',
        'redirect_host': 'str',
        'protocol_versions': 'list[ProtocolVersion]',
        'cipher_suites': 'list[CipherSuite]',
        'connection_timeout': 'int'
    }

    attribute_map = {
        'global_api_concurrency_limit': 'global_api_concurrency_limit',
        'client_api_concurrency_limit': 'client_api_concurrency_limit',
        'session_timeout': 'session_timeout',
        'client_api_rate_limit': 'client_api_rate_limit',
        'certificate': 'certificate',
        'redirect_host': 'redirect_host',
        'protocol_versions': 'protocol_versions',
        'cipher_suites': 'cipher_suites',
        'connection_timeout': 'connection_timeout'
    }

    def __init__(self, global_api_concurrency_limit=100, client_api_concurrency_limit=40, session_timeout=None, client_api_rate_limit=100, certificate=None, redirect_host='', protocol_versions=None, cipher_suites=None, connection_timeout=None):  # noqa: E501
        """HttpServiceProperties - a model defined in Swagger"""  # noqa: E501
        self._global_api_concurrency_limit = None
        self._client_api_concurrency_limit = None
        self._session_timeout = None
        self._client_api_rate_limit = None
        self._certificate = None
        self._redirect_host = None
        self._protocol_versions = None
        self._cipher_suites = None
        self._connection_timeout = None
        self.discriminator = None
        if global_api_concurrency_limit is not None:
            self.global_api_concurrency_limit = global_api_concurrency_limit
        if client_api_concurrency_limit is not None:
            self.client_api_concurrency_limit = client_api_concurrency_limit
        if session_timeout is not None:
            self.session_timeout = session_timeout
        if client_api_rate_limit is not None:
            self.client_api_rate_limit = client_api_rate_limit
        if certificate is not None:
            self.certificate = certificate
        if redirect_host is not None:
            self.redirect_host = redirect_host
        if protocol_versions is not None:
            self.protocol_versions = protocol_versions
        if cipher_suites is not None:
            self.cipher_suites = cipher_suites
        if connection_timeout is not None:
            self.connection_timeout = connection_timeout

    @property
    def global_api_concurrency_limit(self):
        """Gets the global_api_concurrency_limit of this HttpServiceProperties.  # noqa: E501

        The maximum number of concurrent API requests that will be serviced. If the number of API requests being processed exceeds this limit, new API requests will be refused and a 503 Service Unavailable response will be returned to the client.  To disable API concurrency limiting, set this value to 0.  # noqa: E501

        :return: The global_api_concurrency_limit of this HttpServiceProperties.  # noqa: E501
        :rtype: int
        """
        return self._global_api_concurrency_limit

    @global_api_concurrency_limit.setter
    def global_api_concurrency_limit(self, global_api_concurrency_limit):
        """Sets the global_api_concurrency_limit of this HttpServiceProperties.

        The maximum number of concurrent API requests that will be serviced. If the number of API requests being processed exceeds this limit, new API requests will be refused and a 503 Service Unavailable response will be returned to the client.  To disable API concurrency limiting, set this value to 0.  # noqa: E501

        :param global_api_concurrency_limit: The global_api_concurrency_limit of this HttpServiceProperties.  # noqa: E501
        :type: int
        """

        self._global_api_concurrency_limit = global_api_concurrency_limit

    @property
    def client_api_concurrency_limit(self):
        """Gets the client_api_concurrency_limit of this HttpServiceProperties.  # noqa: E501

        The maximum number of concurrent API requests that will be serviced for a given authenticated client.  If the number of API requests being processed exceeds this limit, new API requests will be refused and a 503 Service Unavailable response will be returned to the client. To disable API concurrency limiting, set this value to 0.  # noqa: E501

        :return: The client_api_concurrency_limit of this HttpServiceProperties.  # noqa: E501
        :rtype: int
        """
        return self._client_api_concurrency_limit

    @client_api_concurrency_limit.setter
    def client_api_concurrency_limit(self, client_api_concurrency_limit):
        """Sets the client_api_concurrency_limit of this HttpServiceProperties.

        The maximum number of concurrent API requests that will be serviced for a given authenticated client.  If the number of API requests being processed exceeds this limit, new API requests will be refused and a 503 Service Unavailable response will be returned to the client. To disable API concurrency limiting, set this value to 0.  # noqa: E501

        :param client_api_concurrency_limit: The client_api_concurrency_limit of this HttpServiceProperties.  # noqa: E501
        :type: int
        """

        self._client_api_concurrency_limit = client_api_concurrency_limit

    @property
    def session_timeout(self):
        """Gets the session_timeout of this HttpServiceProperties.  # noqa: E501

        NSX session inactivity timeout, set to 0 to configure no timeout  # noqa: E501

        :return: The session_timeout of this HttpServiceProperties.  # noqa: E501
        :rtype: int
        """
        return self._session_timeout

    @session_timeout.setter
    def session_timeout(self, session_timeout):
        """Sets the session_timeout of this HttpServiceProperties.

        NSX session inactivity timeout, set to 0 to configure no timeout  # noqa: E501

        :param session_timeout: The session_timeout of this HttpServiceProperties.  # noqa: E501
        :type: int
        """

        self._session_timeout = session_timeout

    @property
    def client_api_rate_limit(self):
        """Gets the client_api_rate_limit of this HttpServiceProperties.  # noqa: E501

        The maximum number of API requests that will be serviced per second for a given authenticated client.  If more API requests are received than can be serviced, a 429 Too Many Requests HTTP response will be returned. To disable API rate limiting, set this value to 0.  # noqa: E501

        :return: The client_api_rate_limit of this HttpServiceProperties.  # noqa: E501
        :rtype: int
        """
        return self._client_api_rate_limit

    @client_api_rate_limit.setter
    def client_api_rate_limit(self, client_api_rate_limit):
        """Sets the client_api_rate_limit of this HttpServiceProperties.

        The maximum number of API requests that will be serviced per second for a given authenticated client.  If more API requests are received than can be serviced, a 429 Too Many Requests HTTP response will be returned. To disable API rate limiting, set this value to 0.  # noqa: E501

        :param client_api_rate_limit: The client_api_rate_limit of this HttpServiceProperties.  # noqa: E501
        :type: int
        """

        self._client_api_rate_limit = client_api_rate_limit

    @property
    def certificate(self):
        """Gets the certificate of this HttpServiceProperties.  # noqa: E501


        :return: The certificate of this HttpServiceProperties.  # noqa: E501
        :rtype: Certificate
        """
        return self._certificate

    @certificate.setter
    def certificate(self, certificate):
        """Sets the certificate of this HttpServiceProperties.


        :param certificate: The certificate of this HttpServiceProperties.  # noqa: E501
        :type: Certificate
        """

        self._certificate = certificate

    @property
    def redirect_host(self):
        """Gets the redirect_host of this HttpServiceProperties.  # noqa: E501

        Host name or IP address to use for redirect location headers, or empty string to derive from current request  # noqa: E501

        :return: The redirect_host of this HttpServiceProperties.  # noqa: E501
        :rtype: str
        """
        return self._redirect_host

    @redirect_host.setter
    def redirect_host(self, redirect_host):
        """Sets the redirect_host of this HttpServiceProperties.

        Host name or IP address to use for redirect location headers, or empty string to derive from current request  # noqa: E501

        :param redirect_host: The redirect_host of this HttpServiceProperties.  # noqa: E501
        :type: str
        """

        self._redirect_host = redirect_host

    @property
    def protocol_versions(self):
        """Gets the protocol_versions of this HttpServiceProperties.  # noqa: E501

        TLS protocol versions  # noqa: E501

        :return: The protocol_versions of this HttpServiceProperties.  # noqa: E501
        :rtype: list[ProtocolVersion]
        """
        return self._protocol_versions

    @protocol_versions.setter
    def protocol_versions(self, protocol_versions):
        """Sets the protocol_versions of this HttpServiceProperties.

        TLS protocol versions  # noqa: E501

        :param protocol_versions: The protocol_versions of this HttpServiceProperties.  # noqa: E501
        :type: list[ProtocolVersion]
        """

        self._protocol_versions = protocol_versions

    @property
    def cipher_suites(self):
        """Gets the cipher_suites of this HttpServiceProperties.  # noqa: E501

        Cipher suites used to secure contents of connection  # noqa: E501

        :return: The cipher_suites of this HttpServiceProperties.  # noqa: E501
        :rtype: list[CipherSuite]
        """
        return self._cipher_suites

    @cipher_suites.setter
    def cipher_suites(self, cipher_suites):
        """Sets the cipher_suites of this HttpServiceProperties.

        Cipher suites used to secure contents of connection  # noqa: E501

        :param cipher_suites: The cipher_suites of this HttpServiceProperties.  # noqa: E501
        :type: list[CipherSuite]
        """

        self._cipher_suites = cipher_suites

    @property
    def connection_timeout(self):
        """Gets the connection_timeout of this HttpServiceProperties.  # noqa: E501

        NSX connection timeout, set to 0 to configure no timeout  # noqa: E501

        :return: The connection_timeout of this HttpServiceProperties.  # noqa: E501
        :rtype: int
        """
        return self._connection_timeout

    @connection_timeout.setter
    def connection_timeout(self, connection_timeout):
        """Sets the connection_timeout of this HttpServiceProperties.

        NSX connection timeout, set to 0 to configure no timeout  # noqa: E501

        :param connection_timeout: The connection_timeout of this HttpServiceProperties.  # noqa: E501
        :type: int
        """

        self._connection_timeout = connection_timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HttpServiceProperties, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HttpServiceProperties):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
